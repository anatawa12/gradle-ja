/*
 * Copyright 2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
dependencies {
    compile libraries.groovy
    compile project(':core')
    compile project(':plugins')
    compile project(':wrapper')
    integTestRuntime project(':maven')
    integTestRuntime project(':scala')
}

dependencies {
    components {
        eachComponent { ComponentMetadataDetails details ->
            def version = details.id.version
            if(version.matches("(\\d\\.?)+")){
                details.status = "release"
            }else{
                details.status = "integration"
            }
            details.statusScheme = ["integration", "release"]
        }
    }
}

task generateTemplateVersionFile(type: GenerateVersionProperties) {
    outputFile = new File(generatedResourcesDir, "org/gradle/buildinit/tasks/templates/library-versions.properties")
    library 'org.scalatest:scalatest_2.10:latest.release'
    library 'org.scala-lang:scala-library:latest.release'
    library 'org.codehaus.groovy:groovy:latest.release'
    library 'junit:junit:latest.release'
}

sourceSets.main.resources.srcDir generatedResourcesDir
processResources.dependsOn generateTemplateVersionFile

eclipseClasspath.dependsOn generateTemplateVersionFile
ideaModule.dependsOn generateTemplateVersionFile

class GenerateVersionProperties extends DefaultTask {

    @OutputFile
    File outputFile

    @Input
    def libraryDefinitions = []

    @TaskAction
    void generateFile() {
        resolveFiles()
    }

    def resolveFiles() {
        def libDependencies = libraryDefinitions.collect { project.dependencies.create(it) }
        def templateVersionConfiguration = project.configurations.detachedConfiguration(libDependencies.toArray(new Dependency[libDependencies.size()]))
        templateVersionConfiguration.transitive = false
        Properties versionProperties = new Properties()

        ResolutionResult resolutionResult = templateVersionConfiguration.incoming.resolutionResult
        resolutionResult.root.dependencies.each { dep -> versionProperties.put(dep.requested.name, dep.selected.id.version) }
        outputFile.withOutputStream { outputStream ->
            versionProperties.store(outputStream, "Version values used in build-init templates")
        }
    }

    def library(Object dependencyNotation) {
        libraryDefinitions << dependencyNotation
    }
}


useTestFixtures()
useClassycle()
