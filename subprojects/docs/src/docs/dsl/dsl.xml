<!--
  ~ Copyright 2011 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<book id="dsl">
    <bookinfo>
        <title>Gradleビルド言語リファレンス <phrase role="original">Gradle Build Language Reference</phrase></title>
        <titleabbrev>Gradle DSL</titleabbrev>
    </bookinfo>

    <section>
        <title>はじめに <phrase role="original">Introduction</phrase></title>
        <para role="original">This reference guide describes the various types which make up the Gradle build language, or DSL.</para>
        <para>このリファレンスガイドは、Gradleビルド言語、DSLを構成する、様々な型について説明するものです。</para>
    </section>

    <section>
        <title>いくつかの基本<phrase role="original">Some basics</phrase></title>
        <para role="original">There are a few basic concepts that you should understand, which will help you write Gradle scripts.</para>
        <para>あなたが理解すべきなのは少々の基本構想で、それらはあなたがGradleスクリプトを記述する際に助けになるでしょう。</para>

        <para role="original">First, Gradle scripts are <firstterm>configuration scripts</firstterm>. As the script executes, it
            configures an object of a particular type. For example, as a build script executes, it configures an
            object of type <apilink class="org.gradle.api.Project"/>. This object is called the <firstterm>delegate object</firstterm>
            of the script. The following table shows the delegate for each type of Gradle script.
        </para>
	<para>最初に、Gradleスクリプトは<firstterm>設定スクリプト</firstterm>です。スクリプトを実行すると、特有の型のオブジェクトを形成します。
	    例えば、ビルドスクリプトを実行すると、<apilink class="org.gradle.api.Project"/>型のオブジェクトを形成します。
	    このオブジェクトはスクリプトの<firstterm>委譲オブジェクト(deligateオブジェクト)</firstterm>
            と呼ばれています。下記の表でGradleスクリプトの各型の委譲を示します。
        </para>

        <table>
	    <title>スクリプトの委譲<phrase role="original">Script delegates</phrase></title>
            <thead>
                <tr>
		    <td>スクリプトの型<phrase role="original">Type of script</phrase></td>
		    <td>委譲先のインスタンス<phrase role="original">Delegates to instance of</phrase></td>
                </tr>
            </thead>
            <tr>
		<td>ビルドスクリプト<phrase role="original">Build script</phrase></td>
                <td>
                    <apilink class="org.gradle.api.Project"/>
                </td>
            </tr>
            <tr>
		<td>初期化スクリプト<phrase role="original">Init script</phrase></td>
                <td>
                    <apilink class="org.gradle.api.invocation.Gradle"/>
                </td>
            </tr>
            <tr>
		<td>設定スクリプト<phrase role="original">Settings script</phrase></td>
                <td>
                    <apilink class="org.gradle.api.initialization.Settings"/>
                </td>
            </tr>
        </table>

	<para role="original">The properties and methods of the delegate object are available for you to use in the script.</para>
        <para>委譲オブジェクトのプロパティやメソッドは、あなたがスクリプトの中で使用することができます。</para>

	<para role="original">Second, each Gradle script implements the <apilink class="org.gradle.api.Script"/> interface. This
            interface defines a number of properties and methods which you can use in the script.
        </para>
        <para>２番めに、各Gradleスクリプトは<apilink class="org.gradle.api.Script"/>インターフェイスを継承しています。このインターフェイスはあなたがスクリプト内で使用できる多くのプロパティやメソッドを定義しています。
        </para>
    </section>

    <!--
      -
      - 1. Adding new types:
      - There are 2 ways to include a new types to this guide:
      -     * Types referenced by a property are automatically included, if there is a corresponding ${typename}.xml in the DSL source directory.
      -     * Types listed in one of the following tables are included. There must be a corresponding ${typename}.xml in the DSL source directory.
      -
      - 2. Adding new sections:
      - The section title should end with 'types' (see AssembleDslDocTask.mergeContent)
      -->

    <section>
	<title>ビルドスクリプトの構造<phrase role="original">Build script structure</phrase></title>
        <para role="original">A build script is made up of zero or more statements and script blocks. Statements can include method calls,
            property assignments, and local variable definitions. A script block is a method call which takes a closure
            as a parameter. The closure is treated as a <firstterm>configuration closure</firstterm> which configures
            some delegate object as it executes. The top level script blocks are listed below.</para>
	<para>ビルドスクリプトはゼロかそれ以上のステートメントやスクリプトブロックでできています。
	    記述にはメソッドの呼び出しや、プロパティの定義や、ローカル変数の宣言を含むことができます。
	    スクリプトブロックはクロージャを引数にとるメソッドの呼び出しです。
	    クロージャは、クロージャ実行時に委譲オブジェクトを構成する設定クロージャとして扱われます。
	    上位のスクリプトブロックを以下にリストします。</para>
        <table>
	    <title>ビルドスクリプトのブロック<phrase role="original">Build script blocks</phrase></title>
            <tr>
                <td>allprojects</td>
            </tr>
            <tr>
                <td>artifacts</td>
            </tr>
            <tr>
                <td>buildscript</td>
            </tr>
            <tr>
                <td>configurations</td>
            </tr>
            <tr>
                <td>dependencies</td>
            </tr>
            <tr>
                <td>repositories</td>
            </tr>
            <tr>
                <td>sourceSets</td>
            </tr>
            <tr>
                <td>subprojects</td>
            </tr>
            <tr>
                <td>publishing</td>
            </tr>
        </table>
        <para role="original">A build script is also a Groovy script, and so can contain those elements allowed in a Groovy script,
            such as method definitions and class definitions.
        </para>
	<para>
	     ビルドスクリプトもまたGroovyスクリプトですので、メソッドの定義やクラスの定義等々、Groovyスクリプトに許されているそれらの要素を含むことができます。
        </para>
    </section>

    <section>
	<title>核となる型<phrase role="original">Core types</phrase></title>
        <para role="original">Listed below are some of the central types which are used in Gradle scripts:</para>
	<para>以下にリストするのはGradleスクリプトで使用される主要な型です。</para>
        <table>
            <title>Core types</title>
            <tr>
                <td>org.gradle.api.Project</td>
            </tr>
            <tr>
                <td>org.gradle.api.Task</td>
            </tr>
            <tr>
                <td>org.gradle.api.invocation.Gradle</td>
            </tr>
            <tr>
                <td>org.gradle.api.initialization.Settings</td>
            </tr>
            <tr>
                <td>org.gradle.api.Script</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.SourceSet</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.SourceSetOutput</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.incremental.IncrementalTaskInputs</td>
            </tr>
            <tr>
                <td>org.gradle.api.artifacts.Configuration</td>
            </tr>
            <tr>
                <td>org.gradle.api.artifacts.ResolutionStrategy</td>
            </tr>
            <tr>
                <td>org.gradle.api.dsl.ConventionProperty</td>
            </tr>
            <tr>
                <td>org.gradle.api.plugins.ExtensionAware</td>
            </tr>
            <tr>
                <td>org.gradle.api.plugins.ExtraPropertiesExtension</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.PublishingExtension</td>
            </tr>
            <tr>
                <td>org.gradle.api.reporting.Report</td>
            </tr>
            <tr>
                <td>org.gradle.api.reporting.Reporting</td>
            </tr>
            <tr>
                <td>org.gradle.api.reporting.ReportContainer</td>
            </tr>
            <tr>
                <td>org.gradle.api.reporting.ReportingExtension</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.ivy.IvyPublication</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.ivy.IvyArtifact</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.ivy.IvyArtifactSet</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.ivy.IvyModuleDescriptor</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.maven.MavenPublication</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.maven.MavenArtifact</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.maven.MavenArtifactSet</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.maven.MavenPom</td>
            </tr>
        </table>
    </section>

    <section>
	<title>コンテナ型<phrase role="original">Container types</phrase></title>
        <para role="original">Container types that handle various declarative elements (e.g. dependencies, configurations, artifacts, etc.):</para>
        <para>コンテナ型は様々な宣言要素を取り扱います。（例えば他プログラムへの依存性,設定,生成物など）</para>
        <table>
	    <title>コンテナ型<phrase role="original">Container types</phrase></title>
            <tr>
                <td>org.gradle.api.artifacts.ConfigurationContainer</td>
            </tr>
            <tr>
                <td>org.gradle.api.artifacts.dsl.RepositoryHandler</td>
            </tr>
            <tr>
                <td>org.gradle.api.artifacts.dsl.DependencyHandler</td>
            </tr>
            <tr>
                <td>org.gradle.api.artifacts.dsl.ArtifactHandler</td>
            </tr>
        </table>
    </section>

    <section>
        <title>補助タスク型 <phrase role="original">Help Task types</phrase></title>
        <para role="original">Below are the task types that are available for every Gradle project.
            Those task types can also be declared and configured directly in the build script.
        </para>
        <para>以下の型は、すべてのGradleプロジェクトで使用できるタスク型です。
            これらのタスク型は、ビルドスクリプトで直接宣言したり設定したりすることもできます。
        </para>
        <table>
            <title>Help Task types</title>
            <tr>
                <td>org.gradle.api.tasks.diagnostics.TaskReportTask</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.diagnostics.ProjectReportTask</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.diagnostics.DependencyReportTask</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.diagnostics.DependencyInsightReportTask</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.diagnostics.PropertyReportTask</td>
            </tr>
        </table>
    </section>

    <section>
	    <title>タスク型<phrase role="original">Task types</phrase></title>
        <para role="original">Listed below are the various task types which are available for use in your build script:</para>
        <para>下記にリストするのは、あなたのビルドスクリプトで使用できる様々なタスク型です。</para>
        <table>
	    <title>タスク型<phrase role="original">Task types</phrase></title>
            <tr>
                <td>org.gradle.api.plugins.antlr.AntlrTask</td>
            </tr>
            <tr>
                <td>org.gradle.api.plugins.quality.Checkstyle</td>
            </tr>
            <tr>
                <td>org.gradle.api.plugins.quality.CodeNarc</td>
            </tr>
            <tr>
                <td>org.gradle.api.plugins.buildcomparison.gradle.CompareGradleBuilds</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.Copy</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.application.CreateStartScripts</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.Delete</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.Directory</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ear.Ear</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.Exec</td>
            </tr>
            <tr>
                <td>org.gradle.api.plugins.quality.FindBugs</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.ivy.tasks.GenerateIvyDescriptor</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.maven.tasks.GenerateMavenPom</td>
            </tr>
            <tr>
                <td>org.gradle.api.reporting.GenerateBuildDashboard</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.GradleBuild</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.compile.GroovyCompile</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.javadoc.Groovydoc</td>
            </tr>
            <tr>
                <td>org.gradle.api.reporting.dependencies.HtmlDependencyReportTask</td>
            </tr>
            <tr>
                <td>org.gradle.testing.jacoco.tasks.JacocoReport</td>
            </tr>
            <tr>
                <td>org.gradle.testing.jacoco.tasks.JacocoMerge</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.bundling.Jar</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.compile.JavaCompile</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.javadoc.Javadoc</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.JavaExec</td>
            </tr>
            <tr>
                <td>org.gradle.api.plugins.quality.JDepend</td>
            </tr>
            <tr>
                <td>org.gradle.api.plugins.jetty.JettyRun</td>
            </tr>
            <tr>
                <td>org.gradle.api.plugins.jetty.JettyRunWar</td>
            </tr>
            <tr>
                <td>org.gradle.api.plugins.jetty.JettyStop</td>
            </tr>
            <tr>
                <td>org.gradle.api.plugins.quality.Pmd</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.ivy.tasks.PublishToIvyRepository</td>
            </tr>
            <tr>
                <td>org.gradle.api.publish.maven.tasks.PublishToMavenRepository</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.scala.ScalaCompile</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.scala.ScalaDoc</td>
            </tr>
            <tr>
                <td>org.gradle.buildinit.tasks.InitBuild</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.signing.Sign</td>
            </tr>
            <tr>
                <td>org.gradle.api.plugins.sonar.SonarAnalyze</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.Sync</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.bundling.Tar</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.testing.Test</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.testing.TestReport</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.Upload</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.bundling.War</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.wrapper.Wrapper</td>
            </tr>
            <tr>
                <td>org.gradle.api.tasks.bundling.Zip</td>
            </tr>
        </table>
    </section>

    <section>
	<title>Eclipse/IDEAモデル型<phrase role="original">Eclipse/IDEA model types</phrase></title>
        <para role="original">Used to configure Eclipse or IDEA plugins</para>
        <para>EclipseプラグインもしくはIDEAプラグインを設定するために利用します。</para>
        <table>
	    <title>Eclipse/IDEAモデルの型<phrase role="original">Eclipse/IDEA model types</phrase></title>
            <tr>
                <td>org.gradle.plugins.ide.eclipse.model.EclipseModel</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.eclipse.model.EclipseProject</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.eclipse.model.EclipseClasspath</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.eclipse.model.EclipseJdt</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.eclipse.model.EclipseWtp</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.eclipse.model.EclipseWtpComponent</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.eclipse.model.EclipseWtpFacet</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.idea.model.IdeaModel</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.idea.model.IdeaProject</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.idea.model.IdeaModule</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.idea.model.IdeaWorkspace</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.api.XmlFileContentMerger</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.api.FileContentMerger</td>
            </tr>
        </table>
    </section>

    <section>
	<title>Eclipse/IDEAタスク型<phrase role="original">Eclipse/IDEA task types</phrase></title>
        <para role="original">Tasks contributed by IDE plugins. To configure IDE plugins please use IDE model types.</para>
	<para>IDEプラグインが提供するタスクです。IDEプラグインを設定するためには、IDEモデル型を利用してください。</para>
        <table>
	    <title>Eclipse/IDEAタスク型<phrase role="original">Eclipse/IDEA task types</phrase></title>
            <tr>
                <td>org.gradle.plugins.ide.eclipse.GenerateEclipseProject</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.eclipse.GenerateEclipseClasspath</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.eclipse.GenerateEclipseJdt</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.eclipse.GenerateEclipseWtpComponent</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.eclipse.GenerateEclipseWtpFacet</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.idea.GenerateIdeaModule</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.idea.GenerateIdeaProject</td>
            </tr>
            <tr>
                <td>org.gradle.plugins.ide.idea.GenerateIdeaWorkspace</td>
            </tr>
        </table>
    </section>

    <section>
        <title>ネィティブバイナリの核となる型<phrase role="original">Native binary core types</phrase></title>
        <para role="original">Used to configure components developed with native code.</para>
        <para>ネィティブコードによる開発時に利用するコンポーネントを設定するために利用します。</para>
        <table>
            <title>ネィティブコンポーネントの核となる型<phrase role="original">Native component core types</phrase></title>
            <tr>
                <td>org.gradle.nativebinaries.NativeComponent</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.Executable</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.Library</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.NativeBinary</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.ExecutableBinary</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.SharedLibraryBinary</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.StaticLibraryBinary</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.ToolChain</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.ToolChainRegistry</td>
            </tr>
            <tr>
                <td>org.gradle.language.assembler.AssemblerSourceSet</td>
            </tr>
            <tr>
                <td>org.gradle.language.c.CSourceSet</td>
            </tr>
            <tr>
                <td>org.gradle.language.cpp.CppSourceSet</td>
            </tr>
            <tr>
                <td>org.gradle.language.rc.WindowsResourceSet</td>
            </tr>
        </table>
    </section>
    <section>
        <title>ネィティブバイナリタスク型 <phrase role="original">Native binary task types</phrase></title>
        <para role="original">Tasks used to build native binary components.</para>
        <para>ネィティブバイナリコンポーネントのビルドに利用するタスクです。</para>
        <table>
            <title>ネィティブコンポーネントタスク <phrase role="original">Native component task types</phrase></title>
            <tr>
                <td>org.gradle.nativebinaries.language.cpp.tasks.CppCompile</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.language.c.tasks.CCompile</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.language.assembler.tasks.Assemble</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.tasks.LinkExecutable</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.tasks.LinkSharedLibrary</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.tasks.CreateStaticLibrary</td>
            </tr>
            <tr>
                <td>org.gradle.nativebinaries.tasks.InstallExecutable</td>
            </tr>
        </table>
    </section>
</book>
