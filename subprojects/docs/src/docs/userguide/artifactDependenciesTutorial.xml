<chapter id="artifact_dependencies_tutorial" xml:lang="ja">
    <title>依存関係管理の基本 <phrase role="original">Dependency Management Basics</phrase></title>
    <para role="original">
        This chapter introduces some of the basics of dependency management in Gradle.
    </para>
    <para>
        本章では、Gradleにおける依存関係の管理について、基本的なところを紹介します。
    </para>

    <section>
        <title>依存関係の管理とは <phrase role="original">What is dependency management?</phrase></title>
        <para role="original">
            Very roughly, dependency management is made up of two pieces. Firstly, Gradle needs to
            know about the things that your project needs to build or run, in order to find them. We call these incoming
            files the <firstterm>dependencies</firstterm> of the project.
            Secondly, Gradle needs to build and upload the things that your project produces. We call these outgoing files
            the <firstterm>publications</firstterm> of the project. Let's look at these two pieces in more detail:
        </para>
        <para>
            おおざっぱに言って、依存関係の管理とは二つの部分に分けられます。まず、Gradleは、あなたのプロジェクトをビルドしたり実行したりするのに必要なファイルが何かを判定し、それらを見つけてこなければなりません。これらの入力ファイルを、プロジェクトの<firstterm>依存関係</firstterm>と呼びます。
            次に、Gradleはあなたのプロジェクトをビルドし、生成されたものをアップロードする必要があります。これらの出力ファイルを、プロジェクトの<firstterm>公開物</firstterm>と呼びます。
        </para>
        <para role="original">Most projects are not completely self-contained. They need files built by other projects in order to
            be compiled or tested and so on. For example, in order to use Hibernate in my project, I need to include some
            Hibernate jars in the classpath when I compile my source. To run my tests, I might also need to include some
            additional jars in the test classpath, such as a particular JDBC driver or the Ehcache jars.
        </para>
        <para>ほとんどのプロジェクトは、完全に自己完結しているわけではありません。コンパイル、テスト、その他諸々のために、他のプロジェクトがビルドするファイルを必要とするものです。例えば、Hibernateを自分のプロジェクトで使うために、ソースコードのコンパイル時にHibernateのjarファイルをいくつか取り込む、といった具合です。テストをするためには、さらにいくつかのjarファイル、JDBCドライバやEhcacheのjarをテスト時クラスパスに追加する必要があるかもしれません。</para>
        <para role="original">
            These incoming files form the dependencies of the project.
            Gradle allows you to tell it what the dependencies of your project are, so that it can take care of
            finding these dependencies, and making them available in your build.
            The dependencies might need to be downloaded from a remote Maven or Ivy repository, or located in a local directory, or
            may need to be built by another project in the same multi-project build.
            We call this process <firstterm>dependency resolution</firstterm>.
        </para>
        <para>
        これらの入力ファイルは、プロジェクトの依存関係から読み込まれます。
        Gradleにプロジェクトの依存関係を教えて、プロジェクトが依存しているファイルを見つけたり、ビルド時にそれらを使えるようにできます。
        依存ファイルは、リモートのMavenやIvyのリポジトリからダウンロードされるかもしれませんし、ローカルのディレクトリにあるかもしれません。また、マルチプロジェクトの場合、別のプロジェクトにビルドさせる必要があることもあります。
        </para>
        <para role="original">
            Often, the dependencies of a project will themselves have dependencies. For example, Hibernate core requires
            several other libraries to be present on the classpath with it runs. So, when Gradle runs the tests for your
            project, it also needs to find these dependencies and make them available. We call these <firstterm>transitive dependencies</firstterm>.
        </para>
        <para>また、依存しているファイルが、それ自身の依存関係を持っていることが多々あります。例えば、Hibernateコアは、実行時にいくつかの別のライブラリをクラスパスに含めなければなりません。なので、Gradleがあなたのプロジェクトのテストを走らせるときには、それらの依存関係も見つけてきて、使用できるようにしなければならないのです。これを、<firstterm>推移的な依存関係</firstterm>と呼びます。</para>
        <para role="original">
            The main purpose of most projects is to build some files that are to be used outside the project.
            For example, if your project produces a java library, you need to build a jar, and maybe a source jar and
            some documentation, and publish them somewhere.
        </para>
        <para>
        ほとんどのプロジェクトは、ファイルを作成し、それらをプロジェクトの外部で使うということを主な目的としています。
        例えば、もしあなたのプロジェクトがJavaライブラリを作成するものならば、あなたはjarを作成し、ときにはソースjarやドキュメントも作成し、どこかにそれらを公開しなければなりません。
        </para>
        <para role="original">These outgoing files form the publications of the project. Gradle also takes care of this important work for you. You declare the
            publications of your project, and Gradle take care of building them and publishing them somewhere.
            Exactly what "publishing" means depends on what you want to do. You might want to copy the files to a local directory,
            or upload them to a remote Maven or Ivy repository. Or you might use the files in another project in the same
            multi-project build.
            We call this process <firstterm>publication</firstterm>.
        </para>
        <para>
        ファイルの公開は、プロジェクトの公開設定から読み込まれて行われます。Gradleは、この重要な仕事も引き受けてくれます。プロジェクトが公開するファイルを宣言すれば、Gradleがそれらをビルドし、任意の場所へ公開します。
        「公開する」ということの正確な意味は、何をしたいのかによって異なります。ローカルディレクトリにファイルをコピーしたいかもしれませんし、リモートのMavenやIvyのリポジトリにアップロードしたいかもしれません。また、マルチプロジェクトの場合、別プロジェクトからそのファイルを使いたいという場合もあります。
        これらの処理を、<firstterm>公開</firstterm>と呼んでいます。
        </para>
    </section>

    <section>
        <title>依存関係の宣言 <phrase role="original">Declaring your dependencies</phrase></title>
        <para role="original">
            Let's look at some dependency declarations. Here's a basic build script:
        </para>
        <para>
            さて、では依存関係の宣言についていくつか見ていきましょう。ここに、ある基本的なビルドスクリプトがあります。
        </para>
        <sample id="basicDependencyDeclarations" dir="userguide/artifacts/dependencyBasics" title="依存関係の宣言 / Declaring dependencies">
            <sourcefile file="build.gradle"/>
        </sample>
        <para role="original">What's going on here? This build script says a few things about the project.
            Firstly, it states that Hibernate core 3.6.7.Final is required
            to compile the project's production source. By implication, Hibernate core and its dependencies are also required
            at runtime.
            The build script also states that any junit >= 4.0 is required to compile the project's tests.
            It also tells Gradle to look in the Maven central repository for any dependencies that are required.
            The following sections go into the details.
        </para>
        <para>
            一体、何が起きるでしょうか。このビルドスクリプトにはそれほど多くの情報はありません。まず、このプロジェクトはソースコードをコンパイルするためにHibernate core 3.6.7を使用すると言っています。それはすなわち、実行時にHibernate coreとその依存関係が必要になるということでもあります。
            このスクリプトはまた、バージョン4.0以上のJUnitのどれかを、プロジェクトのテストをコンパイルするのに必要とするとも言っています。さらに、Gradleに、全ての依存関係を見つけるのにMavenのセントラルリポジトリを探すように指示しています。次の節で、それぞれの詳細について見ていきましょう。
        </para>
    </section>

    <section id="configurations">
        <title>依存関係のコンフィグレーション <phrase role="original">Dependency configurations</phrase></title>
        <para role="original">In Gradle dependencies are grouped into <firstterm>configurations</firstterm>. A configuration is simply a named set of dependencies.
            We will refer to them as <firstterm>dependency configurations</firstterm>. You can use them to declare the external dependencies of your project.
            As we will see later, they are also used to declare the publications of your project.</para>
        <para>Gradleでは、依存関係は、<firstterm>コンフィグレーション</firstterm>によってグループ化されます。コンフィグレーションとは、単なる名前の付いた依存関係の集まりです。コンフィグレーションは<firstterm>依存関係設定</firstterm>として参照されます。プロジェクトが外部に依存しているものを宣言するのに使われ、また後で見るように、プロジェクトが外部に公開するものを宣言するためにも使用されます。
        </para>
        <para role="original">
            The Java plugin defines a number of standard configurations. These configurations represent the classpaths that the
            Java plugin uses. Some are listed below, and you can find more details in <xref linkend="tab:configurations"/>.
        </para>
        <para>
            Javaプラグインは、いくつかの標準コンフィグレーションを定義します。これらのコンフィグレーションは、Javaプラグインが使用するクラスパスを表すものです。いくつかを以下にリストしました。詳細については、<xref linkend="tab:configurations"/>を参照してください。
        </para>
        <variablelist>
            <varlistentry>
                <term>compile</term>
                <listitem>
                    <para role="original">The dependencies required to compile the production source of the project.</para>
                    <para>プロジェクトのプロダクトコードをコンパイルするのに必要な依存関係</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>runtime</term>
                <listitem>
                    <para role="original">
                        The dependencies required by the production classes at runtime. By default, also includes the
                        compile time dependencies.
                    </para>
                    <para>
                        プロダクトのクラスを実行するときに必要になる依存関係。デフォルトで、コンパイル時の依存関係もここに含まれる。
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>testCompile</term>
                <listitem>
                    <para role="original">
                        The dependencies required to compile the test source of the project. By default, also includes
                        the compiled production classes and the compile time dependencies.
                    </para>
                    <para>
                    プロジェクトのテストコードをコンパイルするのに必要な依存関係。デフォルトで、コンパイルされたプロダクトクラスと、コンパイル時の依存関係も含まれる。
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>testRuntime</term>
                <listitem>
                    <para role="original">
                        The dependencies required to run the tests. By default, also includes the compile, runtime and test compile
                        dependencies.
                    </para>
                    <para>
                        テストを実行するのに必要な依存関係。デフォルトで、compile、runtime、testCompileの各依存関係もここに含まれる。
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>

        <para role="original">
            Various plugins add further standard configurations. You can also define your own custom configurations to use in your
            build. Please see <xref linkend="sub:configurations"/> for the details of defining and customizing dependency configurations.
        </para>
        <para>
            多くのプラグインが、このような標準コンフィグレーションを追加します。また、自分のビルドに使うためのカスタムコンフィギュレーションを独自に定義することもできます。依存関係のコンフィグレーション定義やカスタマイズの詳細については、<xref linkend="sub:configurations"/>を参照してください。
        </para>
    </section>

    <section>
        <title>外部依存関係 <phrase role="original">External dependencies</phrase></title>
        <para role="original">There are various types of dependencies that you can declare. One such type is an <firstterm>external dependency</firstterm>.
            This a dependency on some files built outside the current build, and stored in a repository of some kind, such as Maven central, or
            a corporate Maven or Ivy repository, or a directory in the local file system.
        </para>
        <para>
            定義できる依存関係には、さまざまなタイプがあります。そのうちの一つが、<firstterm>外部依存関係</firstterm>です。これは、今のビルドとは別に作られ、MavenセントラルリポジトリやIvyリポジトリ、ローカルファイルシステムなどに保存されているファイルへの依存関係です。</para>
        <para role="original">
            To define an external dependency, you add it to a dependency configuration:
        </para>
        <para>
            外部依存関係を定義するには、それを依存関係のコンフィグレーションに追加します。
        </para>
        <sample id="externalDependencies" dir="userguide/artifacts/externalDependencies" title="外部依存関係の定義 / Definition of an external dependency">
            <sourcefile file="build.gradle" snippet="define-dependency"/>
        </sample>
        <para role="original">
            An external dependency is identified using <literal>group</literal>, <literal>name</literal> and <literal>version</literal> attributes.
            Depending on which kind of repository you are using, <literal>group</literal> and <literal>version</literal> may be optional.
        </para>
        <para>
            外部依存関係は、<literal>group</literal>属性、<literal>name</literal>属性、そして<literal>version</literal>属性を用いて定義します。
            使用しているリポジトリの種類によっては、<literal>group</literal>属性と<literal>version</literal>属性はオプショナルになるかもしれません。
        </para>
        <para role="original">There is a shortcut form for declaring external dependencies, which uses a string of the form <literal>"<replaceable>group</replaceable>:<replaceable>name</replaceable>:<replaceable>version</replaceable>"</literal>.
        </para>
        <para>外部依存関係を定義するときは、ショートカット形式を使うこともできます。<literal>"<replaceable>group</replaceable>:<replaceable>name</replaceable>:<replaceable>version</replaceable>"</literal>という文字列を使う形式です。
        </para>
        <sample id="externalDependencies" dir="userguide/artifacts/externalDependencies" title="外部依存関係定義のショートカット形式 / Shortcut definition of an external dependency">
            <sourcefile file="build.gradle" snippet="define-dependency-shortcut"/>
        </sample>
        <para role="original">To find out more about defining and working with dependencies, have a look at <xref linkend="sec:how_to_declare_your_dependencies"/>.</para>
        <para>依存関係を定義して取り扱う方法について、詳しくは<xref linkend="sec:how_to_declare_your_dependencies"/>を見てください。</para>
    </section>

    <section>
        <title>リポジトリ <phrase role="original">Repositories</phrase></title>
        <para role="original">
            How does Gradle find the files for external dependencies? Gradle looks for them in a <firstterm>repository</firstterm>.
            A repository is really just a collection of files, organized by <literal>group</literal>, <literal>name</literal> and
            <literal>version</literal>. Gradle understands several different repository formats, such as Maven and Ivy, and several
            different ways of accessing the repository, such as using the local file system or HTTP.
        </para>
        <para>
            Gradleは、どうやって外部依存関係を見つけるのでしょうか？　Gradleは、それらを<firstterm>リポジトリ</firstterm>から探します。リポジトリの実体は、ただのファイルの集合です。それらのファイルは、<literal>グループ</literal>、<literal>名前</literal>、そして<literal>バージョン</literal>によって分類されています。Gradleは、MavenやIvyなど、様々なリポジトリ形式に対応できます。また、ローカルファイルシステムやHTTPなど、リポジトリにアクセスするための手段についても様々なものを使うことができます。
        </para>
        <para role="original">By default, Gradle does not define any repositories. You need to define at least one before you can use external dependencies.
            One option is use the Maven central repository:</para>
        <para>
            デフォルトでは、Gradleはリポジトリを一切定義していません。外部依存関係を使うには、少なくとも一つのリポジトリを定義する必要があります。
            選択肢の一つは、Mavenのセントラルリポジトリを使うことです。
        </para>
        <sample id="defineMavenCentral" dir="userguide/artifacts/defineRepository" title="Mavenセントラルリポジトリの使用 / Usage of Maven central repository">
            <sourcefile file="build.gradle" snippet="maven-central"/>
        </sample>
        <para role="original">Or a remote Maven repository:</para>
        <para>または、別のMavenリモートリポジトリを使います。</para>
        <sample id="defineRemoteMavenRepo" dir="userguide/artifacts/defineRepository" title="リモートMavenリポジトリの使用 / Usage of a remote Maven repository">
            <sourcefile file="build.gradle" snippet="maven-like-repo"/>
        </sample>
        <para role="original">Or a remote Ivy repository:</para>
        <para>または、リモートのIvyリポジトリを使います。</para>
        <sample id="defineRemoteIvyRepo" dir="userguide/artifacts/defineRepository" title="リモートIvyリポジトリの使用 / Usage of a remote Ivy directory">
            <sourcefile file="build.gradle" snippet="ivy-repo"/>
        </sample>
        <para role="original">You can also have repositories on the local file system. This works for both Maven and Ivy repositories.</para>
        <para>さらに、ローカルファイルシステム上にリポジトリを持つこともできます。これは、Maven、Ivy双方のリポジトリ形式で動作します。</para>
        <sample id="defineRemoteIvyRepo" dir="userguide/artifacts/defineRepository" title="ローカルのIvyディレクトリを使う / Usage of a local Ivy directory">
            <sourcefile file="build.gradle" snippet="local-ivy-repo"/>
        </sample>
        <para role="original">A project can have multiple repositories. Gradle will look for a dependency in each repository in the order they are specified, stopping
            at the first repository that contains the requested module.
        </para>
        <para>一つのプロジェクトが、複数のリポジトリを持つことができます。Gradleは、それぞれのリポジトリを、指定された順序で順に探しに行きます。要求されたモジュールが含まれる、最初のリポジトリを見つけるまで走査を続けます。</para>
        <para role="original">To find out more about defining and working with repositories, have a look at <xref linkend="sec:repositories"/>.</para>
        <para>リポジトリを定義し、取り扱う方法について、詳しくは<xref linkend="sec:repositories"/>を参照してください。</para>
    </section>

    <section>
        <title>アーティファクトの公開 <phrase role="original">Publishing artifacts</phrase></title>
        <para role="original">
            Dependency configurations are also used to publish files.<footnote><para role="original">We think this is confusing, and we are gradually teasing apart the two concepts in the Gradle DSL.</para></footnote>
            We call these files <firstterm>publication artifacts</firstterm>, or usually just <firstterm>artifacts</firstterm>.
        </para>
        <para>
            依存関係のコンフィグレーションは、ファイルを公開するのにも使用します。<footnote><para>私たちは、これは混乱の元になると考えています。そのため、GradleのDSLでは、段階的に二つに概念に分けていくつもりです。</para></footnote>
            これらのファイルを、<firstterm>公開アーティファクト</firstterm>、大体は単に<firstterm>アーティファクト</firstterm>と呼びます。
        </para>
        <para role="original">
            The plugins do a pretty good job of defining the artifacts of a project, so you usually don't need to do anything special to tell Gradle
            what needs to be published. However, you do need to tell Gradle where to publish the artifacts. You do this by attaching repositories
            to the <literal>uploadArchives</literal> task. Here's an example of publishing to a remote Ivy repository:
        </para>
        <para>
            プラグインが非常に適切にプロジェクトのアーティファクトを定義してくれるので、何を公開したいかGradleに教えるのに、特別何かする必要はほとんどの場合ありません。ただ、どこに公開したいかはGradleに教えてやる必要があります。これは、リポジトリを<literal>uploadArchives</literal>タスクに結びつけることで行います。次のコードは、リモートのIvyリポジトリに公開する例です。
        </para>
        <sample id="publishIvyRepository" dir="userguide/artifacts/uploading" title="Ivyリポジトリに公開する / Publishing to an Ivy repository">
            <sourcefile file="build.gradle" snippet="publish-repository"/>
        </sample>
        <para role="original">
            Now, when you run <userinput>gradle uploadArchives</userinput>, Gradle will build and upload your Jar.
            Gradle will also generate and upload an <filename>ivy.xml</filename> as well.
        </para>
        <para>
            これで<userinput>gradle uploadArchives</userinput>を走らせれば、Gradleがjarをビルドしてアップロードしてくれます。
            さらに、<filename>ivy.xml</filename>も生成されてアップロードされます。
        </para>
        <para role="original">
            You can also publish to Maven repositories. The syntax is slightly different.<footnote>
                <para role="original">We are working to make the syntax consistent for resolving from and publishing to Maven repositories.</para>
            </footnote>
            Note that you also need to apply the Maven plugin in order to publish to a Maven repository. In this instance, Gradle
            will generate and upload a <filename>pom.xml</filename>.
        </para>
        <para>
            Mavenリポジトリに公開することもできますが、その文法はすこし異なります<footnote><para>私たちは、Mavenリポジトリからの取得とMavenリポジトリへの公開を一貫した文法で行えるよう作業しているところです。</para></footnote>。
            また、Mavenリポジトリへ公開するには、Mavenプラグインを使う必要もあるので注意してください。この場合、Gradleは<filename>pom.xml</filename>も生成してアップロードします。
        </para>
        <sample id="publishMavenRepository" dir="userguide/artifacts/maven" title="Mavenリポジトリへの公開 / Publishing to a Maven repository">
            <sourcefile file="build.gradle" snippet="upload-file"/>
        </sample>
        <para role="original">To find out more about publication, have a look at <xref linkend="artifact_management"/>.</para>
        <para>アーティファクトの公開について、詳しくは<xref linkend="artifact_management"/>をご参照ください。</para>
    </section>

    <section>
        <title>次のステップは？ <phrase role="original">Where to next?</phrase></title>
        <para role="original">
            For all the details of dependency resolution, see <xref linkend="dependency_management"/>, and for artifact publication see <xref linkend="artifact_management"/>.
        </para>
        <para>
            依存関係解決については、<xref linkend="dependency_management"/>に全て詳細に載っています。そして、アーティファクトの公開については<xref linkend="artifact_management"/>に載っています。
        </para>
        <para role="original">
            If you are interested in the DSL elements mentioned here, have a look at <apilink class="org.gradle.api.Project" method="configurations"/>,
            <apilink class="org.gradle.api.Project" method="repositories"/> and <apilink class="org.gradle.api.Project" method="dependencies"/>.
        </para>
        <para>
            本章で使ったDSLに興味があるのであれば、<apilink class="org.gradle.api.Project" method="configurations"/>や<apilink class="org.gradle.api.Project" method="repositories"/>、<apilink class="org.gradle.api.Project" method="dependencies"/>を見てください。
        </para>
        <para role="original">Otherwise, continue on to some of the other <link linkend="tutorials">tutorials</link>.</para>
        <para>それ以外の場合は、<link linkend="tutorials">チュートリアル</link>から他のチュートリアルを進めてください。</para>
    </section>
</chapter>
