<!--
  ~ Copyright 2011 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id="sonar_plugin" xml:lang="ja">
    <title>Sonarプラグイン<phrase role="original">The Sonar Plugin</phrase></title>

    <note>
        <para role="original">
            You may wish to use the new <link linkend="sonar_runner_plugin">Sonar Runner Plugin</link> instead of this plugin.
            In particular, only the Sonar Runner plugin supports Sonar 3.4 and higher.
        </para>
        <para>
        このプラグインの代わりに、新しくできた<link linend="sonar_runner_plugin">Sonnar Runner</link>を使いたくなる場面もあるかもしれません。
        特に、Sonar3.4以上をサポートしているのはSonar Runnerプラグインだけです。
        </para>
    </note>

    <para role="original">The Sonar plugin provides integration with <ulink url="http://www.sonarsource.org">Sonar</ulink>,
        a web-based platform for monitoring code quality. The plugin adds a <literal>sonarAnalyze</literal> task
        that analyzes the project to which the plugin is applied, as well as its subprojects. The results are stored in
        the Sonar database. The plugin is based on the <ulink url="http://docs.codehaus.org/display/SONAR/Analyzing+with+Sonar+Runner">Sonar Runner</ulink>
        and requires Sonar 2.11 or higher.
    </para>
    <para>Sonarプラグインは、コード品質モニタリングのためのWebベースのプラットフォームである<ulink url="http://www.sonarsource.org">Sonar</ulink>との統合機能を提供します。
        プラグインにより追加される<literal>sonarAnalyze</literal>タスクは、プラグインが適用されたプロジェクト、およびそのサブプロジェクトを解析することができます。結果はSonarデータベースに格納されます。
        このプラグインはベースに<ulink url="http://docs.codehaus.org/display/SONAR/Analyzing+with+Sonar+Runner">Sonar Runner</ulink>が使われていて、Sonar 2.11以上を必要とします。
    </para>

    <para role="original">
        The <literal>sonarAnalyze</literal> task is a standalone task that needs to be executed explicitly
        and doesn't depend on any other tasks. Apart from source code, the task also analyzes class files
        and test result files (if available). For best results, it is therefore recommended to run a full
        build before the analysis. In a typical setup, analysis would be performed once per day on a build server.
    </para>
    <para>
        <literal>sonarAnalyze</literal>タスクは明示的に実行する必要のあるスタンドアロンタスクで、
        他のいかなるタスクにも依存しません。
        ソースコードだけでなく、タスクはクラスファイルと(可能であれば)テスト結果ファイルも解析します。
        そのため、最大限の結果を得るために、解析の前にフルビルドを実行することが推奨されます。
        典型的なセットアップでは、解析はビルドサーバー上で1日1回実行されるようにします。
    </para>

    <section>
        <title>使用方法 <phrase role="original">Usage</phrase></title>
        <para role="original">At a minimum, the Sonar plugin has to be applied to the project.</para>
        <para>必要最小限、Sonarプラグインがプロジェクトに適用されている必要があります。</para>

        <sample id="quickstart" dir="sonar/quickstart" title="Sonarプラグインの適用 / Applying the Sonar plugin">
            <sourcefile file="build.gradle" snippet="apply-plugin"/>
        </sample>
        <para role="original">Unless Sonar is run locally and with default settings, it is necessary to configure
            connection settings for the Sonar server and database.</para>
        <para>Sonarがデフォルト設定でローカル実行されるのでなければ、Sonarサーバーとデータベースへの接続設定も必要になります。
        </para>

        <sample id="quickstart" dir="sonar/quickstart" title="Sonar接続設定のコンフィグレーション / Configuring Sonar connection settings">
            <sourcefile file="build.gradle" snippet="connection-settings"/>
        </sample>
        <para role="original">
            Alternatively, some or all connection settings can be set from the command line (see <xref linkend="sec:sonar_command_line_parameters" />).
        </para>
        代わりに、いくつかの、または全ての接続設定をコマンドラインで設定することもできます(<xref linkend="sec:sonar_command_line_parameters" />参照)。
        <para role="original">Project settings determine how the project is going to be analyzed. The default configuration
            works well for analyzing standard Java projects and can be customized in many ways.</para>
        <para>プロジェクト設定によって、プロジェクトをどのように解析するのかが決まります。
            標準的なJavaプロジェクトに対してはデフォルト設定で事が足りますが、さまざまな方法でカスタマイズも可能です。
        </para>

        <sample id="quickstart" dir="sonar/quickstart" title="Sonarプロジェクト設定のコンフィグレーション / Configuring Sonar project settings">
            <sourcefile file="build.gradle" snippet="project-settings"/>
        </sample>

        <para role="original">
            The <literal>sonar</literal>, <literal>server</literal>, <literal>database</literal>, and <literal>project</literal>
            blocks in the examples above configure objects of type <apilink class="org.gradle.api.plugins.sonar.model.SonarRootModel"/>,
            <apilink class="org.gradle.api.plugins.sonar.model.SonarServer"/>, <apilink class="org.gradle.api.plugins.sonar.model.SonarDatabase"/>,
            and <apilink class="org.gradle.api.plugins.sonar.model.SonarProject"/>, respectively. See their API documentation for further information.
        </para>
        <para>
            サンプルの<literal>sonar</literal>、<literal>server</literal>、<literal>database</literal>、および<literal>project</literal>
            ブロックは、それぞれコンフィグレーションオブジェクト
            <apilink class="org.gradle.api.plugins.sonar.model.SonarRootModel"/>、
            <apilink class="org.gradle.api.plugins.sonar.model.SonarServer"/>、
            <apilink class="org.gradle.api.plugins.sonar.model.SonarDatabase"/>、
            および<apilink class="org.gradle.api.plugins.sonar.model.SonarProject"/>に対応します。
            詳細はAPIドキュメントを参照してください。
        </para>
    </section>

    <section>
        <title>マルチプロジェクトビルドの解析 <phrase role="original">Analyzing Multi-Project Builds</phrase></title>
        <para role="original">The Sonar plugin is capable of analyzing a whole project hierarchy at once. This yields a hierarchical view in the
            Sonar web interface with aggregated metrics and the ability to drill down into subprojects. It is also faster than
            analyzing each project separately.
        </para>
        <para>Sonarプラグインはプロジェクト階層全体を一度に解析する機能をもちます。
            集約されたメトリクスとサブプロジェクトへのドリルダウン機能を含む階層ビューをSonarのWebインターフェースに生成でき、
            個別のプロジェクトごとに解析を行うよりも高速でもあります。
        </para>

        <para role="original">
            To analyze a project hierarchy, the Sonar plugin needs to be applied to the top-most project of the hierarchy.
            Typically (but not necessarily) this will be the root project. The <literal>sonar</literal> block
            in that project configures an object of type <apilink class="org.gradle.api.plugins.sonar.model.SonarRootModel"/>.
            It holds all global configuration, most importantly server and database connection settings.
        </para>
        <para>
            プロジェクト階層を解析するには、Sonarプラグインを階層の最上位のプロジェクトに適用する必要があります。
            これは、典型的には(必須ではないですが)ルートプロジェクトです。
            そのプロジェクトの<literal>sonar</literal>ブロックが
            <apilink class="org.gradle.api.plugins.sonar.model.SonarRootModel"/>型のオブジェクトを構成します。
            これはすべてのグローバルコンフィグレーションを保持しますが、
            最も重要なのはサーバーとデータベース接続設定です。
        </para>

        <sample id="multiProject" dir="sonar/multiProject" title="マルチプロジェクトビルドにおけるグローバルコンフィグレーション / Global configuration in a multi-project build">
            <sourcefile file="build.gradle" snippet="global-configuration"/>
        </sample>
        <para role="original">Each project in the hierarchy has its own project configuration. Common values can be set from a parent build script.</para>
        <para>階層の各プロジェクトは独自のプロジェクトコンフィグレーションを持ちます。
            共通の値は親のビルドスクリプトから設定可能です。</para>

        <sample id="multiProject" dir="sonar/multiProject" title="マルチプロジェクトビルドにおける共通のプロジェクトコンフィグレーション / Common project configuration in a multi-project build">
            <sourcefile file="build.gradle" snippet="common-project-configuration"/>
        </sample>

        <para role="original">The <literal>sonar</literal> block in a subproject configures an object of type <apilink class="org.gradle.api.plugins.sonar.model.SonarProjectModel"/>.</para>
        <para>サブプロジェクトの<literal>sonar</literal>ブロックは
            <apilink class="org.gradle.api.plugins.sonar.model.SonarProjectModel"/>型のオブジェクトを構成します.</para>

        <para role="original">
            Projects can also be configured individually. For example, setting the <literal>skip</literal> property to <literal>true</literal>
            prevents a project (and its subprojects) from being analyzed. Skipped projects will not be displayed in the Sonar web interface.
        </para>
        <para>
            プロジェクトを個別に構成することもできます。
            例えば、<literal>skip</literal>プロパティを<literal>true</literal>に設定することで、
            プロジェクト(およびそのサブプロジェクト)を解析対象から除外することができます。
            スキップされたプロジェクトはSonar Webインターフェースには表示されません。
        </para>

        <sample id="multiProject" dir="sonar/multiProject" title="マルチプロジェクトビルドにおけるプロジェクト個別コンフィグレーション / Individual project configuration in a multi-project build">
            <sourcefile file="build.gradle" snippet="individual-project-configuration"/>
        </sample>

        <para role="original">
            Another typical per-project configuration is the programming language to be analyzed. Note that Sonar can only analyze one language per project.
        </para>
        <para>
            プロジェクト単位のコンフィグレーションでもう一つ典型的なのは、解析対象のプログラム言語です。
            Sonarはプロジェクトあたり一つの言語しか解析できないことに注意してください。
        </para>

        <sample id="multiProject" dir="sonar/multiProject" title="解析対象の言語のコンフィグレーション / Configuring the language to be analyzed">
            <sourcefile file="build.gradle" snippet="language-configuration"/>
        </sample>

        <para role="original">
            When setting only a single property at a time, the equivalent property syntax is more succinct:
        </para>
        <para>
            一度に単一のプロパティしか設定しないときは、等価なプロパティの文法はより簡潔になります:
        </para>

        <sample id="multiProject" dir="sonar/multiProject" title="プロパティ文法の利用 / Using property syntax">
            <sourcefile file="build.gradle" snippet="property-syntax"/>
        </sample>
    </section>

    <section>
        <title>カスタムソースセットの解析 <phrase role="original">Analyzing Custom Source Sets</phrase></title>
        <para role="original">By default, the Sonar plugin will analyze the production sources in the <literal>main</literal> source set and
            the test sources in the <literal>test</literal> source set. This works independent of the project's source directory layout.
            Additional source sets can be added as needed.
        </para>
        <para>デフォルトでは、Sonarプラグインは<literal>main</literal>ソースセットのプロダクションソースと、
            <literal>test</literal>ソースセットのテストソースを解析します。
            これはプロジェクトのソースディレクトリレイアウトとは独立して動作します。
            ソースセットは必要に応じて追加できます。
        </para>

        <sample id="advanced" dir="sonar/advanced" title="カスタムソースセットの解析 / Analyzing custom source sets">
            <sourcefile file="build.gradle" snippet="source-sets"/>
        </sample>
    </section>

    <section>
        <title>Java言語以外の解析 <phrase role="original">Analyzing languages other than Java</phrase></title>
        <para role="original">
            To analyze code written in a language other than Java, install the corresponding
            <ulink url="http://www.sonarsource.com/products/plugins/languages/">Sonar plugin</ulink>, and set
            <literal>sonar.project.language</literal> accordingly:
        </para>
        <para>Java以外の言語で書かれたコードを解析するには、対応する<ulink url="http://www.sonarsource.com/products/plugins/languages/">Sonarプラグイン</ulink>をインストールして、次のように<literal>sonar.project.language</literal>を設定してください。</para>
        <sample id="advanced" dir="sonar/advanced" title="Java言語以外の解析 / Analyzing languages other than Java">
            <sourcefile file="build.gradle" snippet="languages" />
        </sample>
        <para role="original">
            As of Sonar 3.4, only one language per project can be analyzed. You can, however, set a different language for each project in a
            multi-project build.
        </para>
        <para>Sonarでは、バージョン3.4現在、一プロジェクトにつき一つの言語の解析しかできません。しかし、マルチプロジェクトで、それぞれのプロジェクトに異なる言語を設定することはできます。</para>
    </section>

    <section>
        <title>カスタムSonarプロパティの設定 <phrase role="original">Setting Custom Sonar Properties</phrase></title>

        <para role="original">
            Eventually, most configuration is passed to the Sonar code analyzer in the form of key-value pairs known as Sonar properties.
            The <apilink class="org.gradle.api.plugins.sonar.model.SonarProperty"/> annotations in the API documentation show how properties
            of the plugin's object model get mapped to the corresponding Sonar properties. The Sonar plugin offers hooks to post-process Sonar
            properties before they get passed to the code analyzer. The same hooks can be used to add additional properties which aren't covered
            by the plugin's object model.
        </para>
        <para>
            最終的には、コンフィグレーションのほとんどは、
            Sonarプロパティとして知られるkey-valueペアの形でSonarコードアナライザに渡されます。
            プラグインのオブジェクトモデルのプロパティが対応するSonarプロパティにどのようにしてマップされるかは、
            APIドキュメントの<apilink class="org.gradle.api.plugins.sonar.model.SonarProperty"/>アノテーションが示してます。
            Sonarプラグインは、Sonarプロパティがコードアナライザに渡される前の後処理のためのフックを提供します。
            このフックは、プラグインのオブジェクトモデルがカバーしていないプロパティを追加するためにも利用できます。
        </para>

        <para role="original">For global Sonar properties, use the <code>withGlobalProperties</code> hook on <apilink class="org.gradle.api.plugins.sonar.model.SonarRootModel"/>:</para>
        <para>グローバルSonarプロパティに対しては、<apilink class="org.gradle.api.plugins.sonar.model.SonarRootModel"/>の<code>withGlobalProperties</code>フックを利用してください:</para>

        <sample id="advanced" dir="sonar/advanced" title="カスタムグローバルプロパティ設定 / Setting custom global properties">
            <sourcefile file="build.gradle" snippet="global-properties"/>
        </sample>

        <para role="original">For per-project Sonar properties, use the <code>withProjectProperties</code> hook on <apilink class="org.gradle.api.plugins.sonar.model.SonarProject"/>:</para>
        <para>プロジェクト毎のSonarプロパティに対しては、<apilink class="org.gradle.api.plugins.sonar.model.SonarProject"/>の<code>withProjectProperties</code>フックを利用してください:</para>

        <sample id="advanced" dir="sonar/advanced" title="カスタムプロジェクトプロパティ設定 / Setting custom project properties">
            <sourcefile file="build.gradle" snippet="project-properties"/>
        </sample>

        <para role="original">
            A list of available Sonar properties can be found in the <ulink url="http://docs.codehaus.org/display/SONAR/Analysis+Parameters">Sonar documentation</ulink>.
            Note that for most of these properties, the Sonar plugin's object model has an equivalent property, and it isn't necessary to use a <code>withGlobalProperties</code>
            or <code>withProjectProperties</code> hook. For configuring a third-party Sonar plugin, consult the plugin's documentation.
        </para>
        <para>使用できるSonarプロパティは<ulink url="http://docs.codehaus.org/display/SONAR/Analysis+Parameters">Sonarのドキュメント</ulink>で調べることができます。
            ただし、これらのプロパティのほとんどはプラグインのオブジェクトモデルに対応するプロパティがあり、<code>withGlobalProperties</code>や<code>withProjectProperties</code>フックを使って設定する必要はありません。
            サードパーティのSonarプラグインに対しては、それらのドキュメントを参照してください。
        </para>
    </section>

    <section id="sec:sonar_command_line_parameters">
        <title>コマンドラインでSonarの設定を行う <phrase role="original">Configuring Sonar Settings from the Command Line</phrase></title>
        <para role="original">
            The following properties can alternatively be set from the command line, as task parameters of the <literal>sonarAnalyze</literal> task.
            A task parameter will override any corresponding value set in the build script.
        </para>
        <para>
        次に示すプロパティは、<literal>sonarAnalyze</literal>タスクのパラメーターとしてコマンドラインからでも設定できます。
        タスクパラメーターは、ビルドスクリプト内の対応する値を全て上書きします。
        </para>
        <itemizedlist>
            <listitem>
                <literal>server.url</literal>
            </listitem>
            <listitem>
                <literal>database.url</literal>
            </listitem>
            <listitem>
                <literal>database.driverClassName</literal>
            </listitem>
            <listitem>
                <literal>database.username</literal>
            </listitem>
            <listitem>
                <literal>database.password</literal>
            </listitem>
            <listitem>
                <literal>showSql</literal>
            </listitem>
            <listitem>
                <literal>showSqlResults</literal>
            </listitem>
            <listitem>
                <literal>verbose</literal>
            </listitem>
            <listitem>
                <literal>forceAnalysis</literal>
            </listitem>
        </itemizedlist>
        <para role="original">
            Here is a complete example:
        </para>
        <para>以下に使用例を示します。</para>
        <para>
            <code>
                gradle sonarAnalyze --server.url=http://sonar.mycompany.com --database.password=myPassword --verbose
            </code>
        </para>
        <para role="original">If you need to set other properties from the command line, you can use system properties to do so:</para>
        <para>他の値をコマンドラインから設定する必要がある場合は、システムプロパティが使用できます。</para>
        <sample id="advanced" dir="sonar/advanced" title="カスタムのコマンドラインプロパティを実装する / Implementing custom command line properties">
            <sourcefile file="build.gradle" snippet="custom-command-line-properties"/>
        </sample>
        <para role="original">However, keep in mind that it is usually best to keep configuration in the build script and under source control.</para>
        <para>ただ、たいていの場合は設定値をビルドスクリプトに格納し、ソースコード管理システムで管理するのが一番良い方法だということは頭に留めておいてください。</para>
    </section>

    <section>
        <title>タスク <phrase role="original">Tasks</phrase></title>
        <para role="original">The Sonar plugin adds the following tasks to the project.</para>
        <para>Sonarプラグインはプロジェクトに以下のタスクを追加します。</para>
        <table>
            <title>Sonarプラグイン - タスク <phrase role="original">Sonar plugin - tasks</phrase></title>
            <thead>
                <tr>
                    <td>タスク名 <phrase role="original">Task name</phrase></td>
                    <td>依存先 <phrase role="original">Depends on</phrase></td>
                    <td>タイプ <phrase role="original">Type</phrase></td>
                    <td>説明 <phrase role="original">Description</phrase></td>
                </tr>
            </thead>
            <tr>
                <td><literal>sonarAnalyze</literal></td>
                <td>-</td>
                <td><apilink class="org.gradle.api.plugins.sonar.SonarAnalyze"/></td>
                <td>プロジェクト階層全体を解析し、結果をSonarデータベースに格納。
                  <phrase role="original">Analyzes a project hierarchy and stores the results in the Sonar database.</phrase></td>
            </tr>
        </table>
    </section>
</chapter>
