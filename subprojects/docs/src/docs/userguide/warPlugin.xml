<!--
  ~ Copyright 2010 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='war_plugin' xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="ja">
    <title>War プラグイン<phrase role="original">The War Plugin</phrase></title>
    <para role="original">The War plugin extends the Java plugin to add support for assembling web application WAR files.
        It disables the default JAR archive generation of the Java plugin and adds a default WAR archive task.
    </para>
    <para>War プラグインは WEB アプリケーションの WAR ファイルを生成できるように Java プラグインを拡張したものです。
        Java プラグインの 標準の JAR ファイルは生成されなくなり、WAR アーカイブ タスクが追加されます。
    </para>

    <section>
        <title>使用方法<phrase role="original">Usage</phrase></title>
        <para role="original">To use the War plugin, include the following in your build script:</para>
        <para>War プラグインを使うためには、ビルドスクリプトに下記を含めます：</para>
        <sample id="useWarPlugin" dir="webApplication/quickstart" title="Using the War plugin">
            <sourcefile file="build.gradle" snippet="use-war-plugin"/>
        </sample>
    </section>

    <section>
        <title>タスク<phrase role="original">Tasks</phrase></title>
        <para role="original">The War plugin adds the following tasks to the project.</para>
        <para>War プラグインは 次のタスクをプロジェクトに追加します。</para>
        <table>
            <title>War プラグイン - タスク<phrase role="original">War plugin - tasks</phrase></title>
            <thead>
                <tr>
                    <td>タスク名<phrase role="original">Task name</phrase></td>
                    <td>依存先<phrase role="original">Depends on</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>説明<phrase role="original">Description</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>war</literal>
                </td>
                <td>
                    <literal>compile</literal>
                </td>
                <td><apilink class="org.gradle.api.tasks.bundling.War"/></td>
                <td>WAR ファイルを生成します。<phrase role="original">Assembles the application WAR file.</phrase></td>
            </tr>
        </table>
        <para role="original">The War plugin adds the following dependencies to tasks added by the Java plugin.</para>
        <para>War プラグインは Java プラグインで追加されたタスクに対し、次の依存関係を追加します。</para>
        <table>
            <title>War プラグイン - 追加されたタスクの依存関係<phrase role="original">War plugin - additional task dependencies</phrase></title>
            <thead>
                <td>タスク名<phrase role="original">Task name</phrase></td>
                <td>依存先<phrase role="original">Depends on</phrase></td>
            </thead>
            <tr>
                <td>assemble</td>
                <td>war</td>
            </tr>
        </table>
        <figure>
            <title>War プラグイン - タスク<phrase role="original">War plugin - tasks</phrase></title>
            <imageobject>
                <imagedata fileref="img/warPluginTasks.png"/>
            </imageobject>
        </figure>
    </section>

    <section>
        <title>プロジェクトレイアウト<phrase role="original">Project layout</phrase></title>
        <table>
            <title>War プラグイン - プロジェクトレイアウト<phrase role="original">War plugin - project layout</phrase></title>
            <thead>
                <tr>
                    <td>ディレクトリ<phrase role="original">Directory</phrase></td>
                    <td>意味<phrase role="original">Meaning</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <filename>src/main/webapp</filename>
                </td>
                <td>WEB アプリケーションソース<phrase role="original">Web application sources</phrase></td>
            </tr>
        </table>
    </section>

    <section>
        <title>依存関係の管理<phrase role="original">Dependency management</phrase></title>
        <para role="original">The War plugin adds two dependency configurations named <literal>providedCompile</literal> and
            <literal>providedRuntime</literal>. Those two configurations have the same scope as the respective
            <literal>compile</literal> and <literal>runtime</literal> configurations, except that they are not added to
            the WAR archive. It is important to note that those <literal>provided</literal> configurations work
            transitively. Let's say you add <literal>commons-httpclient:commons-httpclient:3.0</literal> to any of the
            provided configurations. This dependency has a dependency on <literal>commons-codec</literal>.
            Because this is a “provided” configuration, this means that neither of these dependencies will be added to your
            WAR, even if the <literal>commons-codec</literal> library is an explicit dependency of your <literal>compile</literal>
            configuration. If you don't want this transitive behavior, simply declare your <literal>provided</literal>
            dependencies like <literal>commons-httpclient:commons-httpclient:3.0@jar</literal>.
        </para>
        <para>War プラグインは <literal>providedCompile</literal> と <literal>providedRuntime</literal> の２つの依存構成を追加します。
            これらの構成は WAR アーカイブには追加されないという点を除けば、それぞれ <literal>compile</literal>、<literal>runtime</literal>
            と同じスコープを持ちます。 
            <literal>provided</literal> 構成が推移的に機能することは特筆すべき点です。
            そうですね。例えば provided 構成の何れかに <literal>commons-httpclient:commons-httpclient:3.0</literal> を追加したとします。
            この依存ライブラリは <literal>commons-codec</literal> に依存します。
            これは、たとえ、<literal>commons-codec</literal> が <literal>compile</literal> 構成に依存していることが明らかであったとしても
            WAR ファイルには <literal>httpclient</literal> も <literal>commons-codec</literal> も追加されないことを意味します。
            もし、この推移的な挙動を望まないのであれば、単純に <literal>commons-httpclient:commons-httpclient:3.0@jar</literal> を
            dependencies の <literal>provided</literal> 構成に定義してください。
        </para>
    </section>

    <section>
        <title>規約プロパティ<phrase role="original">Convention properties</phrase></title>
        <table>
            <title>War プラグイン - ディレクトリプロパティ<phrase role="original">War plugin - directory properties</phrase></title>
            <thead>
                <tr>
                    <td>プロパティ名<phrase role="original">Property name</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>デフォルト値<phrase role="original">Default value</phrase></td>
                    <td>説明<phrase role="original">Description</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>webAppDirName</literal>
                </td>
                <td>
                    <classname>String</classname>
                </td>
                <td>
                    <filename>src/main/webapp</filename>
                </td>
                <td>
                    WEB アプリケーションソースディレクトリの名前、プロジェクトディレクトリからの相対パス
                    <phrase role="original">The name of the web application source directory, relative to the project directory.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>webAppDir</literal>
                </td>
                <td>
                    <classname>File</classname> (読取専用)<phrase role="original">(read-only)</phrase>
                </td>
                <td>
                    <filename><replaceable>projectDir</replaceable>/<replaceable>webAppDirName</replaceable></filename>
                </td>
                <td>
                    WEB アプリケーションソースディレクトリ
                    <phrase role="original">The web application source directory.</phrase>
                </td>
            </tr>
        </table>

        <para role="original">>These properties are provided by a <apilink class="org.gradle.api.plugins.WarPluginConvention"/>
            convention object.
        </para>
        <para>これらのプロパティは <apilink class="org.gradle.api.plugins.WarPluginConvention"/> オブジェクトによって提供されています。
        </para>
    </section>

    <section id='sec:default_settings'>
        <title>War</title>

        <para role="original">>The default behavior of the War task is to copy the content of <literal>src/main/webapp</literal>
            to the root of the archive. Your <literal>webapp</literal> directory may of course contain a
            <literal>WEB-INF</literal> sub-directory, which may contain a <literal>web.xml</literal> file.
            Your compiled classes are compiled to <literal>WEB-INF/classes</literal>. All the dependencies of the
            <literal>runtime</literal>
            <footnote>
                <para role="original">The
                    <literal>runtime</literal>
                    configuration extends the
                    <literal>compile</literal>
                    configuration.
                </para>
            </footnote>
            configuration are copied to <literal>WEB-INF/lib</literal>.</para>
        <para>The <apilink class="org.gradle.api.tasks.bundling.War"/> class in the API documentation has additional useful information.</para>
    </section>
    <section id='sec:customizing'>
        <title>カスタマイズ<phrase role="original">Customizing</phrase></title>
        <para role="original">Here is an example with the most important customization options:
        </para>
        <para>以下は最も重要なカスタマイズ例です。
        </para>
        <sample id="webproject" dir="webApplication/customized" title="Customization of war plugin">
            <sourcefile file="build.gradle" snippet="customization"/>
        </sample>
        <para role="original">Of course one can configure the different file-sets with a closure to define excludes and includes.
        </para>
        <para>もちろん、excludes と includes を定義したクロージャを使って異なるファイルセットを設定することもできます。
        </para>
    </section>
</chapter>
