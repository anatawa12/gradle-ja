<!--
  ~ Copyright 2009 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id="scala_plugin" xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="ja">
    <title>Scalaプラグイン <phrase role="original">The Scala Plugin</phrase></title>

    <para role="original">The Scala plugin extends the Java plugin to add support for Scala projects. It can deal with
        Scala code, mixed Scala and Java code, and even pure Java code (although we don't necessarily recommend to use it for the latter).
        The plugin supports <emphasis>joint compilation</emphasis>, which allows to freely mix and match Scala and Java code,
        with dependencies in both directions. For example, a Scala class can extend a Java class that in turn extends a Scala class.
        This makes it possible to use the best language for the job, and to rewrite any class in the other language if needed.
    </para>
    <para>Scalaプラグインは、Javaプラグインを拡張し、Scalaプロジェクトのサポートを追加したものです。
        ScalaコードとScala/Javaの混合コードをサポートするほか、Javaコードのみのプロジェクトを取り扱うこともできます（Javaコードだけのプロジェクトにこのプラグインを使うことはあまり推奨しませんが）。
        また、JavaとScalaのジョイントコンパイルをサポートしており、ScalaコードとJavaコードを自由に混ぜ合わせたり、お互いに統合させることができます。
        例えば、ScalaのクラスはJavaのクラスを継承できますし、更にそのJavaクラスがScalaクラスを継承していても問題ありません。時々に応じて最適な言語を選択でき、必要なときにはいつでもクラスを別言語で書き直すことができます。
    </para>

    <section>
        <title>使用方法 <phrase role="original">Usage</phrase></title>
        <para role="original">To use the Scala plugin, include in your build script:</para>
        <para>Scalaプラグインを使うには、ビルドスクリプトに以下の行を追加します。</para>
        <sample id="useScalaPlugin" dir="scala/quickstart" title="Scalaプラグインを使う / Using the Scala plugin">
            <sourcefile file="build.gradle" snippet="use-plugin"/>
        </sample>
    </section>

    <section>
        <title>タスク <phrase role="original">Tasks</phrase></title>
        <para role="original">The Scala plugin adds the following tasks to the project.</para>
        <para>Scalaプラグインは、プロジェクトに以下のタスクを追加します。</para>
        <table>
            <title>Scalaプラグイン - タスク <phrase role="original">Scala plugin - tasks</phrase></title>
            <thead>
                <tr>
                    <td><phrase role="original">Task name</phrase> タスク</td>
                    <td><phrase role="original">Depends on</phrase> 依存先</td>
                    <td><phrase role="original">Type</phrase> 型</td>
                    <td><phrase role="original">Description</phrase> 説明</td>
                </tr>
            </thead>
            <tr>
                <td><literal>compileScala</literal></td>
                <td><literal>compileJava</literal></td>
                <td><apilink class="org.gradle.api.tasks.scala.ScalaCompile"/></td>
                <td><phrase role="original">Compiles production Scala source files.</phrase>
                Scalaの製品ソースファイルをコンパイルする。</td>
            </tr>
            <tr>
                <td><literal>compileTestScala</literal></td>
                <td><literal>compileTestJava</literal></td>
                <td><apilink class="org.gradle.api.tasks.scala.ScalaCompile"/></td>
                <td><phrase role="original">Compiles test Scala source files.</phrase>
                Scalaのテストソースファイルをコンパイルする。</td>
            </tr>
            <tr>
                <td><literal>compile<replaceable>SourceSet</replaceable>Scala</literal></td>
                <td><literal>compile<replaceable>SourceSet</replaceable>Java</literal></td>
                <td><apilink class="org.gradle.api.tasks.scala.ScalaCompile"/></td>
                <td><phrase role="original">Compiles the given source set's Scala source files.</phrase>
                指定したソースセットのScalaソースファイルをコンパイルする。</td>
            </tr>
            <tr>
                <td><literal>scaladoc</literal></td>
                <td>-</td>
                <td><apilink class="org.gradle.api.tasks.scala.ScalaDoc"/></td>
                <td><phrase role="original">Generates API documentation for the production Scala source files.</phrase>
                Scala製品ソースファイルのAPIドキュメントを生成する。</td>
            </tr>
        </table>
        <para role="original">The Scala plugin adds the following dependencies to tasks added by the Java plugin.</para>
        <para>Scalaプラグインは、Javaプラグインによって追加されたタスクに以下の依存関係を追加します。</para>
        <table>
            <title>Scalaプラグイン - タスクの追加依存関係 <phrase role="original">Scala plugin - additional task dependencies</phrase></title>
            <thead>
                <td><phrase role="original">Task name</phrase> タスク名</td>
                <td><phrase role="original">Depends on</phrase> 依存先</td>
            </thead>
            <tr>
                <td>
                    <literal>classes</literal>
                </td>
                <td>
                    <literal>compileScala</literal>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>testClasses</literal>
                </td>
                <td>
                    <literal>compileTestScala</literal>
                </td>
            </tr>
            <tr>
                <td>
                    <literal><replaceable>sourceSet</replaceable>Classes</literal>
                </td>
                <td>
                    <literal>compile<replaceable>SourceSet</replaceable>Scala</literal>
                </td>
            </tr>
        </table>
        <figure>
            <title>Scalaプラグイン - タスク<phrase role="original">Scala plugin - tasks</phrase></title>
            <imageobject>
                <imagedata fileref="img/scalaPluginTasks.png"/>
            </imageobject>
        </figure>
    </section>

    <section>
        <title>プロジェクトレイアウト <phrase role="original">Project layout</phrase></title>
        <para role="original">The Scala plugin assumes the project layout shown below.  All the Scala source directories can contain
            Scala <emphasis>and</emphasis> Java code. The Java source directories may only contain Java source code.
            None of these directories need to exist or have anything in them; the Scala plugin will simply compile
            whatever it finds.
        </para>
        <para>Scalaプラグインは次のようなプロジェクトレイアウトを想定しています。
            すべてのScalaソースディレクトリにはScala<emphasis>だけでなく</emphasis>Javaコードも含めることができますが、JavaソースディレクトリにはJavaコードしか含めることができません。
            また、これらのどのディレクトリも、存在しなかったり、何も含んでいなくてもかまいません。Scalaプラグインは、単純に見つけたディレクトリをコンパイルするだけです。
        </para>
        <table id='scalalayout'>
            <title>Scalaプラグイン <phrase role="original">Scala plugin - project layout</phrase></title>
            <thead>
                <tr>
                    <td><phrase role="original">Directory</phrase> ディレクトリ</td>
                    <td><phrase role="original">Meaning</phrase> 意味</td>
                </tr>
            </thead>
            <xi:include href="javaProjectMainLayout.xml"/>
            <tr>
                <td>
                    <filename>src/main/scala</filename>
                </td>
                <td><phrase role="original">Production Scala sources. May also contain Java sources for joint compilation.</phrase>
                製品のScalaソース。ジョイントコンパイルするJavaソースを含んでもよい</td>
            </tr>
            <xi:include href="javaProjectTestLayout.xml"/>
            <tr>
                <td>
                    <filename>src/test/scala</filename>
                </td>
                <td><phrase role="original">Test Scala sources. May also contain Java sources for joint compilation.</phrase> テストのScalaソース。ジョイントコンパイルするJavaソースを含んでもよい</td>
            </tr>
            <xi:include href="javaProjectGenericLayout.xml"/>
            <tr>
                <td>
                    <filename>src/<replaceable>sourceSet</replaceable>/scala</filename>
                </td>
                <td><phrase role="original">Scala sources for the given source set. May also contain Java sources for joint compilation.</phrase> 特定のソースセットのScalaソース。ジョイントコンパイルするJavaソースを含んでもよい</td>
            </tr>
        </table>

        <section>
            <title>プロジェクトレイアウトの変更 <phrase role="original">Changing the project layout</phrase></title>
            <para role="original">Just like the Java plugin, the Scala plugin allows to configure custom locations for Scala production and test sources.</para>
            <para>Javaプラグインと同じように、Scalaプラグインも製品コードやテストコードの場所を変更することができます。</para>
            <sample id="customScalaSourceLayout" dir="scala/customizedLayout" title="Scalaソースレイアウトのカスタマイズ / Custom Scala source layout">
                <sourcefile file="build.gradle" snippet="custom-source-locations"/>
            </sample>
        </section>

    </section>

    <section>
        <title>依存関係の管理 <phrase role="original">Dependency management</phrase></title>
        <para><phrase role="original">
            Scala projects need to declare a <literal>scala-library</literal> dependency. This dependency will then be used on compile and
            runtime class paths. It will also be used to get hold of the Scala compiler and Scaladoc tool, respectively.
            </phrase>
            Scalaプロジェクトでは、<literal>scala-library</literal>への依存関係を宣言する必要があります。
            この依存関係は、Scalaコードをコンパイルしたり実行したりする際のクラスパスに追加されるほか、ScalaコンパイラおよびScaladocツールを取得する際にも使用されます。
            <footnote><para role="original">
                <para role="original">See <xref linkend="sec:configure_scala_classpath"/>.</para>
                <para><xref linkend="sec:configure_scala_classpath"/>参照</para>
            </para></footnote>
        </para>
        <para role="original">
            If Scala is used for production code, the <literal>scala-library</literal> dependency should be added to the
            <literal>compile</literal> configuration:
        </para>
        <para>Scalaが製品コードで使われている場合は、<literal>scala-library</literal>への依存関係は<literal>compile</literal>コンフィグレーションに追加してください。</para>
        <sample id="declareScalaDependency" dir="scala/quickstart" title="製品コードに使うScalaへの依存関係の宣言 / Declaring a Scala dependency for production code">
            <sourcefile file="build.gradle" snippet="scala-dependency"/>
        </sample>
        <para role="original">
            If Scala is only used for test code, the <literal>scala-library</literal> dependency should be added to the <literal>testCompile</literal>
            configuration:
        </para>
        <para>Scalaがテストコードのみで使われている場合は、<literal>scala-library</literal>への依存関係は<literal>testCompile</literal>コンフィグレーションに追加してください。</para>
        <sample id="declareScalaTestDependency" dir="userguide/scala/scalaDependency" title="テストコードに使うScalaへの依存関係の宣言 / Declaring a Scala dependency for test code">
            <sourcefile file="build.gradle" snippet="scala-test-dependency"/>
        </sample>
    </section>

    <section id="sec:configure_scala_classpath">
        <title>scalaClasspathの自動設定 <phrase role="original">Automatic configuration of scalaClasspath</phrase></title>
        <para role="original">
            <literal>ScalaCompile</literal> and <literal>ScalaDoc</literal> tasks consume Scala in two ways: on their <literal>classpath</literal>,
            and on their <literal>scalaClasspath</literal>. The former is used to locate classes referenced by the source code, and will typically
            contain <literal>scala-library</literal> along with other libraries. The latter is used to load and execute the Scala compiler
            and Scaladoc tool, respectively, and should only contain the <literal>scala-compiler</literal> library and its dependencies.
        </para>
        <para><literal>ScalaCompile</literal>タスクと<literal>ScalaDoc</literal>タスクは二つの用途でScalaを使用します。タスクの<literal>classpath</literal>と<literal>scalaClasspath</literal>です。前者はソースコードから参照されているクラスを配置するパスで、scala-libraryも典型的には他のライブラリと一緒に格納されます。後者はScalaコンパイラとScaladocツールをロードして実行するために使用されるパスで、scala-compilerライブラリとその依存関係のみが配置されていなければなりません。</para>
        <para><phrase role="original">
            Unless a task's <literal>scalaClasspath</literal> is configured explicitly, the Scala (base) plugin will try to infer it
            from the task's <literal>classpath</literal>. This is done as follows:
            </phrase>
            <literal>scalaClasspath</literal>が明示的に設定されていない場合、Scala(base)プラグインはタスクの<literal>classpath</literal>から以下のように設定値を推論しようとします。
            <itemizedlist>
                <listitem>
                    <phrase role="original">If a <literal>scala-library</literal> Jar is found on <literal>classpath</literal>, and the project has at least one repository declared,
                    a corresponding <literal>scala-compiler</literal> repository dependency will be added to <literal>scalaClasspath</literal>.</phrase>
                    <literal>scala-library</literal>のJarが<literal>classpath</literal>に見つかれば、そして少なくとも一つのリポジトリがプロジェクトに設定されていれば、リポジトリから対応する<literal>scala-compiler</literal>の依存関係を取得して<literal>scalaClasspath</literal>に追加します。
                </listitem>
                <listitem>
                    <phrase role="original">Otherwise, execution of the task will fail with a message saying that <literal>scalaClasspath</literal> could not be inferred.</phrase>
                    それ以外の場合は、<literal>scalaClasspath</literal>の推論に失敗した旨のメッセージを出力してタスクは失敗します。
                </listitem>
            </itemizedlist>
        </para>
    </section>

    <section>
        <title>規約プロパティ <phrase role="original">Convention properties</phrase></title>
        <para role="original">The Scala plugin does not add any convention properties to the project.</para>
        <para>Scalaプラグインは、プロジェクトに規約プロパティを追加しません。</para>
    </section>
    
    <section>
        <title>ソースセットプロパティ <phrase role="original">Source set properties</phrase></title>
        <para role="original">The Scala plugin adds the following convention properties to each source set in the project. You can
            use these properties in your build script as though they were properties of the source set object (see
            <xref linkend="sub:more_about_convention_objects"/>).</para>
        <para>Scalaプロジェクトの各ソースセットに以下の規約プロパティを追加します。これらのプロパティは、あたかもソースセットオブジェクトのプロパティであるかのようにビルドスクリプト内で使うことができます（<xref linkend="sub:more_about_convention_objects"/>参照）</para>
        <table>
            <title>Scalaプラグイン - ソースセットプロパティ <phrase role="original">Scala plugin - source set properties</phrase></title>
            <thead>
                <tr>
                    <td><phrase role="original">Property name</phrase> プロパティ名</td>
                    <td><phrase role="original">Type</phrase> 型</td>
                    <td><phrase role="original">Default value</phrase> デフォルト値</td>
                    <td><phrase role="original">Description</phrase> 説明</td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>scala</literal>
                </td>
                <td>
                    <apilink class="org.gradle.api.file.SourceDirectorySet"/> (<phrase role="original">read-only</phrase>読取り専用)
                </td>
                <td>
                    <phrase role="original">Not null</phrase> 非null
                </td>
                <td>
                    <phrase role="original">
                    The Scala source files of this source set. Contains all <filename>.scala</filename> and
                    <filename>.java</filename> files found in the Scala source directories, and excludes all other
                    types of files.
                    </phrase>
                    このソースセットのScalaソースファイル。Scalaソースディレクトリにある、すべての<filename>.scala</filename>と<filename>.java</filename>ファイルを含み、その他のタイプのファイルは含まない
                </td>
            </tr>
            <tr>
                <td>
                    <literal>scala.srcDirs</literal>
                </td>
                <td>
                    <phrase role="original"><classname>Set&lt;File></classname>. Can set using anything described in <xref linkend="sec:specifying_multiple_files"/>.</phrase>
                    <xref linkend="sec:specifying_multiple_files"/>で説明されたものなら何でも設定可能
                </td>
                <td>
                    <literal>[<replaceable>projectDir</replaceable>/src/<replaceable>name</replaceable>/scala]</literal>
                </td>
                <td>
                    <phrase role="original">
                    The source directories containing the Scala source files of this source set. May also contain
                    Java source files for joint compilation.
                    </phrase>
                    このソースセットのScalaソースファイルを含むソースディレクトリ。ジョイントコンパイルするJavaソースファイルも含む場合がある
                </td>
            </tr>
            <tr>
                <td>
                    <literal>allScala</literal>
                </td>
                <td>
                    <apilink class="org.gradle.api.file.FileTree"/> (<phrase role="original">read-only</phrase>読取り専用)
                </td>
                <td>
                    <phrase role="original">Not null</phrase> 非null
                </td>
                <td>
                    <phrase role="original">
                    All Scala source files of this source set. Contains only the <filename>.scala</filename> files
                    found in the Scala source directories.
                    </phrase>
                    このソースセットの全Scalaソースファイル。Scalaソースディレクトリにある<filename>.scala</filename>ファイルのみを含む
                </td>
            </tr>
        </table>

        <para role="original">These convention properties are provided by a convention object of type <apilink class="org.gradle.api.tasks.ScalaSourceSet"/>.</para>
        <para>これらの規約プロパティは<apilink class="org.gradle.api.tasks.ScalaSourceSet"/>型の規約オブジェクトにより提供されます。</para>
        <para role="original">The Scala plugin also modifies some source set properties:</para>
        <para>また、Scalaプラグインはいくつかのソースセットプロパティを修正します。</para>
        <table>
            <title>Scalaプラグイン <phrase role="original">Scala plugin - source set properties</phrase></title>
            <thead>
                <tr>
                    <td><phrase role="original">Property name</phrase> プロパティ名</td>
                    <td><phrase role="original">Change</phrase> 変更点</td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>allJava</literal>
                </td>
                <td><phrase role="original">Adds all <filename>.java</filename> files found in the Scala source directories.</phrase> Scalaソースディレクトリにあるすべての<filename>.java</filename>ファイルを追加</td>
            </tr>
            <tr>
                <td>
                    <literal>allSource</literal>
                </td>
                <td><phrase role="original">Adds all source files found in the Scala source directories.</phrase>
                Scalaソースディレクトリにあるすべてのファイルを追加</td>
            </tr>
        </table>
    </section>

    <section>
        <title>Fast Scala Compiler</title>
        <para><phrase role="original">The Scala plugin includes support for <ulink url="http://www.scala-lang.org/docu/files/tools/fsc.html">fsc</ulink>,
            the Fast Scala Compiler. <literal>fsc</literal> runs in a separate daemon process and can speed up
            compilation significantly.</phrase>
        Scalaプラグインには、<ulink url="http://www.scala-lang.org/docu/files/tools/fsc.html">fsc</ulink>、Fast Scala Compilerのサポートが含まれています。
        <sample id="fsc" dir="scala/fsc" title="Fast Scala Compilerを有効にする / Enabling the Fast Scala Compiler">
                <sourcefile file="build.gradle" snippet="use-fsc"/>
            </sample>
            <phrase role="original">
            Note that <literal>fsc</literal> expects to be restarted whenever the <emphasis>contents</emphasis> of its
            compile class path change. (It does detect changes to the compile class path itself.) This makes it
            less suitable for multi-project builds.
            </phrase>
            ただし、次の点に注意してください。<literal>fsc</literal>は、コンパイル時のクラスパス<emphasis>に含まれるもの</emphasis>（訳注：jarなど）が変更される度に再起動させる必要があります。（コンパイル時クラスパス自体の変更は検知されますが）。
            このため、マルチプロジェクトとの相性は悪くなります。
        </para>
    </section>

    <section>
        <title>別プロセスでコンパイルする <phrase role="original">Compiling in external process</phrase></title>
        <para role="original">
            When <literal>scalaCompileOptions.fork</literal> is set to <literal>true</literal>, compilation will take place
            in an external process. The details of forking depend on which compiler is used. The Ant based compiler
            (<literal>scalaCompileOptions.useAnt = true</literal>) will fork a new process for every <literal>ScalaCompile</literal> task,
            and does not fork by default. The Zinc based compiler (<literal>scalaCompileOptions.useAnt = false</literal>) will leverage
            the Gradle compiler daemon, and does so by default.
        </para>
        <para>
            <literal>scalaCompileOptions.fork</literal>オプションがtrueにセットされていると、コンパイル処理は外部プロセスで実行されます。
            フォーク処理の詳細はどのコンパイラを使用するかにより異なり、Antベースのコンパイラを使用する場合は（<literal>scalaCompileOptions.useAnt = true</literal>）、<literal>ScalaCompile</literal>タスクが実行される度に新しいプロセスがフォークされます。また、デフォルトではフォークされません。
            Zincベースのコンパイラを使う場合（<literal>scalaCompileOptions.useAnt = false</literal>）、Gradleのコンパイラデーモンを使用してコンパイルされます。Antベースのコンパイラと異なり、こちらがデフォルトの処理です。
        </para>
        <para><phrase role="original">Memory settings for the external process default to the JVM's defaults. To adjust memory settings,
            configure <literal>scalaCompileOptions.forkOptions</literal> as needed:</phrase>
            外部プロセスのメモリ設定は、デフォルトではJVMのデフォルト値が使用されます。メモリ設定を調整するには、<literal>scalaCompileOptions.forkOptions</literal>を必要に応じて設定してください。
            <sample id="zinc" dir="scala/zinc" title="メモリ設定の調整 / Adjusting memory settings">
                <sourcefile file="build.gradle" snippet="adjust-memory"/>
            </sample>
        </para>
    </section>

    <section>
        <title>インクリメンタルコンパイル <phrase role="original">Incremental compilation</phrase></title>
        <para role="original">
            By compiling only classes whose source code has changed since the previous compilation, and classes affected by these changes,
            incremental compilation can significantly reduce Scala compilation time. It is particularly effective when frequently compiling
            small code increments, as is often done at development time.
        </para>
        <para>
            前回コンパイルしたときからの変更差分、およびそれにより影響を受けるクラスのみを再コンパイルすることで、Scalaのコンパイル時間を大幅に減らすことができます。
            これは、コードを小さく変更して頻繁にコンパイルするようなとき、開発中にはしばしばそういうことがありますが、そのような場面では特に有用です。
        </para>
        <para>
            <phrase role="original">The Scala plugin now supports incremental compilation by integrating with <ulink url="https://github.com/typesafehub/zinc">Zinc</ulink>,
            a standalone version of <ulink url="https://github.com/harrah/xsbt">sbt</ulink>'s incremental Scala compiler. To switch the
            <literal>ScalaCompile</literal> task from the default Ant based compiler to the new Zinc based compiler, set
            <literal>scalaCompileOptions.useAnt</literal> to <literal>false</literal>:</phrase>
            Scalaプラグインは、<ulink url="https://github.com/typesafehub/zinc">Zinc</ulink>という、<ulink url="https://github.com/harrah/xsbt">sbt</ulink>のインクリメンタルScalaコンパイラのスタンドアローン版を統合することでインクリメンタルコンパイルをサポートしています。
            <sample id="zinc" dir="scala/zinc" title="Zincベースのコンパイラを有効にする / Activating the Zinc based compiler">
                <sourcefile file="build.gradle" snippet="use-zinc"/>
            </sample>
        </para>

        <para role="original">
            Except where noted in the<ulink url="http://gradle.org/docs/current/dsl/org.gradle.api.tasks.scala.ScalaCompile.html">API documentation</ulink>,
            the Zinc based compiler supports exactly the same configuration options as the Ant based compiler. Note, however, that the Zinc compiler requires
            Java 6 or higher to run. This means that Gradle itself has to be run with Java 6 or higher.
        </para>
        <para>
            <ulink url="http://gradle.monochromeroad.com/docs/dsl/org.gradle.api.tasks.scala.ScalaCompile.html">APIドキュメント</ulink>に記載されている部分を除き、ZincベースのコンパイラはAntベースのコンパイラと全く同じ設定オプションをサポートします。
            ただ、ZincコンパイラはJava6以上のバージョンを必要とするので注意してください。これは、Gradle自身もJava6以上で動かさなくてはならないことを意味します。
        </para>

        <para role="original">
            The Scala plugin adds a configuration named <literal>zinc</literal> to resolve the Zinc library and its dependencies. To override the
            Zinc version that Gradle uses by default, add an explicit Zinc dependency (for example <literal>zinc "com.typesafe.zinc:zinc:0.1.4"</literal>).
            Regardless of which Zinc version is used, Zinc will always use the Scala compiler found on the <literal>scalaTools</literal> configuration.
        </para>
        <para>
            Scalaプラグインは、zincという名前のコンフィグレーションを追加し、Zincライブラリとその依存関係を解決するために使用します。
            Gradleがデフォルトで使用するZincのバージョンをオーバーライドするには、Zincへの依存関係（例えば、<literal>zinc "com.typesafe.zinc:zinc:0.1.4"</literal>）を明示的に指定してください。
            どのバージョンのZincが使用されているかにかかわらず、Zincは常にscalaToolsコンフィグレーションに含まれるScalaコンパイラを使用します。
        </para>

        <para role="original">
            Just like Gradle's Ant based compiler, the Zinc based compiler supports joint compilation of Java and Scala code. By default, all Java and Scala code
            under <literal>src/main/scala</literal> will participate in joint compilation. With the Zinc based compiler, even Java code will be compiled incrementally.
        </para>
        <para>
            Antベースのコンパイラ同様、ZincベースのコンパイラもJavaとScalaのジョイントコンパイルをサポートします。
            デフォルトでは、<literal>src/main/scala</literal>にある全てのJavaとScalaのコードがジョイントコンパイルに使用されます。Zincベースのコンパイラは、たとえJavaコードでもインクリメンタルにコンパイルできます。
        </para>

        <para role="original">
            Incremental compilation requires dependency analysis of the source code. The results of this analysis are stored in the file designated
            by <literal>scalaCompileOptions.incrementalOptions.analysisFile</literal> (which has a sensible default). In a multi-project build, analysis
            files are passed on to downstream <literal>ScalaCompile</literal> tasks to enable incremental compilation across project boundaries. For
            <literal>ScalaCompile</literal> tasks added by the Scala plugin, no configuration is necessary to make this work. For other
            <literal>ScalaCompile</literal> tasks, <literal>scalaCompileOptions.incrementalOptions.publishedCode</literal> needs to be configured to point
            to the classes folder or Jar archive by which the code is passed on to compile class paths of downstream <literal>ScalaCompile</literal> tasks.
            Note that if <literal>publishedCode</literal> is not set correctly, downstream tasks may not recompile code affected by upstream changes,
            leading to incorrect compilation results.
        </para>
        <para>
            インクリメンタルコンパイルを行うには、ソースコードを解析する必要があります。解析結果は、<literal>scalaCompileOptions.incrementalOptions.analysisFile</literal>（適切なデフォルト値が設定されています）で指定されたファイルに保存されます。
            マルチプロジェクトの場合、この解析ファイルは下流の<literal>ScalaCompile</literal>タスクに渡されるので、プロジェクトをまたいでのインクリメンタルコンパイルが可能です。
            Scalaプラグインにより追加された<literal>ScalaCompile</literal>タスクはデフォルトでそのように動作するので、追加の設定は必要ありません。
            その他の<literal>ScalaCompile</literal>タスクでこの動作を有効にするには、<literal>scalaCompileOptions.incrementalOptions.publishedCode</literal>が適切なクラスフォルダやJarアーカイブを指すように設定し、下流のタスクのコンパイルクラスパスにコードを渡す必要があります。
            <literal>publishedCode</literal>が正しく設定されていない場合、上流のソースが変更されても下流のタスクの再コンパイルが適切に動かず、コンパイル結果も正しくなりませんので注意してください。
        </para>

        <para role="original">
            Due to the overhead of dependency analysis, a clean compilation or a compilation after a larger code change may take longer than with the Ant based compiler.
            For CI builds and release builds, we currently recommend to use the Ant based compiler.
        </para>
        <para>
            解析処理に伴うオーバーヘッドにより、クリーンコンパイルや大規模な変更を行った後のコンパイルは、Antベースのコンパイラより長い時間を要するかもしれません。インテグレーションサーバーでのビルドやリリースビルドの際は、今のところAntベースのコンパイラを推奨します。
        </para>

        <para role="original">
            Note that Zinc's Nailgun based daemon mode is not supported. Instead, we plan to enhance Gradle's own compiler daemon to stay alive across Gradle
            invocations, reusing the same Scala compiler. This is expected to yield another significant speedup for Scala compilation.
        </para>
        <para>ZincのNailgunベースのデーモンモードには対応していません。代わりに、Gradle自身のコンパイラデーモンを拡張し、Gradle実行間で同じScalaコンパイラを再利用できるようにする予定です。デーモンモードにより、Scalaコンパイルが更にスピードアップすることが期待されます。</para>
    </section>

    <section>
        <title>Eclipse Integration</title>
        <para>
            When the Eclipse plugin encounters a Scala project, it adds additional configuration to make the project work with Scala IDE out of the box.
            Specifically, the plugin adds a Scala nature and dependency container.
        </para>
    </section>

    <section>
        <title>IntelliJ IDEA Integration</title>
        <para>
            When the IDEA plugin encounters a Scala project, it adds additional configuration to make the project work with IDEA out of the box. Specifically,
            the plugin adds a Scala facet and a Scala compiler library that matches the Scala version on the project's class path.
        </para>
    </section>
</chapter>
