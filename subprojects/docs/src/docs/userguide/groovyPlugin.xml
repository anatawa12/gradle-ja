<!--
  ~ Copyright 2009 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='groovy_plugin' xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="ja">
    <title>Groovyプラグイン<phrase role="original">The Groovy Plugin</phrase></title>
    <para role="original">The Groovy plugin extends the Java plugin to add support for Groovy projects. It can deal with
        Groovy code, mixed Groovy and Java code, and even pure Java code (although we don't necessarily recommend to use it for the latter).
        The plugin supports <emphasis>joint compilation</emphasis>, which allows to freely mix and match Groovy and Java code,
        with dependencies in both directions. For example, a Groovy class can extend a Java class that in turn extends a Groovy class.
        This makes it possible to use the best language for the job, and to rewrite any class in the other language if needed.
    </para>
    <para>Groovyプラグインは、Javaプラグインを拡張し、Groovyプロジェクトのサポートを追加したものです。
        GroovyコードとGroovy/Javaの混合コードをサポートするほか、Javaコードのみのプロジェクトを取り扱うこともできます（Javaコードだけのプロジェクトにこのプラグインを使うことはあまり推奨しませんが）。
        また、JavaとGroovyのジョイントコンパイルをサポートしており、GroovyコードとJavaコードを自由に混ぜ合わせたり、お互いに統合させることができます。
        例えば、GroovyのクラスはJavaのクラスを継承できますし、更にそのJavaクラスがGroovyクラスを継承していても問題ありません。時々に応じて最適な言語を選択でき、必要なときにはいつでもクラスを別言語で書き直すことができます。
    </para>

    <section>
        <title>使用方法<phrase role="original">Usage</phrase></title>
        <para role="original">To use the Groovy plugin, include in your build script:</para>
        <para>Groovyプラグインを使うためには、ビルドスクリプトに下記を含めます：</para>
        <sample id="useGroovyPlugin" dir="groovy/quickstart" title="Groovyプラグインの使用 / Using the Groovy plugin">
            <sourcefile file="build.gradle" snippet="use-plugin"/>
        </sample>
    </section>

    <section>
        <title>タスク<phrase role="original">Tasks</phrase></title>
        <para role="original">The Groovy plugin adds the following tasks to the project.</para>
        <para>Groovyプラグインは、以下のタスクをプロジェクトに追加します。</para>
        <table>
            <title>Groovyプラグイン - タスク<phrase role="original">Groovy plugin - tasks</phrase></title>
            <thead>
                <tr>
                    <td>タスク名<phrase role="original">Task name</phrase></td>
                    <td>依存先<phrase role="original">Depends on</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>説明<phrase role="original">Description</phrase></td>
                </tr>
            </thead>
            <tr>
                <td><literal>compileGroovy</literal></td>
                <td><literal>compileJava</literal></td>
                <td><apilink class="org.gradle.api.tasks.compile.GroovyCompile"/></td>
                <td>製品のGroovyソースファイルをコンパイルする<phrase role="original">Compiles production Groovy source files.</phrase></td>
            </tr>
            <tr>
                <td><literal>compileTestGroovy</literal></td>
                <td><literal>compileTestJava</literal></td>
                <td><apilink class="org.gradle.api.tasks.compile.GroovyCompile"/></td>
                <td>テストのGroovyソースファイルをコンパイルする<phrase role="original">Compiles test Groovy source files.</phrase></td>
            </tr>
            <tr>
                <td><literal>compile<replaceable>SourceSet</replaceable>Groovy</literal></td>
                <td><literal>compile<replaceable>SourceSet</replaceable>Java</literal></td>
                <td><apilink class="org.gradle.api.tasks.compile.GroovyCompile"/></td>
                <td>特定のソースセットのGroovyソースファイルをコンパイルする<phrase role="original">Compiles the given source set's Groovy source files.</phrase></td>
            </tr>
            <tr>
                <td><literal>groovydoc</literal></td>
                <td>-</td>
                <td><apilink class="org.gradle.api.tasks.javadoc.Groovydoc"/></td>
                <td>製品のGroovyソースファイルのAPIドキュメントを生成する<phrase role="original">Generates API documentation for the production Groovy source files.</phrase></td>
            </tr>
        </table>
        <para role="original">The Groovy plugin adds the following dependencies to tasks added by the Java plugin.</para>
        <para>Groovyプラグインは、Javaプラグインによって追加されたタスクに以下の依存関係を追加します。</para>
        <table>
            <title>Groovyプラグイン - タスクの追加依存関係<phrase role="original">Groovy plugin - additional task dependencies</phrase></title>
            <thead>
                <td>タスク名<phrase role="original">Task name</phrase></td>
                <td>依存先<phrase role="original">Depends on</phrase></td>
            </thead>
            <tr>
                <td>classes</td>
                <td>compileGroovy</td>
            </tr>
            <tr>
                <td>testClasses</td>
                <td>compileTestGroovy</td>
            </tr>
            <tr>
                <td><replaceable>sourceSet</replaceable>Classes</td>
                <td>compile<replaceable>SourceSet</replaceable>Groovy</td>
            </tr>
        </table>
        <figure>
            <title>Groovyプラグイン - タスク<phrase role="original">Groovy plugin - tasks</phrase></title>
            <imageobject>
                <imagedata fileref="img/groovyPluginTasks.png"/>
            </imageobject>
        </figure>
    </section>

    <section>
        <title>プロジェクトレイアウト<phrase role="original">Project layout</phrase></title>
        <para role="original">The Groovy plugin assumes the project layout shown in <xref linkend='groovylayout'/>. All the Groovy
            source directories can contain Groovy <emphasis>and</emphasis> Java code. The Java source directories may
            only contain Java source code.
            <footnote>
                <para role="original">We are using the same conventions as introduced by Russel Winder's Gant tool (<ulink
                        url='http://gant.codehaus.org'/>).
                </para>
            </footnote>
            None of these directories need to exist or have anything in them; the Groovy plugin will simply compile
            whatever it finds.
        </para>
        <para>Groovyプラグインでは、<xref linkend='groovylayout'/>に示したようなプロジェクトレイアウトを想定しています。すべてのGroovyソースディレクトリは、Groovy<emphasis>および</emphasis>Javaコードを含むことができます。Javaソースディレクトリは、Javaソースコードだけしか含むことができません。
            <footnote>
                <para>Russel WinderのGant (<ulink
                        url='http://gant.codehaus.org'/>)が導入したのと同じ規約を使っています。
                </para>
            </footnote>
            これらのどのディレクトリも、存在しなかったり、何も含んでいなくてもかまいません。Groovyプラグインは、単純に見つけたディレクトリをコンパイルするだけです。
        </para>

        <table id='groovylayout'>
            <title>Groovyプラグイン - プロジェクトレイアウト<phrase role="original">Groovy plugin - project layout</phrase></title>
            <thead>
                <tr>
                    <td>ディレクトリ<phrase role="original">Directory</phrase></td>
                    <td>意味<phrase role="original">Meaning</phrase></td>
                </tr>
            </thead>
            <xi:include href="javaProjectMainLayout.xml"/>
            <tr>
                <td>
                    <filename>src/main/groovy</filename>
                </td>
                <td>製品のGroovyソース。ジョイントコンパイルするJavaソースを含んでもよい<phrase role="original">Production Groovy sources. May also contain Java sources for joint compilation.</phrase></td>
            </tr>
            <xi:include href="javaProjectTestLayout.xml"/>
            <tr>
                <td>
                    <filename>src/test/groovy</filename>
                </td>
                <td>テストのGroovyソース。ジョイントコンパイルするJavaソースを含んでもよい<phrase role="original">Test Groovy sources. May also contain Java sources for joint compilation.</phrase></td>
            </tr>
            <xi:include href="javaProjectGenericLayout.xml"/>
            <tr>
                <td>
                    <filename>src/<replaceable>sourceSet</replaceable>/groovy</filename>
                </td>
                <td>特定のソースセットのGroovyソース。ジョイントコンパイルするJavaソースを含んでもよい<phrase role="original">Groovy sources for the given source set. May also contain Java sources for joint compilation.</phrase></td>
            </tr>
        </table>

        <section>
            <title>プロジェクトレイアウトの変更<phrase role="original">Changing the project layout</phrase></title>
            <para role="original">Just like the Java plugin, the Groovy plugin allows to configure custom locations for Groovy production and test sources.</para>
            <para>Javaプラグインと同じように、Groovyプラグインも製品コードやテストコードの場所を変更することができます。</para>
            <sample id="customGroovySourceLayout" dir="groovy/customizedLayout" title="Groovyソースレイアウトのカスタマイズ / Custom Groovy source layout">
                <sourcefile file="build.gradle" snippet="custom-source-locations"/>
            </sample>
        </section>
        
    </section>

    <section>
        <title>依存関係の管理 <phrase role="original">Dependency management</phrase></title>
        <para role="original">Because Gradle's build language is based on Groovy, and parts of Gradle are implemented in Groovy, Gradle already ships
            with a Groovy library (1.8.6 as of Gradle 1.6). Nevertheless, Groovy projects need to explicitly declare a Groovy dependency.
            This dependency will then be used on compile and runtime class paths. It will also be used to get hold of the Groovy compiler
            and Groovydoc tool, respectively.
        </para>
        <para>Gradleのビルド言語はGroovyをベースにしており、Gradleの一部もGroovyで実装されているので、Gradleには既にGroovyライブラリ（Gradle1.3からは1.8.6）が同梱されています。ですが、Groovyプロジェクトでは明示的にGroovyへの依存関係を宣言しなければなりません。
            ここで宣言したGroovyへの依存関係は、コンパイルクラスパスおよび実行時クラスパスに追加されます。さらに、GroovyコンパイラおよびGroovydocツールを取得するのにも使用されます。
        </para>
        <para role="original">
            If Groovy is used for production code, the Groovy dependency should be added to the <literal>compile</literal>
            configuration:
        </para>
        <para>Groovyが製品コードで使われている場合は、Groovy依存関係は<literal>compile</literal>コンフィギュレーションに追加してください。</para>
        <sample id="quickstartGroovyDependency" dir="groovy/quickstart" title="Groovyプラグインの設定 / Configuration of Groovy plugin">
            <sourcefile file="build.gradle" snippet="groovy-dependency"/>
        </sample>
        <para role="original">
            If Groovy is only used for test code, the Groovy dependency should be added to the <literal>testCompile</literal>
            configuration:
        </para>
        <para>Groovyがテストコードのみで使われている場合は、Groovy依存関係は<literal>testCompile</literal>コンフィギュレーションに追加してください。</para>
        <sample id="groovyTestDependency" dir="userguide/groovy/groovyDependency" title="Groovyテスト用の依存関係設定 / Configuration of Groovy test dependency">
            <sourcefile file="build.gradle" snippet="groovy-test-dependency"/>
        </sample>
        <para role="original">
            To use the Groovy library that ships with Gradle, declare a <literal>localGroovy()</literal> dependency. Note that
            different Gradle versions ship with different Groovy versions; as such, using <literal>localGroovy()</literal> is less
            safe then declaring a regular Groovy dependency.
        </para>
        <para>
            Gradleに同梱されているGroovyを使うには、<literal>localGroovy()</literal>を依存関係で宣言してください。ただ注意してほしいのは、Gradleのバージョンが異なれば同梱されているGroovyのバージョンも異なる可能性があるということです。<literal>localGroovy()</literal>は、普通の宣言方法に比べると安全とは言えません。
        </para>
        <sample id="bundledGroovyDependency" dir="userguide/groovy/groovyDependency" title="同梱のGroovyを使用する依存関係設定 / Configuration of bundled Groovy dependency">
            <sourcefile file="build.gradle" snippet="bundled-groovy-dependency"/>
        </sample>
        <para role="original">The Groovy library doesn't necessarily have to come from a remote repository. It could also come from a local
            <literal>lib</literal> directory, perhaps checked in to source control:</para>
        <para>Groovyライブラリは、必ずしもリモートのリポジトリから取得しなければならないわけではありません。ローカルの<literal>lib</literal>ディレクトリなどに格納して、ソースコード管理システムにチェックインしたりすることもできます。</para>
        <sample id="groovyFileDependency" dir="userguide/tutorial/groovyWithFlatDir" title="Groovyをファイル依存関係で設定する / Configuration of Groovy file dependency">
            <sourcefile file="build.gradle" snippet="groovy-dependency"/>
        </sample>

    </section>

    <section>
        <title>Groovyクラスパスの自動設定 <phrase role="original">Automatic configuration of groovyClasspath</phrase></title>
        <para role="original">
            <literal>GroovyCompile</literal> and <literal>Groovydoc</literal> tasks consume Groovy in two ways: on their <literal>classpath</literal>,
            and on their <literal>groovyClasspath</literal>. The former is used to locate classes referenced by the source code, and will typically
            contain the Groovy library along with other libraries. The latter is used to load and execute the Groovy compiler and Groovydoc tool,
            respectively, and should only contain the Groovy library and its dependencies.
        </para>
        <para><literal>GroovyCompile</literal>タスクと<literal>Groovydoc</literal>タスクは二つの用途でGroovyを使用します。タスクの<literal>classpath</literal>と<literal>groovyClasspath</literal>です。前者はソースコードから参照されているクラスを配置するパスで、Groovyライブラリも典型的には他のライブラリと一緒に格納されます。後者はGroovyコンパイラとGroovydocツールをロードして実行するために使用されるパスで、Groovyライブラリとその依存関係のみが配置されていなければなりません。</para>
        <para><phrase role="original">
            Unless a task's <literal>groovyClasspath</literal> is configured explicitly, the Groovy (base) plugin will try to infer it
            from the task's <literal>classpath</literal>. This is done as follows:
            </phrase>
            <literal>groovyClasspath</literal>が明示的に設定されていない場合、Groovy(base)プラグインはタスクの<literal>classpath</literal>から以下のように設定値を推論しようとします。
            <itemizedlist>
                <listitem><phrase role="original">
                    If a <literal>groovy-all(-indy)</literal> Jar is found on <literal>classpath</literal>, the same Jar will be added to
                    <literal>groovyClasspath</literal>.</phrase>
                    <literal>groovy-all(-indy)</literal>のJarが<literal>classpath</literal>に見つかれば、同じJarを<literal>groovyClasspath</literal>にも追加します。
                </listitem>
                <listitem><phrase role="original">
                    If a <literal>groovy(-indy)</literal> Jar is found on <literal>classpath</literal>, and the project has at least one repository declared,
                    a corresponding <literal>groovy(-indy)</literal> repository dependency will be added to <literal>groovyClasspath</literal>.</phrase>
                    <literal>groovy(-indy)</literal>のJarが<literal>classpath</literal>に見つかれば、そして少なくとも一つのリポジトリがプロジェクトに設定されていれば、リポジトリから対応する<literal>groovy(-indy)</literal>の依存関係を取得して<literal>groovyClasspath</literal>に追加します。
                </listitem>
                <listitem>
                    <phrase role="original">Otherwise, execution of the task will fail with a message saying that <literal>groovyClasspath</literal> could not be inferred.</phrase>
                    それ以外の場合は、<literal>groovyClasspath</literal>の推論に失敗した旨のメッセージを出力してタスクは失敗します。
                </listitem>
            </itemizedlist>
        </para>
    </section>

    <section>
        <title>規約プロパティ<phrase role="original">Convention properties</phrase></title>
        <para role="original">The Groovy plugin does not add any convention properties to the project.</para>
        <para>Groovyプラグインは、プロジェクトには規約プロパティを追加しません。</para>
    </section>

    <section>
        <title>ソースセットプロパティ<phrase role="original">Source set properties</phrase></title>
        <para role="original">The Groovy plugin adds the following convention properties to each source set in the project. You can
            use these properties in your build script as though they were properties of the source set object (see
            <xref linkend="sub:more_about_convention_objects"/>).</para>
        <para>Groovyプラグインは、プロジェクトの各ソースセットに以下の規約プロパティを追加します。これらのプロパティは、あたかもソースセットオブジェクトのプロパティであるかのようにビルドスクリプト内で使うことができます(<xref linkend="sub:more_about_convention_objects"/>参照)。</para>
        <table>
            <title>Groovyプラグイン - ソースセットプロパティ<phrase role="original">Groovy plugin - source set properties</phrase></title>
            <thead>
                <tr>
                    <td>プロパティ名<phrase role="original">Property name</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>デフォルト値<phrase role="original">Default value</phrase></td>
                    <td>説明<phrase role="original">Description</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>groovy</literal>
                </td>
                <td>
                    <apilink class="org.gradle.api.file.SourceDirectorySet"/> (読取り専用)
                    <phrase role="original"><apilink class="org.gradle.api.file.SourceDirectorySet"/> (read-only)</phrase>
                </td>
                <td>
                    非null
                    <phrase role="original">Not null</phrase>
                </td>
                <td>
                    このソースセットのGroovyソースファイル。Groovyソースディレクトリにある、すべての<filename>.groovy</filename>と<filename>.java</filename>ファイルを含み、その他のタイプのファイルは含まない
                    <phrase role="original">The Groovy source files of this source set. Contains all <filename>.groovy</filename> and
                    <filename>.java</filename> files found in the Groovy source directories, and excludes all other
                    types of files.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>groovy.srcDirs</literal>
                </td>
                <td>
                    <classname>Set&lt;File></classname>。<xref linkend="sec:specifying_multiple_files"/>で説明されたものなら何でも設定可能
                    <phrase role="original"><classname>Set&lt;File></classname>. Can set using anything described in <xref linkend="sec:specifying_multiple_files"/>.</phrase>
                </td>
                <td>
                    <literal>[<replaceable>projectDir</replaceable>/src/<replaceable>name</replaceable>/groovy]</literal>
                </td>
                <td>
                    このソースセットのGroovyソースファイルを含むソースディレクトリ。ジョイントコンパイルするJavaソースファイルも含む場合がある
                    <phrase role="original">The source directories containing the Groovy source files of this source set. May also contain
                    Java source files for joint compilation.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>allGroovy</literal>
                </td>
                <td>
                    <apilink class="org.gradle.api.file.FileTree"/> (読取り専用)
                    <phrase role="original"><apilink class="org.gradle.api.file.FileTree"/> (read-only)</phrase>
                </td>
                <td>
                    非null
                    <phrase role="original">Not null</phrase>
                </td>
                <td>
                    このソースセットの全Groovyソースファイル。Groovyソースディレクトリにある<filename>.groovy</filename>ファイルのみを含む
                    <phrase role="original">All Groovy source files of this source set. Contains only the <filename>.groovy</filename> files
                    found in the Groovy source directories.</phrase>
                </td>
            </tr>
        </table>
        <para role="original">These properties are provided by a convention object of type <apilink class="org.gradle.api.tasks.GroovySourceSet"/>.</para>
        <para>上記プロパティは<apilink class="org.gradle.api.tasks.GroovySourceSet"/>型の規約オブジェクトにより提供されます。</para>
        <para role="original">The Groovy plugin also modifies some source set properties:</para>
        <para>また、Groovyプラグインは、いくつかのソースセットプロパティを修正します：</para>
        <table>
            <title>Groovyプラグイン - ソースセットプロパティ<phrase role="original">Groovy plugin - source set properties</phrase></title>
            <thead>
                <tr>
                    <td>プロパティ名<phrase role="original">Property name</phrase></td>
                    <td>変更点<phrase role="original">Change</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>allJava</literal>
                </td>
                <td>Groovyソースディレクトリにあるすべての<filename>.java</filename>ファイルを追加<phrase role="original">Adds all <filename>.java</filename> files found in the Groovy source directories.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>allSource</literal>
                </td>
                <td>Groovyソースディレクトリにあるすべてのソースファイルを追加<phrase role="original">Adds all source files found in the Groovy source directories.</phrase></td>
            </tr>
        </table>

    </section>

    <section id='sec:groovyCompile'>
        <title>GroovyCompile</title>
        <para role="original">The Groovy plugin adds a <apilink class="org.gradle.api.tasks.compile.GroovyCompile"/> task for
            each source set in the project. The task type extends the <literal>JavaCompile</literal>
            task (see <xref linkend='sec:compile'/>). Unless <literal>groovyOptions.useAnt</literal> is set to <literal>true</literal>,
            Gradle's native Groovy compiler integration is used. For most projects, this is the better choice than the Ant-based compiler.
            The <literal>GroovyCompile</literal> task supports most configuration options of the official Groovy compiler.
        </para>
        <para>Groovyプラグインは、プロジェクトの各ソースセットに<apilink class="org.gradle.api.tasks.compile.GroovyCompile"/>タスクを追加します。このタスクは<literal>JavaCompile</literal>タスクを拡張したものです(<xref linkend='sec:compile'/>参照)。<literal>groovyOptions.useAnt</literal>がtrueになっていなければ、GradleネイティブのGroovyコンパイラ統合が使用されます。Antベースのコンパイラを使うこともできますが、ほとんどのプロジェクトではネイティブのGroovyコンパイラを使ったほうがいいでしょう。
            この<literal>GroovyCompile</literal>タスクは、公式Groovyコンパイラのオプションをほとんど全てサポートしています。
        </para>
        <table>
            <title>Groovyプラグイン - GroovyCompileプロパティ<phrase role="original">Groovy plugin - GroovyCompile properties</phrase></title>
            <thead>
                <tr>
                    <td>タスクプロパティ<phrase role="original">Task Property</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>デフォルト値<phrase role="original">Default Value</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>classpath</literal>
                </td>
                <td><apilink class="org.gradle.api.file.FileCollection"/></td>
                <td><literal><replaceable>sourceSet</replaceable>.compileClasspath</literal></td>
            </tr>
            <tr>
                <td>
                    <literal>source</literal>
                </td>
                <td><apilink class="org.gradle.api.file.FileTree"/>。<xref linkend="sec:specifying_multiple_files"/>で説明されたものなら何でも設定可能<phrase role="original"><apilink class="org.gradle.api.file.FileTree"/>. Can set using anything described in <xref linkend="sec:specifying_multiple_files"/>.</phrase></td>
                <td><literal><replaceable>sourceSet</replaceable>.groovy</literal></td>
            </tr>
            <tr>
                <td>
                    <literal>destinationDir</literal>
                </td>
                <td><classname>File</classname>.</td>
                <td><literal><replaceable>sourceSet</replaceable>.output.classesDir</literal></td>
            </tr>
            <tr>
                <td>
                    <literal>groovyClasspath</literal>
                </td>
                <td><apilink class="org.gradle.api.file.FileCollection"/></td>
                <td><literal>groovy</literal> configuration if non-empty; Groovy library found on <literal>classpath</literal> otherwise</td>
            </tr>
        </table>
    </section>
</chapter>
