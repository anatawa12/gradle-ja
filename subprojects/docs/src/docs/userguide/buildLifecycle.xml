<!--
  ~ Copyright 2009 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='build_lifecycle' xml:lang="ja">
    <title>ビルドのライフサイクル<phrase role="original">The Build Lifecycle</phrase></title>
    <para role="original">We said earlier, that the core of Gradle is a language for dependency based programming. In Gradle terms this
        means that you can define tasks and dependencies between tasks. Gradle guarantees that these tasks are executed
        in the order of their dependencies, and that each task is executed only once. Those tasks form a
        <ulink url='http://en.wikipedia.org/wiki/Directed_acyclic_graph'>Directed Acyclic Graph</ulink>. There are
        build tools that build up such a dependency graph as they execute their tasks. Gradle builds the complete
        dependency graph <emphasis>before</emphasis> any task is executed. This lies at the heart of Gradle and makes
        many things possible which would not be possible otherwise.
    </para>
    <para>前述の通り、Gradleというのは言ってしまえば依存性を記述する言語です。Gradleの用語でいえば、タスクとタスク間の依存関係を定義できる言語だということです。Gradleは、定義したタスクが定義した依存性に従って順に、またそれぞれ一回のみ実行されることを保証します。Gradleのタスクは、お互いの依存性により<ulink url="http://en.wikipedia.org/wiki/Directed_acyclic_graph">無閉路有向グラフ(DAG)</ulink>を構築するのです。タスクを実行するときにこのようなタスクグラフを組み立てるビルドツールもありますが、Gradleではまずタスクグラフを完全に構築してからタスクを実行していきます。このことはGradleのもっとも重要な概念であり、このメカニズムによりたくさんのことを可能にしているのです。</para>
    <para role="original">Your build scripts configure this dependency graph. Therefore they are strictly speaking <emphasis>build
        configuration scripts</emphasis>.
    </para>
    <para>ビルドスクリプトは、このタスクグラフを定義します。したがって、ビルドスクリプトとは、厳密には<emphasis>ビルド設定スクリプト</emphasis>だと言えるでしょう。</para>
    <section id='sec:build_phases'>
        <title>ビルドフェーズ<phrase role="original">Build phases</phrase></title>
        <para role="original">A Gradle build has three distinct phases.
        </para>
        <para>Gradleには、独立した三つのビルドフェーズがあります。</para>
        <variablelist>
            <varlistentry>
                <term>初期化<phrase role="original">Initialization</phrase></term>
                <listitem>
                    <para role="original">Gradle supports single and multi-project builds. During the initialization phase, Gradle
                        determines which projects are going to take part in the build, and creates a
                        <apilink class="org.gradle.api.Project"/> instance for each of these projects.
                    </para>
                    <para>Gradleはシングルプロジェクト、マルチプロジェクトの双方をサポートします。初期化フェーズでは、どのプロジェクトがビルドに参加しているのか決定し、<apilink class="org.gradle.api.Project">Project</apilink>インスタンスを生成します。</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>設定<phrase role="original">Configuration</phrase></term>
                <listitem>
                    <para role="original">During this phase the project objects are configured.
                        The build scripts of <emphasis>all</emphasis> projects which are part of the build are
                        executed. Gradle 1.4 introduces an incubating opt-in feature called 'configuration on demand'.
                        In this mode, Gradle configures only relevant projects (see <xref linkend="sec:configuration_on_demand"/>).
                    </para>
                    <para>プロジェクトのオブジェクトが設定されるフェーズです。ビルドに参加している<emphasis>すべて</emphasis>のプロジェクトのビルドスクリプトが実行されます。
                        Gradle1.4では、試験的に「オンデマンド設定」という機能を選択できます。
                        オンデマンド設定モードでは、Gradleは全てのプロジェクトではなく、ビルドに関係するプロジェクトのみを設定します。
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>実行<phrase role="original">Execution</phrase></term>
                <listitem>
                    <para role="original">Gradle determines the subset of the tasks, created and configured during the configuration
                        phase, to be executed. The subset is determined by the task name arguments passed to the
                        <command>gradle</command> command and the current directory. Gradle then executes each of the
                        selected tasks.
                    </para>
                    <para>設定フェーズで初期化と設定が完了したタスクのうち、実行するべきタスクを抽出して実行します。実行するタスクは、<command>gradle</command>コマンドに引き渡されたタスク名と、コマンドの実行ディレクトリから決定されます。</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>
    <section id='sec:settings_file'>
        <title>設定ファイル<phrase role="original">Settings file</phrase></title>
        <para role="original">Beside the build script files, Gradle defines a settings file. The settings file is determined by Gradle
            via a naming convention. The default name for this file is <filename>settings.gradle</filename>. Later in
            this chapter we explain, how Gradle looks for a settings file.
        </para>
        <para>ビルドスクリプトの他、Gradleではビルドの「設定ファイル」を作成することができます。設定ファイルの場所はGradleの規約により決定され、デフォルトではプロジェクトディレクトリの<filename>settings.gradle</filename>です。この設定ファイルをGradleがどのように探すのかについては、後ほど解説します。</para>
        <para role="original">The settings file gets executed during the initialization phase. A multiproject build must have a
            <filename>settings.gradle</filename>
            file in the root project of the multiproject hierarchy. It is required because in the
            settings file it is defined, which projects are taking part in the multi-project build (see
            <xref linkend='multi_project_builds'/>). For a single-project build, a settings file is optional.
            You might need it for example, to add libraries to your build script classpath (see <xref
                    linkend='organizing_build_logic'/>). Let's first do some introspection with a single project
            build:
        </para>
        <para>設定ファイルは、初期化フェーズで使用されます。マルチプロジェクトの場合、<filename>settings.gradle</filename>ファイルは必須です。ルートとなるプロジェクトに必ず配置しなければなりません。この設定ファイルにより、どのプロジェクトがビルドに参加するか決定するからです(<xref linkend='multi_project_builds'/>参照)。シングルプロジェクトの場合は設定ファイルはなくてもかまいません。ビルドスクリプトのクラスパスにライブラリを追加するときなどはこの設定ファイルを使うこともあるでしょう(<xref linkend='organizing_build_logic'/>参照)。設定ファイルの読み込み、フェーズ実行の内部動作を、シングルプロジェクトの例を使って見てみます。</para>
        <sample id="buildlifecycle" dir="userguide/buildlifecycle/basic" title="シングルプロジェクトのビルド / Single project build">
            <sourcefile file="settings.gradle"/>
            <sourcefile file="build.gradle"/>
            <output args="test"/>
        </sample>
        <para role="original">For a build script, the property access and method calls are delegated to a project object. Similarly
            property access and method calls within the settings file is delegated to a settings object. Have a look at
            <apilink class='org.gradle.api.initialization.Settings'/>.
        </para>
        <para>ビルドスクリプト内でのプロパティアクセスやメソッド呼び出しは、Projectインスタンスに委譲されますが、それと同様に設定ファイル内でのプロパティアクセス、メソッド呼び出しはsettingsインスタンスに委譲されます。<apilink class='org.gradle.api.initialization.Settings'>Settings</apilink>をご参照ください。</para>
    </section>
    <section id='sec:multi_project_builds'>
        <title>マルチプロジェクトのビルド<phrase role="original">Multi-project builds</phrase></title>
        <para role="original">A multi-project build is a build where you build more than one project during a single execution of
            Gradle. You have to declare the projects taking part in the multiproject build in the settings file. There
            is much more to say about multi-project builds in the chapter dedicated to this topic (see <xref
                    linkend='multi_project_builds'/>).
        </para>
        <para>マルチプロジェクトとは、ある一つのプロジェクトをビルドしているときに、関連する別のプロジェクトも呼び出されてビルドされるよう構成されたプロジェクトの集まりです。マルチプロジェクトのビルドにプロジェクトを参加させるには、設定ファイルでそのことを宣言しなくてはなりません。マルチプロジェクトについては、専用の章をもうけて詳しく説明します(<xref linkend="multi_project_builds"/>参照)。</para>
        <section id='sub:project_locations'>
            <title>プロジェクトの配置<phrase role="original">Project locations</phrase></title>
            <para role="original">Multi-project builds are always represented by a tree with a single root. Each element in the tree
                represents a project. A project has a path which denotes the position
                of the project in the multi-project build tree. In majority of cases the project path is consistent with
                the physical location of the project in the file system. However, this behavior is configurable.
                The project tree is created in the <filename>settings.gradle</filename> file.
                By default it is assumed that the location of the settings
                file is also the location of the root project. But you can redefine the location of the root project
                in the settings file.
            </para>
            <para>
            マルチプロジェクトは、常に、あるプロジェクトをルートにしたプロジェクトのツリー構造となります。
            マルチプロジェクト・ツリーを構成するそれぞれのプロジェクトは、自分がツリー内のどこに位置しているかを示すパス情報を持っています。
            ほとんどのケースで、そのパス情報は、ファイルシステム上でのプロジェクトの物理的な位置を反映したものになるはずです。
            ただし、これは設定で変更することも可能です。
            プロジェクト・ツリーは、<filename>settings.gradle</filename>ファイルで作成します。
            デフォルトでは、<filename>settings.gradle</filename>ファイルがあるプロジェクトがルートプロジェクトになっていますが、ルートプロジェクトの位置もその設定ファイルで変更可能です。
            </para>
        </section>
        <section id='sub:building_the_tree'>
            <title>プロジェクト・ツリーの構築<phrase role="original">Building the tree</phrase></title>
            <para role="original">In the settings file you can use a set of methods to build the project tree. Hierarchical and flat
                physical layouts get special support.
            </para>
            <para>設定ファイル内では、プロジェクト・ツリーを構築するためのメソッドを使用できます。これらのメソッドでは、プロジェクトを実際に配置するレイアウトとして、階層構造とフラットな構造の二つをサポートしています。</para>
            <section>
                <title>階層構造のレイアウト<phrase role="original">Hierarchical layouts</phrase></title>
                <sample id="standardLayouts" dir="userguide/multiproject/standardLayouts" title="階層構造のレイアウト / Hierarchical layout">
                    <sourcefile file="settings.gradle" snippet="hierarchical-layout"/>
                </sample>
                <para role="original">The <literal>include</literal> method takes project paths as arguments.
                    The project path is assumed to be equal to the relative physical file system path.
                    For example a path 'services:api' by default is mapped to a folder 'services/api'
                    (relative from the project root). You only need to specify the leafs of the tree.
                    This means that the inclusion of path 'services:hotels:api' will result in creating 3 projects:
                    'services', 'services:hotels' and 'services:hotels:api'.
                </para>
                <para>
                <literal>include</literal>メソッドは、プロジェクトのパスを引数にとります。
                このパスは、ファイルシステム上の物理的な相対パスを表したものです。
                例えば、'services:api'というパスは、デフォルトでは'services/api'フォルダ(プロジェクトルートからの相対)にマッピングされます。
                指定するのは、ツリーの末端となるプロジェクトだけで構いません。
                つまり、'services:hotels:api'を指定しただけで3つのプロジェクトが作成されるということです('services'、'services:hotels'、'services:hotels:api')。
                </para>
            </section>
            <section>
                <title>フラットなレイアウト<phrase role="original">Flat layouts</phrase></title>
                <sample id="standardLayouts" dir="userguide/multiproject/standardLayouts" title="フラットなレイアウト / Flat layout">
                    <sourcefile file="settings.gradle" snippet="flat-layout"/>
                </sample>
                <para role="original">The <literal>includeFlat</literal> method takes directory names as an argument. Those directories
                    need to exist at the same level as the root project directory. The location of those directories
                    are considered as child projects of the root project in the multi-project tree.
                </para>
                <para><literal>includeFlat</literal>メソッドは、ディレクトリ名を引数にとります。これらのディレクトリはルートプロジェクトのディレクトリと同じ階層になければなりませんが、マルチプロジェクト・ツリーにおいてはルートプロジェクトの子プロジェクトに設定されます。</para>
            </section>
        </section>
        <section id='sub:modifying_element_of_the_project_tree'>
            <title>プロジェクト・ツリーの属性を変更する<phrase role="original">Modifying elements of the project tree</phrase></title>
            <para role="original">The multi-project tree created in the settings file is made up of so called <firstterm>project descriptors</firstterm>.
                You can modify these descriptors in the settings file at any time. To access a descriptor you can do:
            </para>
            <para>設定ファイルで定義したプロジェクト・ツリーは、<firstterm>プロジェクトディスクリプタ</firstterm>と呼ばれる属性を持っています。これらの属性は設定ファイルの中でいつでも変更することができます。ディスクリプタには、以下のようにしてアクセスできます。</para>
            <sample id="customLayout" dir="userguide/multiproject/customLayout" title="プロジェクト・ツリーの属性を変更する / Modification of elements of the project tree">
                <sourcefile file="settings.gradle" snippet="lookup-project"/>
            </sample>
            <para role="original">Using this descriptor you can change the name, project directory and build file of a project.
            </para>
            <para>ディスクリプタを使用して、プロジェクト名やプロジェクトディレクトリ、プロジェクトのビルドスクリプト名を変更できます。</para>
            <sample id="customLayout" dir="userguide/multiproject/customLayout" title="プロジェクトツリーの属性を変更する / Modification of elements of the project tree">
                <sourcefile file="settings.gradle" snippet="change-project"/>
            </sample>
            <para role="original">Have a look at <apilink class="org.gradle.api.initialization.ProjectDescriptor"/> for more details.</para>
            詳細については<apilink class="org.gradle.api.initialization.ProjectDescriptor"/>をご参照ください。
        </section>
    </section>
    <section id='sec:initialization'>
        <title>初期化<phrase role="original">Initialization</phrase></title>
        <para role="original">How does Gradle know whether to do a single or multiproject build? If you trigger a multiproject build
            from the directory where the settings file is, things are easy. But Gradle also allows you to execute the
            build from within any subproject taking part in the build.
            <footnote>
                <para role="original">Gradle supports partial multiproject builds (see <xref linkend='multi_project_builds'/>).
                </para>
            </footnote>
            If you execute Gradle from within a project that has no <filename>settings.gradle</filename> file,
            Gradle does the following:
        </para>
        <para>Gradleは、現在ビルドしているものがマルチプロジェクトかシングルプロジェクトか、どうやって知るのでしょう。マルチプロジェクトのビルドを、設定ファイルのあるディレクトリから起動しているなら話は簡単ですが、Gradleはサブプロジェクトのディレクトリからビルドを実行することもできるようになっています。
            <footnote>
                <para>Gradleは、マルチプロジェクトに含まれる一部のプロジェクトのみ部分的にビルドできる(<xref linkend="multi_project_builds"/>参照)</para>
            </footnote>
            Gradleは、<filename>settings.gradle</filename>のないディレクトリで実行された場合、以下のように動作します。
        </para>
        <itemizedlist>
            <listitem>
                <para role="original">It searches for a <filename>settings.gradle</filename> in a directory called <filename>master</filename>
                    which has the same nesting level as the current dir.
                </para>
                <para>カレントディレクトリと同階層のディレクトリから<filename>master</filename>という名前のディレクトリを探し、<filename>settings.gradle</filename>があるかどうか確認する。</para>
            </listitem>
            <listitem>
                <para role="original">If no <filename>settings.gradle</filename> is found, it searches the parent directories for the existence of a
                    <filename>settings.gradle</filename> file.
                </para>
                <para><filename>settings.gradle</filename>が見つからなければ、親階層のディレクトリをたどっていって<filename>settings.gradle</filename>がないか確認する。</para>
            </listitem>
            <listitem>
                <para role="original">If no <filename>settings.gradle</filename> file is found, the build is executed as a single project build.
                </para>
                <para><filename>settings.gradle</filename>が見つからなければ、シングルプロジェクトとしてビルドする。</para>
            </listitem>
            <listitem>
                <para role="original">If a <filename>settings.gradle</filename> file is found, Gradle checks if the current project is part of the
                    multiproject hierarchy defined in the found <filename>settings.gradle</filename> file. If not, the build is executed as a
                    single project build. Otherwise a multiproject build is executed.
                </para>
                <para><filename>settings.gradle</filename>が見つかれば、Gradleはビルドを実行したプロジェクトがマルチプロジェクトに参加するよう宣言されているかどうか確認する。宣言が確認できればマルチプロジェクトとしてビルドするが、確認できなければ、現在のプロジェクトをシングルプロジェクトとしてビルドする。</para>
            </listitem>
        </itemizedlist>
        <para role="original">What is the purpose of this behavior? Somehow Gradle has to find out, whether the project you are into, is
            a subproject of a multiproject build or not. Of course, if it is a subproject, only the subproject and its
            dependent projects are build. But Gradle needs to create the build configuration for the whole multiproject
            build (see <xref linkend='multi_project_builds'/>). Via the <option>-u</option>
            command line option, you can tell Gradle not to look in the parent hierarchy for a <filename>settings.gradle</filename> file. The
            current project is then always build as a single project build. If the current project contains a
            <filename>settings.gradle</filename> file, the <option>-u</option> option has no meaning. Such a build is always executed as:
        </para>
        <para>なんのためにこのような振る舞いをするのでしょう。今からビルドするプロジェクトは、マルチプロジェクトのうちの一サブプロジェクトでしょうか。それとも、単なるシングルプロジェクトなのでしょうか。Gradleは、それを何とか決定しなくてはなりません。サブプロジェクトだった場合、Gradleはプロジェクト・ツリー全体の設定情報を作成する必要があるからです。ビルド対象がそのサブプロジェクトのみだったとしてもです(<xref linkend="multi_project_builds"/>参照)。<option>-u</option>オプションをつけてGradleを実行すれば、親階層をたどって<filename>settings.gradle</filename>を探しに行くことはありません。つまり、(settings.gradleのない)現在ビルドしているプロジェクトは、常にシングルプロジェクトだと認識されるわけです。現在のプロジェクトに<filename>settings.gradle</filename>がある場合は、<option>-u</option>をつけても意味はありません。settings.gradleをもつプロジェクトは以下のように処理されます。</para>
        <itemizedlist>
            <listitem>
                <para role="original">a single project build, if the <filename>settings.gradle</filename> file does not define a multiproject hierarchy
                </para>
                <para><filename>settings.gradle</filename>がマルチプロジェクト・ツリーを定義していない場合はシングルプロジェクトとしてビルド</para>
            </listitem>
            <listitem>
                <para role="original">a multiproject build, if the <filename>settings.gradle</filename> file does define a multiproject hierarchy.
                </para>
                <para><filename>settings.gradle</filename>がマルチプロジェクト・ツリーを定義している場合は、マルチプロジェクトとしてビルド</para>
            </listitem>
        </itemizedlist>
        <para role="original">The auto search for a settings file does only work for multi-project builds with a physical hierarchical
            or flat layout. For a flat layout you must additionally obey to the naming convention described above.
            Gradle supports arbitrary physical layouts for a multiproject build. But for such arbitrary layouts you need
            to execute the build from the directory where the settings file is located. For how to run partial builds
            from the root see <xref linkend='sec:running_partial_build_from_the_root'/>. In our next release we want to
            enable partial builds from subprojects by specifying the location of the settings file as a command line
            parameter. Gradle creates Project objects for every project taking part in the build. For a single
            project build this is only one project. For a multi-project build these are the projects specified in
            Settings object (plus the root project). Each project object has by default a name equals to the name of its
            top level directory. Every project except the root project has a parent project and might have child projects.
        </para>
        <para>この設定ファイルの探索処理は、プロジェクトのディレクトリ構造が前述した階層レイアウトとフラットレイアウトのどちらかであることを想定したものです。さらに、フラットなレイアウトを採用した場合は、前述したような命名規約(settings.gradleをmasterディレクトリに配置する)に従う必要があります。マルチプロジェクト・ツリーはどんなディレクトリ構造からでも構築できますが、その場合は設定ファイルがあるディレクトリでGradleを実行しなければなりません。ルートプロジェクトからでも、一部のプロジェクトのみビルドすることは可能です。<xref linkend="sec:running_partial_build_from_the_root"/>をご参照ください。次のリリースでは、コマンドラインから設定ファイルの場所を指定してやることで、サブプロジェクトからの部分ビルドをサポートする予定です。</para>
        <para>初期化フェーズでは、ビルドに参加しているすべてのプロジェクトについてProjectオブジェクトが作成されます。シングルプロジェクトの場合はひとつだけ作成され、マルチプロジェクトの場合はSettingsオブジェクトで指定されているすべてのプロジェクトと、ルートプロジェクトのProjectオブジェクトが作成されるのです。作成されたProjectオブジェクトはそれぞれ名前を持っています。デフォルトではプロジェクトのディレクトリ名です。また、ルートプロジェクトをのぞく全てのプロジェクトは親プロジェクトを持っていますし、場合によっては子プロジェクトも設定されているかもしれません。</para>
    </section>
    <section id='sec:configuration_and_execution_of_a_single_project_build'>
        <title>シングルプロジェクトの設定と実行<phrase role="original">Configuration and execution of a single project build</phrase></title>
        <para role="original">For a single project build, the workflow of the <emphasis>after initialization</emphasis>
            phases are pretty simple. The build script is executed against the project object that was created during
            the initialization phase. Then Gradle looks for tasks with names equal to those passed as command line
            arguments. If these task names exist, they are executed as a separate build in the order you have passed
            them. The configuration and execution for multi-project builds is discussed in <xref linkend='multi_project_builds'/>.
        </para>
        <para>シングルプロジェクトの場合、<emphasis>初期化フェーズ完了後</emphasis>の処理の流れは非常にシンプルです。まず、初期化フェーズで作成されたプロジェクトのビルドスクリプトが実行されます。それから、Gradleはコマンドライン引数に渡されたタスクを探し、見つかればコマンドライン引数の順に別々に実行されます。マルチプロジェクトにおける設定と実行については、<xref linkend="multi_project_builds"/>を参照してください。</para>
    </section>
    <section id="build_lifecycle_events">
        <title>ライフサイクルからの通知に応答する<phrase role="original">Responding to the lifecycle in the build script</phrase></title>

        <para role="original">Your build script can receive notifications as the build progresses through its lifecycle. These
            notifications generally take 2 forms: You can either implement a particular listener interface, or you can
            provide a closure to execute when the notification is fired. The examples below use closures. For details on
            how to use the listener interfaces, refer to the API documentation.
        </para>
        <para>ビルドスクリプト内では、ビルドがそのライフサイクルに従って進行していくなかで、さまざまな通知を受けとって処理できます。この通知を受けとるには大きく分けて二つの方法があります。ひとつは、特定のリスナーインターフェースを実装する方法、もうひとつは通知を受け取ったときに実行されるクロージャを作成する方法です。ここでは、クロージャを使用する方法について例を見ていきたいと思います。リスナーインターフェースを実装する方法についてはAPIドキュメントをご参照ください。</para>
        <section>
            <title>プロジェクトの評価<phrase role="original">Project evaluation</phrase></title>
            <para role="original">You can receive a notification immediately before and after a project is evaluated. This can be used
                to do things like performing additional configuration once all the definitions in a build script have
                been applied, or for some custom logging or profiling.
            </para>
            <para role="original">Below is an example which adds a <literal>test</literal> task to each project with the
                <literal>hasTests</literal> property set to true.
            </para>
            <para>プロジェクトが評価される前またはされた後すぐに通知を受け取ることができます。これは、ビルドスクリプトが一通り評価された後、さらに追加の設定処理を行ったり、ロギング処理のカスタマイズやプロファイリングなどで使用されます。</para>
            <para>以下の例は、<literal>test</literal>タスクを<literal>hasTests</literal>プロパティを持つすべてのプロジェクトに追加するものです。</para>
            <sample id="projectEvaluateEvents" dir="userguide/buildlifecycle/projectEvaluateEvents" title="特定プロパティを持つプロジェクトにタスクを追加する / Adding of test task to each project which has certain property set">
                <sourcefile file="build.gradle" snippet="after-evaluate"/>
                <sourcefile file="projectA.gradle"/>
                <output args="-q test"/>
            </sample>
            <para role="original">This example uses method <literal>Project.afterEvaluate()</literal> to add a closure which is executed
                after the project is evaluated.</para>
            <para role="original">It is also possible to receive notifications when any project is evaluated. This example performs
                some custom logging of project evaluation. Notice that the <literal>afterProject</literal> notification
                is received regardless of whether the project evaluates successfully or fails with an exception.
            </para>
            <para>この例では、<literal>Project.afterEvaluate()</literal>を使用して、プロジェクト評価後に実行されるクロージャを追加しています。</para>
            <para>プロジェクト評価時の通知は、どんなプロジェクトに対しても受け取ることができます。次の例では、カスタムロギング処理をプロジェクト評価時に実行しています。<literal>afterProject</literal>が、プロジェクトの評価に成功しても例外で失敗しても通知される点に注目してください。</para>
            <sample id="buildProjectEvaluateEvents" dir="userguide/buildlifecycle/buildProjectEvaluateEvents" title="通知 / Notifications">
                <sourcefile file="build.gradle" snippet="evaluate-events"/>
                <output args="-q test"/>
            </sample>
            <para role="original">You can also add a <apilink class="org.gradle.api.ProjectEvaluationListener"/> to the
                <apilink class="org.gradle.api.invocation.Gradle"/> to receive these events.
            </para>
            <para><apilink class="org.gradle.api.ProjectEvaluationListener"/>を<apilink class="org.gradle.api.invocation.Gradle"/>に追加することでも同様の処理を実現できます。</para>
        </section>

        <section>
            <title>タスク作成<phrase role="original">Task creation</phrase></title>
            <para role="original">You can receive a notification immediately after a task is added to a project. This can be used
                to set some default values or add behaviour before the task is made available in the build file.</para>
            <para role="original">The following example sets the <literal>srcDir</literal> property of each task as it is created.</para>
            <para>プロジェクトにタスクが作成されたときに通知を受け取ることができます。この通知は、タスクが使用される前にデフォルト値を設定したり、振る舞いを追加したりするのに使用することができます。</para>
            <para>次の例は、作成されたタスクに、随時<literal>srcDir</literal>プロパティを追加していくものです。</para>
            <sample id="taskCreationEvents" dir="userguide/buildlifecycle/taskCreationEvents" title="すべてのタスクにプロパティ値を設定する / Setting of certain property to all tasks">
                <sourcefile file="build.gradle"/>
                <output args="-q a"/>
            </sample>
            <para role="original">You can also add an <apilink class="org.gradle.api.Action"/> to a
                <apilink class="org.gradle.api.tasks.TaskContainer"/> to receive these events.</para>
            <para><apilink class="org.gradle.api.Action"/>を<apilink class="org.gradle.api.tasks.TaskContainer"/>に追加することでも同様の処理を実現できます。</para>
        </section>

        <section>
            <title>タスク実行グラフの準備<phrase role="original">Task execution graph ready</phrase></title>
            <para role="original">You can receive a notification immediately after the task execution graph has been populated. We
                have seen this already in <xref linkend="configure-by-dag"/>.
            </para>
            <para>タスクの実行グラフが用意できたときに通知を受け取ることができます。この例については、<xref linkend="configure-by-dag"/>で紹介しました。</para>
            <para role="original">You can also add a <apilink class="org.gradle.api.execution.TaskExecutionGraphListener"/> to the
                <apilink class="org.gradle.api.execution.TaskExecutionGraph"/> to receive these events.
            </para>
            <para><apilink class="org.gradle.api.execution.TaskExecutionGraphListener"/>を<apilink class="org.gradle.api.execution.TaskExecutionGraph"/>に追加することでも同様の処理を実現できます。</para>
        </section>

        <section>
            <title>タスクの実行<phrase role="original">Task execution</phrase></title>
            <para role="original">You can receive a notification immediately before and after any task is executed.</para>
            <para>タスクが実行される前または実行された後に通知を受け取ることができます。</para>
            <para role="original">The following example logs the start and end of each task execution. Notice that the
                <literal>afterTask</literal> notification is received regardless of whether the task completes
                successfully or fails with an exception.</para>
            <para>次の例では、タスクの実行が開始されたときと終わったときにそれぞれロギングを追加しています。<literal>afterTask</literal>が、タスクの実行に成功しても例外で失敗しても通知されていることに注目してください。</para>
            <sample id="taskExecutionEvents" dir="userguide/buildlifecycle/taskExecutionEvents" title="タスク実行の開始時および終了時にロギングを行う / Logging of start and end of each task execution">
                <sourcefile file="build.gradle"/>
                <output args="-q broken"/>
            </sample>
            <para role="original">You can also use a <apilink class="org.gradle.api.execution.TaskExecutionListener"/> to the
                <apilink class="org.gradle.api.execution.TaskExecutionGraph"/> to receive these events.
            </para>
            <para><apilink class="org.gradle.api.execution.TaskExecutionListener"/>を<apilink class="org.gradle.api.execution.TaskExecutionGraph"/>に追加することでも同様の処理を実現できます。
            </para>
        </section>
    </section>
</chapter>
