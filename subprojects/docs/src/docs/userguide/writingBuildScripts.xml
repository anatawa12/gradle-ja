<!--
  ~ Copyright 2010 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='writing_build_scripts' xml:lang="ja">
    <title>ビルドスクリプトの記述<phrase role="original">Writing Build Scripts</phrase></title>
    <para role="original">This chapter looks at some of the details of writing a build script.</para>
    <para>本章では、ビルドスクリプトの記述についてもう少し詳しく見ていきます。</para>

    <section>
        <title>Gradleビルド言語<phrase role="original">The Gradle build language</phrase></title>
        <para role="original">Gradle provides a <firstterm>domain specific language</firstterm>, or DSL, for describing builds.
            This build language is based on Groovy, with some additions to make it easier to describe a build.
        </para>
        <para>
        Gradleは、ビルドシステムを記述するための<firstterm>ドメイン特化言語</firstterm>(DSL)を提供します。
        このビルド用言語は、Groovyをベースに、ビルドシステムの記述を簡単にするための機能をいくつか追加したものです。
        </para>
    </section>
    <section id='sec:project_api'>
        <title>プロジェクトAPI<phrase role="original">The Project API</phrase></title>
        <para role="original">In the tutorial in <xref linkend='tutorial_java_projects'/> we used, for example, the
            <literal>apply()</literal> method. Where does this method come from? We said earlier that the build script
            defines a project in Gradle. For each project in the build, Gradle creates an instance of type
            <apilink class='org.gradle.api.Project'/> and associates this <classname>Project</classname> object with
            the build script. As the build script executes, it configures this <classname>Project</classname> object:
        </para>
        <para>例えば、<xref linkend='tutorial_java_projects'/>のチュートリアルで使用した<literal>apply()</literal>メソッド、このメソッドはどこから来たのでしょうか。まず、前述のようにビルドスクリプトはGradleのプロジェクトを定義します。
            ビルドに含まれるプロジェクトそれぞれに対し、<classname>Project</classname>型のインスタンスが一つ作られ、ビルドスクリプトと関連づけられます。ビルドが実行されると、このプロジェクト・インスタンスは以下のように振る舞います。</para>
        <tip>
            <title>ビルドスクリプトのリファレンスを見たいときは<phrase role="original">Getting help writing build scripts</phrase></title>
            <para role="original">Don't forget that your build script is simply Groovy code that drives the Gradle API. And the
                <apilink class='org.gradle.api.Project'/> interface is your starting point for accessing everything
                in the Gradle API. So, if you're wondering what 'tags' are available in your build script, you can
                start with the documentation for the <classname>Project</classname> interface.
            </para>
            <para>ビルドスクリプトは、GradleのAPIを呼び出しているだけの単なるGroovyスクリプトだということを忘れないでください。<apilink class='org.gradle.api.Project'/>インターフェースが、GradleのAPIを呼び出すときのスタートポイントです。なので、ビルドスクリプトでどんな「文言」が使えるか分からないときは<classname>Project</classname>インターフェースのドキュメントを見ることから始めるといいでしょう。</para>
        </tip>
        <itemizedlist>
            <listitem>
                <para role="original">Any method you call in your build script, which <emphasis>is not defined</emphasis>
                    in the build script, is delegated to the <classname>Project</classname> object.
                </para>
                <para>ビルドスクリプトで呼び出されたメソッドのうち、そのスクリプトで<emphasis>定義されていない</emphasis>ものは<classname>Project</classname>オブジェクトに委譲されます。</para>
            </listitem>
            <listitem>
                <para role="original">Any property you access in your build script, which <emphasis>is not defined</emphasis>
                    in the build script, is delegated to the <classname>Project</classname> object.
                </para>
                <para>ビルドスクリプトでのプロパティアクセスも、そのスクリプトで<emphasis>定義されていない</emphasis>プロパティについては<classname>Project</classname>オブジェクトに委譲されます。</para>
            </listitem>
        </itemizedlist>
        <para role="original">Let's try this out and try to access the <literal>name</literal> property of the
            <classname>Project</classname> object.
        </para>
        <para>プロジェクトオブジェクトの<literal>name</literal>プロパティにアクセスして試してみましょう。</para>
        <sample id="projectApi" dir="userguide/tutorial/projectApi" title="Projectオブジェクトへのアクセス / Accessing property of the Project object">
            <sourcefile file="build.gradle" snippet="project-name"/>
            <output args="-q check"/>
        </sample>
        <para role="original">Both <literal>println</literal> statements print out the same property. The first uses auto-delegation to
            the <classname>Project</classname> object, for properties not defined in the build script. The other
            statement uses the <literal>project</literal> property available to any build script, which returns the
            associated <classname>Project</classname> object. Only if you define a property or a method which has the
            same name as a member of the <classname>Project</classname> object, you need to use the <literal>project</literal>
            property.
        </para>
        <para>どちらの<literal>println</literal>も出力結果は同じです。最初のprintlnは、ビルドスクリプトで定義されていないプロパティへのアクセスを、暗黙のうちにプロジェクトオブジェクトに委譲しています。もう一方の例では、プロジェクトオブジェクトを返す<literal>project</literal>プロパティを使って、<literal>name</literal>にアクセスしています。<literal>project</literal>プロパティには、ビルドスクリプトのどこからでもアクセスできます。プロジェクトオブジェクトのプロパティやメソッドと同名のものをビルドスクリプトに定義している場合は、<literal>project</literal>プロパティからアクセスすることになるでしょう。</para>
        <section>
            <title>標準のプロジェクトプロパティ<phrase role="original">Standard project properties</phrase></title>
            <para role="original">The <classname>Project</classname> object provides some standard properties, which are available in
                your build script. The following table lists a few of the commonly used ones.
            </para>
            <para>プロジェクトオブジェクトは標準でいくつかのプロパティを提供しており、ビルドスクリプトでこれらのプロパティにアクセスできます。次の表によく使うプロパティを少しですが載せてみました。</para>
            <table>
                <title>プロジェクトプロパティ<phrase role="original">Project Properties</phrase></title>
                <thead>
                    <tr>
                        <td>プロパティ名<phrase role="original">Name</phrase></td>
                        <td>型<phrase role="original">Type</phrase></td>
                        <td>デフォルト値<phrase role="original">Default Value</phrase></td>
                    </tr>
                </thead>
                <tr>
                    <td><literal>project</literal></td>
                    <td><apilink class='org.gradle.api.Project'/></td>
                    <td><classname>Project</classname>インスタンス<phrase role="original">The <classname>Project</classname> instance</phrase></td>
                </tr>
                <tr>
                    <td><literal>name</literal></td>
                    <td><classname>String</classname></td>
                    <td>プロジェクトディレクトリの名前<phrase role="original">The name of the project directory.</phrase></td>
                </tr>
                <tr>
                    <td><literal>path</literal></td>
                    <td><classname>String</classname></td>
                    <td>プロジェクトの絶対パス<phrase role="original">The absolute path of the project.</phrase></td>
                </tr>
                <tr>
                    <td><literal>description</literal></td>
                    <td><classname>String</classname></td>
                    <td>プロジェクトの説明<phrase role="original">A description for the project.</phrase></td>
                </tr>
                <tr>
                    <td><literal>projectDir</literal></td>
                    <td><classname>File</classname></td>
                    <td>ビルドスクリプトのあるディレクトリ<phrase role="original">The directory containing the build script.</phrase></td>
                </tr>
                <tr>
                    <td><literal>buildDir</literal></td>
                    <td><classname>File</classname></td>
                    <td><filename><replaceable>projectDir</replaceable>/build</filename></td>
                </tr>
                <tr>
                    <td><literal>group</literal></td>
                    <td><classname>Object</classname></td>
                    <td><literal>未設定</literal><phrase role="original"><literal>unspecified</literal></phrase></td>
                </tr>
                <tr>
                    <td><literal>version</literal></td>
                    <td><classname>Object</classname></td>
                    <td><literal>未設定</literal><phrase role="original"><literal>unspecified</literal></phrase></td>
                </tr>
                <tr>
                    <td><literal>ant</literal></td>
                    <td><apilink class="org.gradle.api.AntBuilder"/></td>
                    <td><classname>AntBuilder</classname>インスタンス<phrase role="original">An <classname>AntBuilder</classname> instance</phrase></td>
                </tr>
            </table>
        </section>
    </section>
    <section>
        <title>スクリプトAPI<phrase role="original">The Script API</phrase></title>
        <para role="original">When Gradle executes a script, it compiles the script into a class which implements <apilink class="org.gradle.api.Script"/>.
            This means that all of the properties and methods declared by the <classname>Script</classname> interface
            are available in your script.
        </para>
        <para>ビルドスクリプトが実行されるときは、スクリプトは<apilink class="org.gradle.api.Script"/>を実装したクラスにコンパイルされます。つまり、ビルドスクリプトでは<classname>Script</classname>インターフェースで宣言されているプロパティとメソッドを全て使うことができるということです。</para>
    </section>
    <section>
        <title>変数の宣言 <phrase role="original">Declaring variables</phrase></title>
        <para role="original">There are two kinds of variables that can be declared in a build script: local variables and extra properties.
        </para>
        <para>
            ビルドスクリプトでは、二つの方法で変数を宣言できます。ローカル変数と拡張プロパティです。
        </para>
        <section>
            <title>ローカル変数 <phrase role="original">Local variables</phrase></title>
            <para role="original">Local variables are declared with the <literal>def</literal> keyword. They are only visible in the scope where they have been declared.
                Local variables are a feature of the underlying Groovy language.
            </para>
            <para>
                ローカル変数は、<literal>def</literal>キーワードで宣言する変数です。変数のスコープは、変数が宣言されている場所に制限されます。なお、ローカル変数はGroovy言語に依る機能です。
            </para>
            <sample id="localVariables" dir="userguide/tutorial/localVariables" title="ローカル変数を使用する / Using local variables">
                <sourcefile file="build.gradle"/>
            </sample>
        </section>
        <section id='sec:extra_properties'>
            <title>拡張プロパティ <phrase role="original">Extra properties</phrase></title>
            <para role="original">All enhanced objects in Gradle's domain model can hold extra user-defined properties. This includes, but is not limited to, projects, tasks,
                and source sets. Extra properties can be added, read and set via the owning object's <literal>ext</literal> property. Alternatively, an
                <literal>ext</literal> block can be used to add multiple properties at once.
            </para>
            <para>
                Gradleのドメインモデルを構成する全ての拡張オブジェクトには、ユーザー定義のプロパティ、拡張プロパティを新たに追加することができます。
                拡張プロパティを追加できるオブジェクトには、projects、tasks、source setsを始め、様々なオブジェクトがあります。
                拡張プロパティをセットしたり読み込んだりするには、対象オブジェクトの<literal>ext</literal>プロパティを使用して下さい。また、<literal>ext</literal>ブロックを使って複数のプロパティを一気に追加することもできます。
            </para>
            <sample id="extraProperties" dir="userguide/tutorial/extraProperties" title="拡張プロパティを使用する / Using extra properties">
                <sourcefile file="build.gradle" snippet="extraProperties"/>
                <output args="-q printProperties"/>
            </sample>
            <para role="original">In this example, an <literal>ext</literal> block adds two extra properties to the <literal>project</literal> object. Additionally,
                a property named <literal>purpose</literal> is added to each source set by setting <literal>ext.purpose</literal> to
                <literal>null</literal> (<literal>null</literal> is a permissible value). Once the properties have been added, they can be read and set like
                predefined properties.
            </para>
            <para>
                この例では、<literal>ext</literal>ブロックで二つの拡張プロパティを<literal>project</literal>オブジェクトに追加しています。
                さらに、<literal>ext.purpose</literal>に<literal>null</literal>をセットすることで（<literal>null</literal>でも構いません）、全てのソースセットに<literal>purpose</literal>という拡張プロパティを追加しています。
                一度プロパティが追加されれば、定義済みのプロパティと同じように読み込んだり書き込んだりすることができるようになります。
            </para>
            <para role="original">By requiring special syntax for adding a property, Gradle can fail fast when an attempt is made to set a (predefined or extra) property
                but the property is misspelled or does not exist.
                <footnote>
                    <para role="original">As of Gradle 1.0-milestone-9, using <literal>ext</literal> to add extra properties is strongly encouraged but not yet enforced.
                        Therefore, Gradle will not fail when an unknown property is set. However, it will print a warning.
                    </para>
                </footnote>
                Extra properties can be accessed from anywhere their owning object can be accessed, giving them a wider scope than local variables.
                Extra properties on a parent project are visible from subprojects.
            </para>
            <para>
                プロパティを追加する際に特別な記法を要求することで、（定義済みのものであれ、拡張プロパティであれ）存在しないプロパティにアクセスしようとしたり、間違ったプロパティ名を使用しようとしたときのフェイルファストを実現できます。
                <footnote>
                    <para>Gradle 1.0 milestone 9より、拡張プロパティを追加する際には<literal>ext</literal>を使用することが強く推奨されるようになっていますが、まだ強制はされません。
                        そのため存在しないプロパティに値を設定してもGradleの実行は失敗せず、警告が表示されます。
                    </para>
                </footnote>
                拡張プロパティは、プロパティを追加したオブジェクトが参照できる場所であればどこからでもアクセスできるので、ローカル変数より広いスコープを持っていると言えます。
                また、親プロジェクトの拡張プロパティは、サブプロジェクトからアクセスすることができます。
            </para>
            <para role="original">For further details on extra properties and their API, see <apilink class="org.gradle.api.plugins.ExtraPropertiesExtension"/>.</para>
            <para>拡張プロパティに関してもっと詳しく知りたい場合、また、そのAPIについては、<apilink class="org.gradle.api.plugins.ExtraPropertiesExtension"/>を参照してください。</para>
        </section>
    </section>
    <section>
        <title>Groovyの基本 <phrase role="original">Some Groovy basics</phrase></title>
        <para role="original">Groovy provides plenty of features for creating DSLs, and the Gradle build language takes advantage of these.
            Understanding how the build language works will help you when you write your build script, and in particular,
            when you start to write customs plugins and tasks.
        </para>
        GroovyにはDSLを作るための機能が豊富に用意されていて、Gradleもその長所を活用しています。Gradleビルド言語がどういう仕組みで動いているか理解すれば、ビルドスクリプトを書くのに、特にカスタムプラグインやタスクを作り始めたときには役に立つはずです。
        <section>
            <title>Groovy JDK</title>
            <para role="original">
                Groovy adds lots of useful methods to JVM classes. For example, <classname>Iterable</classname> gets
                an <literal>each</literal> method, which iterates over the elements of the <classname>Iterable</classname>:
            </para>
            <para>Groovyは、たくさんの便利なメソッドをJavaの標準クラスに追加しています。たとえば、<classname>Iterable</classname>には<literal>each</literal>というメソッドが追加されていて、要素を走査するときに次のように書くことができます。</para>
            <sample id="groovyBasics" dir="userguide/tutorial/groovy" title="Groovy JDKのメソッド / Groovy JDK methods">
                <sourcefile file="build.gradle" snippet="groovyJdk"/>
            </sample>
            <para role="original">Have a look at <ulink url="http://groovy.codehaus.org/groovy-jdk/"/> for more details.</para>
            <para>詳細は<ulink url="http://groovy.codehaus.org/groovy-jdk/"/>をご参照ください。</para>
        </section>
        <section>
            <title>プロパティのアクセサ<phrase role="original">Property accessors</phrase></title>
            <para role="original">
               Groovy automatically converts a property reference into a call to the appropriate getter or setter method.
            </para>
            <para>Groovyは、プロパティ参照を自動的にゲッター/セッターメソッドの呼び出しに変換してくれます。</para>
            <sample id="groovyBasics" dir="userguide/tutorial/groovy" title="プロパティアクセサ / Property accessors">
                <sourcefile file="build.gradle" snippet="propertyAccessors"/>
            </sample>
        </section>
        <section>
            <title>メソッド呼び出し時のカッコを省略できる<phrase role="original">Optional parentheses on method calls</phrase></title>
            <para role="original">
                Parentheses are optional for method calls.
            </para>
            <para>Groovyではメソッド呼び出しのカッコは省略できます。</para>
            <sample id="groovyBasics" dir="userguide/tutorial/groovy" title="カッコなしのメソッド呼び出し / Method call without parentheses">
                <sourcefile file="build.gradle" snippet="methodCallWithoutParentheses"/>
            </sample>
        </section>
        <section>
            <title>リストリテラル、マップリテラル<phrase role="original">List and map literals</phrase></title>
            <para role="original">
                Groovy provides some shortcuts for defining <classname>List</classname> and <classname>Map</classname>
                instances.
            </para>
            <para>Groovyでは、<classname>List</classname>や<classname>Map</classname>のインスタンスを作るときにショートカット記法が使えます。</para>
            <sample id="groovyBasics" dir="userguide/tutorial/groovy" title="マップリテラル、リストリテラル / List and map literals">
                <sourcefile file="build.gradle" snippet="listAndMapLiterals"/>
            </sample>
        </section>
        <section>
            <title>メソッド引数の最後にクロージャを使う<phrase role="original">Closures as the last parameter in a method</phrase></title>
            <para role="original">The Gradle DSL uses closures in many places. You can find out more about closures <ulink url="http://groovy.codehaus.org/Closures">here</ulink>.
                When the last parameter of a method is a closure, you can place the closure after the method call:
            </para>
            <para>GradleのDSLでは、クロージャ(詳細は<ulink url="http://groovy.codehaus.org/Japanese+Closures">こちら</ulink>)を多用します。Groovyでは、メソッドの最後の引数がクロージャになっている場合、そのメソッドをクロージャをつけて呼び出すことができます。</para>
            <sample id="groovyBasics" dir="userguide/tutorial/groovy" title="メソッドのクロージャ引数 / Closure as method parameter">
                <sourcefile file="build.gradle" snippet="closureAsLastParam"/>
            </sample>
        </section>
        <section>
            <title>クロージャのdelegateオブジェクト<phrase role="original">Closure delegate</phrase></title>
            <para role="original">
                Each closure has a <literal>delegate</literal> object, which Groovy uses to look up variable and method
                references which are not local variables or parameters of the closure. Gradle uses this for
                <firstterm>configuration closures</firstterm>, where the <literal>delegate</literal> object is set to
                the object to be configured.
            </para>
            <para>すべてのクロージャは、<literal>delegate</literal>オブジェクトを持っています。クロージャ内では、(クロージャ引数やローカル変数以外の)変数やメソッドは<literal>delegate</literal>オブジェクトから検索されます。Gradleの<firstterm>設定用クロージャ</firstterm>では、<literal>delegate</literal>オブジェクトに設定対象のオブジェクトがセットされています。</para>
            <sample id="groovyBasics" dir="userguide/tutorial/groovy" title="クロージャのdelegate / Closure delegates">
                <sourcefile file="build.gradle" snippet="closureDelegates"/>
            </sample>
        </section>
    </section>
</chapter>
