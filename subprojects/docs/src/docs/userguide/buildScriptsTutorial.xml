<!--
  ~ Copyright 2009 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='tutorial_using_tasks' xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="ja">
    <title>ビルドスクリプトの基本<phrase role="original">Build Script Basics</phrase></title>
    <section><title>プロジェクトとタスク<phrase role="original">Projects and tasks</phrase></title>
    <para role="original">Everything in Gradle sits on top of two basic concepts: <firstterm>projects</firstterm> and <firstterm>tasks</firstterm>.</para>
    <para>Gradleには二つの基本的な概念、<firstterm>プロジェクト</firstterm>と<firstterm>タスク</firstterm>があり、すべてがその上に成り立っています。</para>
    <para role="original">
        Every Gradle build is made up of one or more <firstterm>projects</firstterm>. A project represents
        some component of your software which can be built. What this means exactly depends on what it is that you are
        building. For example, a project might represent a library JAR or a web application. It might represent a
        distribution ZIP assembled from the JARs produced by other projects. A project does not necessarily represent
        a thing to be built. It might represent a thing to be done, such as deploying your application to staging or
        production environments. Don't worry if this seems a little vague for now. Gradle's build-by-convention support adds
        a more concrete definition for what a project is.
    </para>
    <para>Gradleによるビルドは、一つ以上の<firstterm>プロジェクト</firstterm>から構成されています。プロジェクトとは、ソフトウェアを構成するコンポーネントであり、「ビルドできる」なにかを表す概念です。「ビルド」が何を表すのかによって、プロジェクトの定義も変わってきます。たとえば、あるプロジェクトはライブラリjarやWebアプリケーションをビルドするものかもしれません。または、別のプロジェクトによってビルドされたjarを集めて配布用のzipファイルを作成するものかもしれません。別に何か具体的なものをビルドする必要もなく、アプリケーションを本番環境にステージするというプロジェクトもありえます。それでは、プロジェクトとは結局なんなんでしょう。あいまいな印象を受けられたかもしれませんが、心配する必要はありません。Gradleは規約によるビルドをサポートしており、プロジェクトの定義についても明確に規定されています。</para>
    <para role="original">Each project is made up of one or more <firstterm>tasks</firstterm>. A task represents some atomic piece
        of work which a build performs. This might be compiling some classes, creating a JAR, generating javadoc,
        or publishing some archives to a repository.</para>
    <para>それぞれのプロジェクトは、一つ以上の<firstterm>タスク</firstterm>から構成されます。タスクとは、分割不能な何らかの作業単位を表す概念です。たとえば、クラスをコンパイルしたり、JARファイルを作成したり、アーカイブをリポジトリに公開したりするタスクが考えられます。</para>

    <para role="original">For now, we will look at defining some simple tasks in a build with one project. Later chapters will look at
        working with multiple projects and more about working with projects and tasks.</para>
    <para>では、実際にプロジェクト上でいくつか簡単なタスクを定義してビルドしてみましょう。マルチプロジェクトでのビルド例やプロジェクト/タスクのもっと詳しい情報については後の章をご参照ください。</para>
    </section>
    <section>
        <title>Hello world</title>
        <para role="original">You run a Gradle build using the <command>gradle</command> command. The <command>gradle</command> command
            looks for a file called <filename>build.gradle</filename> in the current directory.
            <footnote><para>There are command line switches to change this behavior. See <xref linkend='gradle_command_line'/>)</para></footnote>
            We call this <filename>build.gradle</filename> file a <firstterm>build script</firstterm>, although strictly speaking it is
            a build configuration script, as we will see later. The build script defines a project and its tasks.
        </para>
        <para>Gradleのビルドは、<command>gradle</command>コマンドで実行します。<command>gradle</command>コマンドはカレントディレクトリの<filename>build.gradle</filename>ファイルを参照してビルドを行います。<footnote><para>この動作はコマンドラインスイッチを使用して変更できます。<xref linkend='gradle_command_line'/>を参照してください。</para></footnote>このファイルは、一般的には<firstterm>ビルドスクリプト</firstterm>と呼ばれるファイルです(後述しますが、正確には「ビルドの設定を行うスクリプト」です)。Gradleのプロジェクトとタスクは、このビルドスクリプトで定義されます。</para>
        <para role="original">To try this out, create the following build script named <filename>build.gradle</filename>.
        </para>
        <para>次のようなスクリプトを、<filename>build.gradle</filename>という名前で作成して試してみてください。</para>
        <sample id="hello" dir="userguide/tutorial/hello" title="初めてのビルドスクリプト / The first build script">
            <sourcefile file="build.gradle"/>
        </sample>
        <para role="original">In a command-line shell, enter into the containing directory and execute the build script by running
            <userinput>gradle -q hello</userinput>:
        </para>
        <para>コンソールを開いてこの<filename>build.gradle</filename>のあるディレクトリに移動して、<userinput>gradle -q hello</userinput>と打ち込んでください。ビルドスクリプトが実行され、以下のように出力されるはずです。</para>
        <tip>
            <title><option>-q</option>オプションって何?<phrase role="original">What does <option>-q</option> do?</phrase></title>
            <para role="original">Most of the examples in this user guide are run with the <option>-q</option> command-line option.
                This suppresses Gradle's log messages, so that only the output of the tasks is shown. This keeps the example
                output in this user guide a little clearer. You don't need to use this option if you don't want.
                See <xref linkend="logging"/> for more details about the command-line options which affect Gradle's output.
            </para>
            <para>このユーザーガイドでは、ほぼすべての例で<option>-q</option>をつけてコマンドを実行しています。このオプションはGradleのログメッセージを抑制するもので、タスクによる出力のみが表示されるようになります。おかげでユーザーガイドの出力例はちょっとすっきりしていますが、もちろん使いたくなければこのオプションを使う必要はありません。Gradleの出力に関係するオプションについては、<xref linkend="logging"/>にもっと詳しく記載されています。</para>
        </tip>
        <sample id="hello" dir="userguide/tutorial/hello" title="ビルドスクリプトの実行 / Execution of a build script">
            <output args="-q hello"/>
        </sample>
        <para role="original">What's going on here? This build script defines a single task, called <literal>hello</literal>, and
            adds an action to it. When you run <userinput>gradle hello</userinput>, Gradle executes the
            <literal>hello</literal> task, which in turn executes the action you've provided. The action is simply a
            closure containing some Groovy code to execute.
        </para>
        <para>何が起こったのでしょう。ビルドスクリプトは、<literal>hello</literal>というタスクを一つ定義していて、このタスクにアクションを一つ追加しています。<userinput>gradle hello</userinput>と実行することで、Gradleがこの<literal>hello</literal>を実行し、<literal>hello</literal>に追加したアクションが実行されたのです。アクションはGroovyコードを含む単なるクロージャです。</para>
        <para role="original">If you think this looks similar to Ant's targets, well, you are right. Gradle tasks are the equivalent to
            Ant targets. But as you will see, they are much more powerful. We have used a different terminology than Ant
            as we think the word <emphasis>task</emphasis> is more expressive than the word <emphasis>target</emphasis>.
            Unfortunately this introduces a terminology clash with Ant, as Ant calls its commands, such as
            <literal>javac</literal> or <literal>copy</literal>, tasks. So when we talk about tasks,
            we <emphasis>always</emphasis> mean Gradle tasks, which are the equivalent to Ant's targets. If we talk
            about Ant tasks (Ant commands), we explicitly say <emphasis>ant task</emphasis>.
        </para>
        <para>Antのtargetに似ているなと思われたかもしれません。実際、GradleのtaskはAntでいえばtargetに相当するものです。ただ、これから見ていきますがGradleのtaskはAntのtargetよりもずっと強力なものです。Gradleではtaskという、Antとは異なる用語を採用しました。これは<emphasis>task</emphasis>という言葉が、<emphasis>target</emphasis>という言葉よりも実態に合った表現だと考えたためです。しかし、残念ながら<emphasis>task</emphasis>という用語はAntでも<literal>copy</literal>や<literal>javac</literal>といったコマンドを示すものとして使われており、Gradleのtaskと競合してしまいます。このため、Antのtaskについて述べるときには常に<emphasis>ant task</emphasis>と明示的にいい、単にtaskとしたときはGradleのタスクのことを示すものとします。</para>
    </section>
    <section>
        <title>タスク定義のショートカット<phrase role="original">A shortcut task definition</phrase></title>
        <para role="original">There is a shorthand way to define a task like our <literal>hello</literal> task above, which is more
            concise.</para>
        <para>タスク定義は、実際にはもっと短く書けます。先ほどの<literal>hello</literal>タスクも、次のように簡潔に書くことができます。</para>
        <sample id="helloShortcut" dir="userguide/tutorial/helloShortcut" title="タスク定義のショートカット / A task definition shortcut">
            <sourcefile file="build.gradle"/>
        </sample>
        <para role="original">Again, this defines a task called <literal>hello</literal> with a single closure to execute.
            We will use this task definition style throughout the user guide.</para>
        <para>この例も先ほどと同様、実行するクロージャを一つだけもった<literal>hello</literal>を定義するものです。このユーザーガイドではこちらの定義方法を使用します。</para>
    </section>
    <section>
        <title>ビルドスクリプトはコードです<phrase role="original">Build scripts are code</phrase></title>
        <para role="original">Gradle's build scripts expose to you the full power of Groovy. As an appetizer, have a look at this:
        </para>
        <para>GradleのビルドスクリプトではGroovyの機能をすべて使うことができます。手始めに次の例をご覧ください。</para>
        <sample id="upper" dir="userguide/tutorial/upper" title="GradleタスクでGroovyを使う / Using Groovy in Gradle's tasks">
            <sourcefile file="build.gradle"/>
            <output args="-q upper"/>
        </sample>
        <para role="original">or</para>
        <para>さらに</para>
        <sample id="count" dir="userguide/tutorial/count" title="GradleタスクでGroovyを使う / Using Groovy in Gradle's tasks">
            <sourcefile file="build.gradle"/>
            <output args="-q count"/>
        </sample>
    </section>
    <section id='sec:task_dependencies'>
        <title>タスクの依存関係<phrase role="original">Task dependencies</phrase></title>
        <para role="original">As you probably have guessed, you can declare dependencies between your tasks.
        </para>
        <para>ご想像の通り、タスク間の依存関係を宣言できます。</para>
        <sample id="intro" dir="userguide/tutorial/intro" title="タスク間の依存関係を宣言する / Declaration of dependencies between tasks">
            <sourcefile file="build.gradle"/>
            <output args="-q intro"/>
        </sample>
        <para role="original">To add a dependency, the corresponding task does not need to exist.</para>
        <para>依存関係にタスクを追加するときは、そのタスクがその時点で宣言されていなくてもかまいません。</para>
        <sample id="lazyDependsOn" dir="userguide/tutorial/lazyDependsOn" title="遅延評価のdependsOn - タスクがまだ宣言されていない場合 / Lazy dependsOn - the other task does not exist (yet)">
            <sourcefile file="build.gradle"/>
            <output args="-q taskX"/>
        </sample>
        <para role="original">The dependency of <literal>taskX</literal> to <literal>taskY</literal> is declared before
            <literal>taskY</literal> is defined. This is very important for multi-project builds. Task dependencies are
            discussed in more detail in <xref linkend='sec:adding_dependencies_to_tasks'/>.
        </para>
        <para><literal>taskX</literal>が<literal>taskY</literal>に依存していることが宣言されていますが、宣言した時点では<literal>taskY</literal>の定義文はありません。このことは、マルチプロジェクトのビルドで非常に重要になってきます。タスク間の依存関係については、<xref linkend='sec:adding_dependencies_to_tasks'/>でさらに詳しく述べられています。</para>
        <para role="original">Please notice, that you can't use a shortcut notation (see <xref linkend='sec:shortcut_notations' />) when referring to task, which is not defined yet.</para>
        <para>なお、未定義のタスクを参照する場合、略記法(<xref linkend='sec:shortcut_notations' />参照)は使えませんので注意してください。</para>
    </section>
    <section>
        <title>動的なタスク<phrase role="original">Dynamic tasks</phrase></title>
        <para role="original">The power of Groovy can be used for more than defining what a task does. For example, you can also use it
            to dynamically create tasks.
        </para>
        <para>Groovyが力を発揮するのは、タスクが実行するアクションを記述するときだけではありません。たとえば、次のようにタスクを動的に定義することもできます。</para>
        <sample id="dynamic" dir="userguide/tutorial/dynamic" title="動的なタスク定義 / Dynamic creation of a task">
            <sourcefile file="build.gradle"/>
            <output args="-q task1"/>
        </sample>
    </section>
    <section>
        <title>既存のタスクを操作する<phrase role="original">Manipulating existing tasks</phrase></title>
        <para role="original">Once tasks are created they can be accessed via an <emphasis>API</emphasis>. This is different to Ant. For
            example you can create additional dependencies.
        </para>
        <para>タスクが公開しているAPIを使えば、既存のタスクにアクセスして定義内容を操作することができます。これはAntと異なるGradleの特長の一つです。たとえば、次のように後からタスクの依存関係を追加することができます。</para>
        <sample id="dynamicDepends" dir="userguide/tutorial/dynamicDepends" title="APIからタスクにアクセスする - 依存関係の追加 / Accessing a task via API - adding a dependency">
            <sourcefile file="build.gradle"/>
            <output args="-q task0"/>
        </sample>
        <para role="original">Or you can add behavior to an existing task.</para>
        <para>また、既存のタスクにアクションを追加することもできます。</para>
        <sample id="helloEnhanced" dir="userguide/tutorial/helloEnhanced" title="APIからタスクにアクセスする - アクションの追加 / Accessing a task via API - adding behaviour">
            <sourcefile file="build.gradle"/>
            <output args="-q hello"/>
        </sample>
        <para role="original">The calls <literal>doFirst</literal> and <literal>doLast</literal> can be executed multiple times.
            They add an action to the beginning or the end of the task's actions list. When the task executes, the
            actions in the action list are executed in order. The <literal>&lt;&lt;</literal> operator is simply an
            alias for <literal>doLast</literal>.
        </para>
        <para><literal>doFirst</literal>や<literal>doLast</literal>は何回でも呼び出すことができ、既存のタスクが実行する一連のアクションの最初や最後に、新しいアクションを追加します。タスクに追加されたアクションは、タスクが実行されたときに順番に実行されます。<literal>&lt;&lt;</literal>は<literal>doLast</literal>の単なるエイリアスです。</para>
    </section>
    <section id='sec:shortcut_notations'>
        <title>略記法<phrase role="original">Shortcut notations</phrase></title>
        <para role="original">As you might have noticed in the previous examples, there is a convenient notation for accessing an
            <emphasis>existing</emphasis> task. Each task is available as a property of the build script:
        </para>
        <para>先ほどの例をみたとき、おやっと思われたかもしれません。<emphasis>既存の</emphasis>タスクにアクセスするときは、便利な略記法を使うことができます。ただのプロパティとしてすべてのタスクにアクセスできるのです。</para>
        <sample id="helloWithShortCut" dir="userguide/tutorial/helloWithShortCut" title="ビルドスクリプトのプロパティとして既存のタスクにアクセスする / Accessing task as a property of the build script">
            <sourcefile file="build.gradle"/>
            <output args="-q hello"/>
        </sample>
        <para role="original">This enables very readable code, especially when using the out of the box tasks provided by the plugins
            (e.g. <literal>compile</literal>).</para>
        <para>この略記法は、コードをとても読みやすいものにします。特に、プラグインなどで外部から提供されるタスク(たとえば<literal>compile</literal>)にアクセスするときには威力を発揮します。</para>
    </section>
    <section id='sec:dynamic_properties'>
        <title>動的なタスクプロパティ<phrase role="original">Dynamic task properties</phrase></title>
        <para role="original">You can assign arbitrary <emphasis>new</emphasis> properties to any task.
        </para>
        <para>タスクには、任意のプロパティを新しく定義することができます。</para>
        <sample id="dynamicProperties" dir="userguide/tutorial/dynamicProperties" title="タスクのプロパティを定義する / Assigning properties to a task">
            <sourcefile file="build.gradle"/>
            <output args="-q showProps"/>
        </sample>
    </section>
    <section>
        <title>Antタスクの使用<phrase role="original">Using Ant Tasks</phrase></title>
        <para role="original">Ant tasks are first-class citizens in Gradle. Gradle provides excellent integration for Ant tasks simply
            by relying on Groovy. Groovy is shipped with the fantastic <literal>AntBuilder</literal>. Using Ant tasks
            from Gradle is as convenient and more powerful than using Ant tasks from a <filename>build.xml</filename>
            file. From below example you can learn how to execute ant tasks and how to access ant properties:
        </para>
        <para>AntのタスクはGradleのファーストクラス・オブジェクトであり、デフォルトで使用できるようになっています。Groovyの持つ機能のおかげで、GradleはAntを非常に高いレベルで統合しています。Groovyには素晴らしき<literal>AntBuilder</literal>が組み込まれているのです。Antのタスクは、<filename>build.xml</filename>で使うよりGradleで使ったほうが便利で強力です。次の例を見てください。Antのタスクを実行する方法やAntのプロパティにアクセスする方法を示しています。</para>
        <sample id="antLoadfile" dir="userguide/tutorial/antLoadfile" title="AntBuilderを使ってant.loadfileターゲットを実行する / Using AntBuilder to execute ant.loadfile target">
            <sourcefile file="build.gradle"/>
            <output args="-q loadfile"/>
        </sample>

        <para role="original">There is lots more you can do with Ant in your build scripts. You can find out more in <xref linkend="ant"/>.</para>
        <para>Antのタスクを使ってできることはもっとたくさんあります。<xref linkend="ant"/>をご参照ください。</para>
    </section>
    <section>
        <title>メソッドの使用<phrase role="original">Using methods</phrase></title>
        <para role="original">Gradle scales in how you can organize your build logic. The first level of organizing your build logic for
            the example above, is extracting a method.
        </para>
        <para>Gradleでは、段階的にビルドロジックを体系化していくことができます。最初の一歩として、上の例をメソッドの抽出を使ってリファクタリングしてみましょう。</para>
        <sample id="antLoadfileWithMethod" dir="userguide/tutorial/antLoadfileWithMethod" title="メソッドを抽出してビルドロジックを整理する / Using methods to organize your build logic">
            <sourcefile file="build.gradle"/>
            <output args="-q loadfile"/>
        </sample>
        <para role="original">Later you will see that such methods can be shared among subprojects in multi-project builds. If your
            build logic becomes more complex, Gradle offers you other very convenient ways to organize it. We have
            devoted a whole chapter to this. See <xref linkend='organizing_build_logic'/>.
        </para>
        <para>後でマルチプロジェクトの各プロジェクトでメソッドを共有する方法について学びます。それでもビルドロジックが複雑になってくることもあるでしょう。Gradleでは、ロジックを体系化する便利な方法をいくつも用意しています。ビルドロジックの体系化については一つの章をすべて割り当てて取り扱っていますのでご参照ください。(<xref linkend='organizing_build_logic'/>)</para>
    </section>
    <section id='sec:default_tasks'>
        <title>デフォルトタスク<phrase role="original">Default tasks</phrase></title>
        <para role="original">Gradle allows you to define one or more default tasks for your build.
        <para>Gradleでは、ビルドに一つ以上のデフォルトタスクを定義することができます。</para>
        </para>
        <sample id="defaultTasks" dir="userguide/tutorial/defaultTasks" title="デフォルトタスクの定義 / Defining a default tasks">
            <sourcefile file="build.gradle"/>
            <output args="-q"/>
        </sample>
        <para role="original">This is equivalent to running <userinput>gradle clean run</userinput>. In a multi-project build every
            subproject can have its own specific default tasks. If a subproject does not specify default tasks, the
            default tasks of the parent project are used (if defined).
        </para>
        <para>これは、<userinput>gradle clean run</userinput>と入力するのと同じです。マルチプロジェクトのビルドでは、すべてのサブプロジェクトが個別にデフォルトタスクを持つことができます。サブプロジェクトにデフォルトタスクが定義されていない時は、(定義されていれば)親プロジェクトの定義が使用されます。</para>
    </section>
    <section id="configure-by-dag">
        <title>DAGによる設定<phrase role="original">Configure by DAG</phrase></title>
        <para role="original">As we describe in full detail later (See <xref linkend='build_lifecycle'/>) Gradle has a
            configuration phase and an execution phase. After the configuration phase Gradle knows all tasks that should
            be executed. Gradle offers you a hook to make use of this information. A use-case for this would be to check
            if the release task is part of the tasks to be executed. Depending on this you can assign different values
            to some variables.
        </para>
        <para>詳しくは<xref linkend='build_lifecycle'/>で説明しますが、Gradleのビルドはいくつかのフェーズに分かれて実行されます。Gradleはどのタスクを実行するのかを設定フェーズで決定しますが、この情報を使うためのフックが提供されています。実行タスクにあるタスクが含まれるかどうかによって、変数に別の値を割り当てたりできるわけです。ユースケースとしては、releaseタスクが実行されるタスクに入っているかどうかチェックするといったものが考えられるでしょう。</para>
        <para role="original">In the following example, execution of <literal>distribution</literal> and <literal>release</literal> tasks results in different value of <literal>version</literal> variable.</para>
        <para>次の例では、<literal>distribution</literal>タスクを実行するか<literal>release</literal>タスクを実行するかで<literal>version</literal>変数に違う値を割り当てています。</para>
        <sample id="configByDagNoRelease" dir="userguide/tutorial/configByDag" title="選択したタスクによって異なる結果を得る / Different outcomes of build depending on chosen tasks">
            <sourcefile file="build.gradle"/>
            <output args="-q distribution"/>
            <output args="-q release" outputFile="configByDag.out"/>
        </sample>
        <para role="original">The important thing is, that the fact that the release task has been chosen, has an effect
            <emphasis>before</emphasis> the release task gets executed. Nor has the release task to be the
            <emphasis>primary</emphasis> task (i.e. the task passed to the <command>gradle</command> command).
        </para>
        <para>ここで大事なことは、releaseタスクが実行予定にあるという事実を、releaseタスクが実行される前に利用できる点です。releaseタスクが<emphasis>プライマリ</emphasis>タスク、つまりgradleコマンドに引き渡されているタスクでなくてもかまいません。</para>
    </section>
    <section>
        <title>次のステップは？<phrase role="original">Where to next?</phrase></title>
        <para role="original">
            In this chapter, we have had a first look at tasks. But this is not the end of the story for tasks. If you want to jump into more of the details,
            have a look at <xref linkend='more_about_tasks'/>.
        </para>
        <para>この章で、私たちは初めてタスクというものに触れました。しかし、タスクについての話はこれで全部ではありません。さらに詳しくタスクについて知りたい場合は、<xref linkend='more_about_tasks'/>を見てみてください。</para>
        <para role="original">
            Otherwise, continue on to the tutorials in <xref linkend="tutorial_java_projects"/> and <xref linkend="artifact_dependencies_tutorial"/>.
        </para>
        そうでなければ、<xref linkend="tutorial_java_projects"/>と<xref linkend="artifact_dependencies_tutorial"/>に進み、チュートリアルを続けてください。
    </section>
</chapter>
