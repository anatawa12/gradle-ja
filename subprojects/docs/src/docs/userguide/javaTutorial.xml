<!--
  ~ Copyright 2009 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='tutorial_java_projects' xml:lang="ja">
    <title>Javaクイックスタート<phrase role="original">Java Quickstart</phrase></title>

    <section>
        <title>Javaプラグイン<phrase role="original">The Java plugin</phrase></title>

        <para role="original">As we have seen, Gradle is a general-purpose build tool. It can build pretty much anything you care to
            implement in your build script. Out-of-the-box, however, it doesn't build anything unless you add code to
            your build script to do so.</para>
        <para>ここまで見てきたように、Gradleは汎用のビルドツールです。ビルドスクリプトで実装したいと思うようなものはほぼ何でもビルドできます。しかし、初期状態では、ビルドスクリプトに何かを行うためのコードを追加しない限り、何もビルドはしません。
        </para>

        <para role="original">Most Java projects are pretty similar as far as the basics go: you need to compile your Java
            source files, run some unit tests, and create a JAR file containing your classes. It would be nice if you
            didn't have to code all this up for every project. Luckily, you don't have to.
            Gradle solves this problem through the use of <firstterm>plugins</firstterm>. A plugin is an extension to Gradle
            which configures your project in some way, typically by adding some pre-configured tasks which together do
            something useful. Gradle ships with a number of plugins, and you can easily write your own and share them with
            others. One such plugin is the <firstterm>Java plugin</firstterm>. This plugin adds some tasks to your
            project which will compile and unit test your Java source code, and bundle it into a JAR file.
        </para>
        <para>多くのJavaプロジェクトは、基本的な部分では非常に似通っています。つまり、Javaソースファイルをコンパイルし、ユニットテストを実行し、クラスを含んだJARファイルを生成する必要があります。すべてのプロジェクトで、これらをいちいちコーディングするのは面倒です。幸運にもその必要はありません。Gradleは<firstterm>プラグイン</firstterm>によってこの問題を解決します。プラグインは、何らかの方法（よくあるのは設定済みの一連の有用なタスクの追加）によってプロジェクトを構成する、Gradleの拡張です。Gradleには多くのプラグインが同梱されており、さらに自作のプラグインを書き、共有することも簡単にできます。こういったプラグインの一つが<firstterm>Javaプラグイン</firstterm>です。このプラグインは、Javaソースコードのコンパイルやユニットテスト、JARファイルの作成などを行うタスクをプロジェクトに追加します。
        </para>

        <para role="original">The Java plugin is convention based. This means that the plugin defines default values for many aspects of the
            project, such as where the Java source files are located. If you follow the convention in your project, you
            generally don't need to do much in your build script to get a useful build. Gradle allows you to customize your
            project if you don't want to or cannot follow the convention in some way. In fact, because support for Java
            projects is implemented as a plugin, you don't have to use the plugin at all to build a Java project, if
            you don't want to.
        </para>
        <para>Javaプラグインは規約ベースです。すなわち、このプラグインはプロジェクトのさまざまな点、例えばJavaソースファイルを置く場所などについてデフォルト値を定義しています。プロジェクトがこの規約に従う限り、大抵はビルドスクリプトであまり多くのことを行わなくても有用なビルドを行うことができます。何らかの事情で規約に従いたくない、または従えない場合、Gradleはプロジェクトのカスタマイズも許しています。実際、Javaプロジェクトのサポートがプラグインとして実現されているので、希望しない場合には、Javaプロジェクトのビルドであってもこのプラグインをまったく使わないことも可能です。
        </para>

        <para role="original">We have in-depth coverage with many examples about the Java plugin, dependency management and multi-project
            builds in later chapters. In this chapter we want to give you an initial idea of how to use the Java plugin to
            build a Java project.
        </para>
        <para>Javaプラグイン、依存関係の管理、マルチプロジェクトのビルドについては、後の章で多くの実例付きで詳しく扱います。この章では、JavaプロジェクトをビルドするためのJavaプラグインの使い方について、まず基本的な知識を提供したいと思います。
        </para>
    </section>

    <section>
        <title>基本的なJavaプロジェクト<phrase role="original">A basic Java project</phrase></title>
        <para role="original">Let's look at a simple example. To use the Java plugin, add the following to your build file:</para>
        <para>シンプルな例から見ていきましょう。Javaプラグインを使うためには、ビルドファイルに以下を加えます：
        </para>
        <sample id="javaQuickstart" dir="java/quickstart" includeLocation="true" title="Javaプラグインの使用 / Using the Java plugin">
            <sourcefile file="build.gradle" snippet="use-plugin"/>
        </sample>
        <para role="original">This is all you need to define a Java project. This will apply the Java plugin to your project, which adds
            a number of tasks to your project.</para>
        <para>Javaプロジェクトの定義に必要なのはこれだけです。これでプロジェクトにJavaプラグインが適用され、多くのタスクが追加されます。
        </para>
        <tip>
            <title>どんなタスクが利用可能？<phrase role="original">What tasks are available?</phrase></title>
            <para role="original">You can use <userinput>gradle tasks</userinput> to list the tasks of a project. This will let you see
            the tasks that the Java plugin has added to your project.
            </para>
            <para><userinput>gradle tasks</userinput>を使えば、プロジェクトのタスクを一覧することができます。これによって、Javaプラグインがプロジェクトに追加したタスクを見ることができるでしょう。
        </para></tip>

        <para role="original">Gradle expects to find your production source code under <filename>src/main/java</filename> and your test
            source code under <filename>src/test/java</filename>. In addition, any files under
            <filename>src/main/resources</filename> will be included in the JAR file as resources, and any files under
            <filename>src/test/resources</filename> will be included in the classpath used to run the tests. All output
            files are created under the <filename>build</filename> directory, with the JAR file ending up in the
            <filename>build/libs</filename> directory.
        </para>
        <para>Gradleは、製品のソースコードが<filename>src/main/java</filename>に、テストのソースコードが<filename>src/test/java</filename>にあることを想定しています。さらに、<filename>src/main/resource</filename>の下にあるファイルはすべてリソースとしてJARに入れられ、また<filename>src/test/resource</filename>にあるファイルはテスト実行時に使われるクラスパスに入れられます。すべての出力ファイルは<filename>build</filename>ディレクトリの下に作られ、最終的に<filename>build/libs</filename>ディレクトリにJARファイルが作られます。
        </para>

        <section>
            <title>プロジェクトのビルド<phrase role="original">Building the project</phrase></title>
            <para role="original">The Java plugin adds quite a few tasks to your project. However, there are only a handful of tasks
                that you will need to use to build the project. The most commonly used task is the <literal>build</literal> task,
                which does a full build of the project. When you run <userinput>gradle build</userinput>, Gradle will
                compile and test your code, and create a JAR file containing your main classes and resources:</para>
            <para>Javaプラグインはかなり多くのタスクをプロジェクトに追加します。しかし、プロジェクトをビルドするのに必要なタスクはほんの一握りです。最もよく使われるのはプロジェクトのフルビルドを行う<literal>build</literal>タスクです。<userinput>gradle build</userinput>を実行すると、Gradleはコードをコンパイルしてテストし、メインクラスやリソースを含んだJARファイルを生成します：
            </para>
            <sample id="javaQuickstart" dir="java/quickstart" title="Javaプロジェクトのビルド / Building a Java project">
                <output args="build"/>
            </sample>

            <para role="original">Some other useful tasks are:</para>
            <para>他にも便利なタスクがあります：</para>
            <variablelist>
                <varlistentry>
                    <term>clean</term>
                    <listitem>
                        <para role="original">Deletes the <filename>build</filename> directory, removing all built files.</para>
                        <para><filename>build</filename>ディレクトリを削除し、ビルドしたすべてのファイルを削除します。</para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>assemble</term>
                    <listitem>
                        <para role="original">Compiles and jars your code, but does not run the unit tests. Other plugins add more
                            artifacts to this task. For example, if you use the War plugin, this task will also build
                            the WAR file for your project.
                        </para>
                        <para>コードをコンパイルしJARを生成しますが、ユニットテストは実行しません。他のプラグインはこのタスクにより多くのアーティファクトを追加します。例えばWarプラグインを使う場合、このタスクはプロジェクトのWARファイルも生成します。
                        </para>
                    </listitem>
                </varlistentry>
                <varlistentry>
                    <term>check</term>
                    <listitem>
                        <para role="original">Compiles and tests your code. Other plugins add more checks to this task. For example, if
                            you use the Code-quality plugin, this task will also run Checkstyle against your source
                            code.
                        </para>
                        <para>コードをコンパイルし、テストします。他のプラグインはこのタスクにより多くの検査項目を追加します。例えばCode-qualityプラグインを使う場合、このタスクはソースコードに対してCheckstyleも実行します。
                        </para>
                    </listitem>
                </varlistentry>
            </variablelist>
        </section>

        <section>
            <title>外部との依存関係<phrase role="original">External dependencies</phrase></title>

            <para role="original">Usually, a Java project will have some dependencies on external JAR files. To reference these JAR
                files in the project, you need to tell Gradle where to find them. In Gradle, artifacts such as JAR
                files, are located in a <firstterm>repository</firstterm>. A repository can be used for fetching the
                dependencies of a project, or for publishing the artifacts of a project, or both. For this example,
                we will use the public Maven repository:</para>
            <para>Javaプロジェクトは外部のJARファイルに依存することが普通です。プロジェクトで使うこういったJARファイルを参照するため、Gradleにそれらの場所を伝える必要があります。Gradleでは、JARファイルのようなアーティファクトは<firstterm>リポジトリ</firstterm>に置かれます。リポジトリは、プロジェクトが依存するものを取得したり、プロジェクトのアーティファクトを公開したり、あるいはその両方のために利用することができます。この例では、公開Mavenリポジトリを使います：
            </para>
            <sample id="javaQuickstart" dir="java/quickstart" title="Mavenリポジトリの追加 / Adding Maven repository">
                <sourcefile file="build.gradle" snippet="repo"/>
            </sample>

            <para role="original">Let's add some dependencies. Here, we will declare that our production classes have a compile-time
                dependency on commons collections, and that our test classes have a compile-time dependency on junit:</para>
            <para>依存関係をいくつか追加してみましょう。製品クラスはコンパイル時にcommonsコレクションに依存し、テストクラスはコンパイル時にjunitに依存することを宣言します：
            </para>
            <sample id="javaQuickstart" dir="java/quickstart" title="依存関係の追加 / Adding dependencies">
                <sourcefile file="build.gradle" snippet="dependencies"/>
            </sample>
            <para role="original">You can find out more in <xref linkend="artifact_dependencies_tutorial"/>.</para>
            <para>詳しい説明は<xref linkend="dependency_management"/>をご覧ください。</para>
        </section>

        <section>
            <title>プロジェクトのカスタマイズ<phrase role="original">Customising the project</phrase></title>
            <para role="original">The Java plugin adds a number of properties to your project. These properties have default values
                which are usually sufficient to get started. It's easy to change these values if they don't suit. Let's
                look at this for our sample. Here we will specify the version number for our Java project, along
                with the Java version our source is written in. We also add some attributes to the JAR manifest.
            </para>
            <para>Javaプラグインは多くのプロパティをプロジェクトに追加します。こういったプロパティには普通、十分適切なデフォルト値が設定されています。不適切な場合、これらの値を変更するのは簡単です。では、実例を見てみましょう。ここでは、ソースの書かれたJavaバージョンとともに、Javaプロジェクトのバージョン番号を指定しています。また、JAR manifestにいくつか属性を追加しています。
            </para>
            <sample id="javaQuickstart" dir="java/quickstart" title="MANIFEST.MFのカスタマイズ / Customization of MANIFEST.MF">
                <sourcefile file="build.gradle" snippet="customisation"/>
            </sample>
            <tip>
                <title>どんなプロパティが利用可能？<phrase role="original">What properties are available?</phrase></title>
                <para role="original">You can use <userinput>gradle properties</userinput> to list the properties of a project. This will allow
                you to see the properties added by the Java plugin, and their default values.</para>
                <para><userinput>gradle properties</userinput>を使えば、プロジェクトのプロパティを一覧することができます。これによって、Javaプラグインが追加したプロパティとそのデフォルト値を見ることができるでしょう。</para></tip>
            <para role="original">The tasks which the Java plugin adds are regular tasks, exactly the same as if they were declared in
                the build file. This means you can use any of the mechanisms shown in earlier chapters to customise
                these tasks. For example, you can set the properties of a task, add behaviour to a task, change the
                dependencies of a task, or replace a task entirely. In our sample, we will configure the
                <literal>test</literal> task, which is of type <apilink class="org.gradle.api.tasks.testing.Test"/>, to
                add a system property when the tests are executed: </para>
            <para>Javaプラグインが追加するタスクはごく普通のタスクで、ビルドファイルで宣言されるものとまったく同等のものです。つまり、これらのタスクは、ここまでの章で説明したあらゆるメカニズムを使ってカスタマイズすることが可能だということです。例えば、タスクのプロパティを設定したり、タスクに振る舞いを追加したり、タスクの依存関係を変更したり、あるはタスク全体を完全に置き換えることすら可能です。以下の例では、<apilink class="org.gradle.api.tasks.testing.Test"/>型である<literal>test</literal>タスクを設定して、テスト実行時のシステムプロパティを追加しています：
            </para>
            <sample id="javaQuickstart" dir="java/quickstart" title="テスト用システムプロパティの追加 / Adding a test system property">
                <sourcefile file="build.gradle" snippet="task-customisation"/>
            </sample>
        </section>

        <section>
            <title>JARファイルの公開<phrase role="original">Publishing the JAR file</phrase></title>
            <para role="original">Usually the JAR file needs to be published somewhere. To do this, you need to tell Gradle where to
                publish the JAR file. In Gradle, artifacts such as JAR files are published to repositories. In our
                sample, we will publish to a local directory. You can also publish to a remote location, or multiple
                locations.
            </para>
            <para>通常は、JARファイルをどこかに公開する必要があるでしょう。このため、GradleにJARファイルの公開先を教える必要があります。Gradleでは、JARファイルのようなアーティファクトはリポジトリに置かれます。以下の例ではローカルディレクトリに公開します。リモートな場所や、複数の場所に公開することも可能です。
            </para>
            <sample id="javaQuickstart" dir="java/quickstart" title="JARファイルの公開 / Publishing the JAR file">
                <sourcefile file="build.gradle" snippet="upload"/>
            </sample>
            <para role="original">To publish the JAR file, run <userinput>gradle uploadArchives</userinput>.</para>
            <para>JARファイルを公開するには、<userinput>gradle uploadArchives</userinput>を実行してください。</para>
        </section>
        
		<section>
            <title>Eclipseプロジェクトの作成<phrase role="original">Creating an Eclipse project</phrase></title>
            <para role="original">To import your project into Eclipse, you need to add another plugin to your build file:</para>
            <para>プロジェクトをEclipseにインポートするには、また別のプラグインをビルドファイルに追加する必要があります：</para>
        	<sample id="javaQuickstart" dir="java/quickstart" title="Eclipseプラグイン / Eclipse plugin">
            	<sourcefile file="build.gradle" snippet="use-eclipse-plugin"/>
        	</sample>
        	<para role="original">Now execute <userinput>gradle eclipse</userinput> command to generate Eclipse project files. More on Eclipse
                task can be found in <xref linkend="eclipse_plugin"/>.
            </para>
          <para>これで<userinput>gradle eclipse</userinput>コマンドを実行すればEclipseのプロジェクトファイルが生成されます。Eclipseタスクの詳細は<xref linkend="eclipse_plugin"/>をご覧ください。
          </para>
        </section>

        <section>
            <title>まとめ<phrase role="original">Summary</phrase></title>
            <para role="original">Here's the complete build file for our sample:</para>
            <para>これまでの例の完全なビルドファイルを以下に示します：</para>
            <sample id="javaQuickstart" dir="java/quickstart" title="Javaの例 - 完全なビルドファイル / Java example - complete build file">
                <sourcefile file="build.gradle"/>
            </sample>
        </section>
    </section>

    <section id='sec:examples'>
        <title>マルチプロジェクトのJavaビルド<phrase role="original">Multi-project Java build</phrase></title>
        <para role="original">Now let's look at a typical multi-project build. Below is the layout for the project:
        </para>
        <para>さて、ここで典型的なマルチプロジェクトのビルドを見てみましょう。プロジェクトのレイアウトは以下の通りです：
        </para>
        <sample id="javaMultiProject" dir="java/multiproject" includeLocation="true" title="マルチプロジェクトビルド - 階層レイアウト / Multi-project build - hierarchical layout">
            <layout>
                api/
                services/webservice/
                shared/
            </layout>
        </sample>
        <para role="original">Here we have three projects. Project <literal>api</literal> produces a JAR file which is shipped to the
            client to provide them a Java client for your XML webservice. Project <literal>webservice</literal> is a
            webapp which returns XML. Project <literal>shared</literal> contains code used both by <literal>api</literal>
            and <literal>webservice</literal>.
        </para>
        <para>この例には三つのプロジェクトがあります。プロジェクト<literal>api</literal>は、このwebサービス用のJavaクライアントを提供するために顧客に出荷されるJARファイルを生成します。プロジェクト<literal>webservice</literal>はXMLを返すwebアプリケーションです。プロジェクト<literal>shared</literal>は、<literal>api</literal>と<literal>webservice</literal>の両方で使われる共通コードです。
        </para>

        <section>
            <title>マルチプロジェクトビルドの定義<phrase role="original">Defining a multi-project build</phrase></title>
            <para role="original">To define a multi-project build, you need to create a <firstterm>settings file</firstterm>. The settings
                file lives in the root directory of the source tree, and specifies which projects to include in the
                build. It must be called <filename>settings.gradle</filename>. For this example, we are using a simple
                hierarchical layout. Here is the corresponding settings file:
            </para>
            <para>マルチプロジェクトのビルドを定義するためには、<firstterm>settingsファイル</firstterm>を作成する必要があります。settingsファイルはソースツリーのルートディレクトリに置かれ、このビルドにどのプロジェクトが含まれるかを指定します。名前は<filename>settings.gradle</filename>でなければなりません。この例では、シンプルな階層レイアウトを使っています。対応するsettingsファイルは以下のようになります：
            </para>
            <sample id="javaMultiProject" dir="java/multiproject" title="マルチプロジェクトビルド - settings.gradleファイル / Multi-project build - settings.gradle file">
                <sourcefile file="settings.gradle" snippet="include-projects"/>
            </sample>
            <para role="original">You can find out more about the settings file in <xref linkend="multi_project_builds"/>.</para>
            <para>settingsファイルの詳細は<xref linkend="multi_project_builds"/>をご覧ください。</para>
        </section>

        <section>
            <title>共通設定<phrase role="original">Common configuration</phrase></title>
            <para role="original">For most multi-project builds, there is some configuration which is common to all projects.
                In our sample, we will define this common configuration in the root project, using a technique called
                <firstterm>configuration injection</firstterm>. Here, the root project is like a container and the
                <literal>subprojects</literal> method iterates over the elements of this container - the projects in
                this instance - and injects the specified configuration. This way we can easily define the manifest
                content for all archives, and some common dependencies:
            </para>
            <para>大抵のマルチプロジェクトビルドでは、すべてのプロジェクトに共通な設定があります。この例では、<firstterm>設定のインジェクション</firstterm>と呼ばれる技法を使い、こういった共通設定をルートプロジェクトで定義します。ここでは、ルートプロジェクトはコンテナのようなもので、<literal>subprojects</literal>メソッドはコンテナの全要素、すなわちこの実例の中の全プロジェクト、に対して反復しつつ指定された設定をインジェクトします。このようにして、全アーカイブのmanifestコンテンツや共通の依存関係を簡単に定義できます：
            </para>
            <sample id="javaMultiProject" dir="java/multiproject" title="マルチプロジェクトビルド - 共通設定 / Multi-project build - common configuration">
                <sourcefile file="build.gradle" snippet="configuration-injection"/>
            </sample>

            <para role="original">Notice that our sample applies the Java plugin to each subproject. This means the tasks and
                configuration properties we have seen in the previous section are available in each subproject.
                So, you can compile, test, and JAR all the projects by running <userinput>gradle build</userinput> from
                the root project directory.</para>
            <para>この例で、各サブプロジェクトにJavaプラグインが適用されていることに注意してください。これは、前の節で述べたタスクや設定プロパティが各サブプロジェクトでも利用可能であることを意味しています。そんなわけで、ルートプロジェクトディレクトリから<userinput>gradle build</userinput>を実行することによって、すべてのプロジェクトをコンパイルし、テストし、JARを生成できるのです。
            </para>
        </section>

        <section>
            <title>プロジェクト間の依存関係<phrase role="original">Dependencies between projects</phrase></title>
            <para role="original">You can add dependencies between projects in the same build, so that, for example, the JAR file of one
                project is used to compile another project. In the <literal>api</literal> build file we will add a dependency
                on the JAR produced by the <literal>shared</literal> project. Due to this dependency, Gradle will
                ensure that project <literal>shared</literal> always gets built before project <literal>api</literal>.
            </para>
            <para>同じビルド内のプロジェクト間の依存関係を追加することもできます。したがって例えば、一つのプロジェクトのJARファイルを別のプロジェクトのコンパイルのために利用することもできます。ここでは、<literal>api</literal>のビルドファイルに<literal>shared</literal>プロジェクトが作るJARへの依存関係を追加します。この依存関係のため、Gradleは<literal>shared</literal>プロジェクトが<literal>api</literal>プロジェクトより前にビルドされることを確実にします。
            </para>
            <sample id="javaMultiProject" dir="java/multiproject" title="マルチプロジェクトビルド - プロジェクト間の依存関係 / Multi-project build - dependencies between projects">
                <sourcefile file="api/build.gradle" snippet="dependencies"/>
            </sample>
            <para role="original">See <xref linkend="disable_dependency_projects"/> for how to disable this functionality.</para>
            <para>この機能を無効にする方法については<xref linkend="disable_dependency_projects"/>を参照してください。</para>
        </section>

        <section>
            <title>配布物の作成<phrase role="original">Creating a distribution</phrase></title>
            <para role="original">
                We also add a distribution, that gets shipped to the client:
            </para>
            <para>顧客に出荷する配布物も追加しておきましょう：</para>
            <sample id="javaMultiProject" dir="java/multiproject" title="マルチプロジェクトビルド - 配布ファイル / Multi-project build - distribution file">
                <sourcefile file="api/build.gradle" snippet="dists"/>
            </sample>
        </section>
    </section>

    <section>
        <title>Where to next?</title>
        <para>
            In this chapter, you have seen how to do some of the things you commonly need to build a Java based
            project. This chapter is not exhaustive, and there are many other things you can do with Java projects in
            Gradle.
            You can find out more about the Java plugin in <xref linkend="java_plugin"/>, and you can find more sample
            Java projects in the <filename>samples/java</filename> directory in the Gradle distribution.
        </para>
        <para>
            Otherwise, continue on to <xref linkend="artifact_dependencies_tutorial"/>.
        </para>
        <para>
        </para>
    </section>
</chapter>
