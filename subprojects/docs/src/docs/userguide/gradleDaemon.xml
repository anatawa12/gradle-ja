<!--
  ~ Copyright 2011 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='gradle_daemon' xml:lang="ja">
    <title>Gradleデーモン <phrase role="original">The Gradle Daemon</phrase></title>

    <section id='enter_the_daemon'>
        <title>デーモン入門 <phrase role="original">Enter the daemon</phrase></title>
        <para role="original"><emphasis>The Gradle daemon</emphasis> (sometimes referred as <emphasis>the build daemon</emphasis>)
            aims to improve the startup and execution time of Gradle.
        </para>
        <para>Gradleデーモン(ビルドデーモンと呼ばれることもあります)はGradleの起動と実行の速度を改善します。
        </para>

        <para>
            <phrase role="original">
            We came up with several use cases where the daemon is very useful.
            For some workflows, the user invokes Gradle many times to execute a small number of relatively quick tasks.
            For example:
            </phrase>
            デーモン実行が非常に有用だと思われるユースケースをいくつか考えてみました。
            例えば、少数の、比較的実行が早く終わるようなタスクを、何度も実行しなければならないような場面があります。
            <itemizedlist>
                <listitem><phrase role="original">When using test driven development, where the unit tests are executed many times.</phrase> テスト駆動開発にて、ユニットテストを度々実行するような場合</listitem>
                <listitem><phrase role="original">When developing a web application, where the application is assembled many times.</phrase> Webアプリケーション開発にて、アプリケーションを何度も構築する場合</listitem>
                <listitem><phrase role="original">When discovering what a build can do, where <userinput>gradle tasks</userinput> is executed a number of times.</phrase> ビルドの挙動を調べるために、<userinput>gradle tasks</userinput>を何度も実行する場合</listitem>
            </itemizedlist>
            <phrase role="original">For these workflows, it is important that the startup cost of invoking Gradle is as small as possible.</phrase>
            これらの場合、Gradleを起動・実行するための時間は出来る限り短いことが重要でしょう。
        </para>
        <para>
            <phrase role="original">
            In addition, user interfaces can provide some interesting features if the Gradle model can be built relatively quickly.
            For example, the daemon might be useful for the following scenarios:
            </phrase>
            さらに、Gradleモデルがより素早く構築されるようになれば、ユーザーインターフェースが面白い機能を実装できる可能性があります。
            例えば、次のようなケースでデーモンが役に立つかもしれません。
            <itemizedlist>
                <listitem><phrase role="original">Content assistance in the IDE</phrase> 統合開発環境で入力補完する場合</listitem>
                <listitem><phrase role="original">Live visualisation of the build in a GUI</phrase> GUIでビルド状況を表示する場合</listitem>
                <listitem><phrase role="original">Tab completion in a CLI</phrase> コマンドラインインターフェースでのタブ補完する場合</listitem>
            </itemizedlist>
        </para>
        <para role="original">
            In general, snappy behavior of the build tool is always handy.
            If you try using the daemon for your local builds, you won't want to go back.
        </para>
        <para>
            一般的にいって、ビルドツールが軽快に動作して困るということはありません。
            ローカル環境のビルドでデーモンを試してみてください。デーモンを使わない普通のビルドにはもう戻れなくなるでしょう。
        </para>
        <para role="original">
            The Tooling API (see <xref linkend="embedding"/>)
            uses the daemon all the time, e.g. you cannot officially use the Tooling API without the daemon.
            This means that whenever you are using the STS Gradle plugin for Eclipse or the Gradle support in Intellij IDEA,
            you're already using the Gradle Daemon.
        </para>
        <para>
            ツールAPI (参照 <xref linkend="embedding"/>)は常にデーモンを使用します。つまり、通常、デーモンなしでツールAPIは使えません。
            したがって、EclipseのSTS GradleプラグインやIntelliJ IDEAのGradleサポートを使っているときは、常にデーモンが背後で起動しています。
        </para>
        <para><phrase role="original">In future, there are plans for more features in the daemon:</phrase>
            今後は下記の機能が追加される予定です。
            <itemizedlist>
                <listitem><phrase role="original">Snappy up-to-date checks: use native file system change notifications (e.g. via jdk7 nio.2)
                    to preemptively perform up-to-date analysis.</phrase> 軽快な更新チェック: ファイルシステムネイティブの変更通知を(jdk7 nio.2経由などで)使い、プロジェクトが更新されたかどうか前もって解析する</listitem>
                <listitem><phrase role="original">Even faster builds: preemptively evaluate projects, so that the model is ready
                    when the user next invokes Gradle.</phrase> 更なるビルドの高速化: あらかじめプロジェクトを評価し、次回のGradle実行時にプロジェクトモデルを準備しておく</listitem>
                <listitem><phrase role="original">Did we mention faster builds? The daemon can potentially preemptively download dependencies
                    or check for new versions of snapshot dependencies.</phrase> 更なるビルドの高速化、はもう言いましたっけ、とにかく、デーモンは潜在的にはあらかじめ依存関係をダウンロードしたり、スナップショットに依存している場合はその最新バージョンをチェックしておくといったことが可能です。</listitem>
                <listitem><phrase role="original">Utilize a pool of reusable processes available for compilation and testing.
                    For example, both the Groovy and Scala compilers have a large startup cost.
                    The build daemon could maintain a process with Groovy and/or Scala already loaded.</phrase>
                    再利用可能なプロセスのプールを活用して、コンパイル、テストを実施する。
                    例えばGroovyとScalaコンパイラーの起動にはどちらも多大なコストがかかります。
                    しかし、ビルドデーモンは、GroovyやScalaが既にロードされたプロセスを維持しておくことができます。</listitem>
                <listitem><phrase role="original">Preemptive execution of certain tasks, for example compilation. Quicker feedback.</phrase> コンパイルなど、ある種のタスクは事前に実行しておく。より早いフィードバックが可能になります。</listitem>
                <listitem><phrase role="original">Fast and accurate bash tab completion.</phrase> 速くて正確なbash上のタブ補完</listitem>
                <listitem><phrase role="original">Periodically garbage collect the Gradle caches.</phrase> Gradleキャッシュを定期的にガーベージコレクトする</listitem>
            </itemizedlist>
        </para>
    </section>

    <section id='reusing_daemons'>
        <title>デーモンの再利用と期限切れ <phrase role="original">Reusing and expiration of daemons</phrase></title>
        <para role="original">The basic idea is that the Gradle command forks a daemon process, which performs the actual build.
            Subsequent invocations of the Gradle command will reuse the daemon, avoiding the startup costs.
            Sometimes we cannot use an existing daemon because it is busy or its Java version or jvm arguments are different.
            For exact details on when exactly a new daemon process is forked read the dedicated section below.
            The daemon process automatically expires after 3 hours of idle time.
        </para>
        <para>
        デーモン実行の基本にある考え方は、gradleコマンドがデーモンプロセスを起動して、そのデーモンが実際のビルドを実行するというものです。
        そうすれば、後続のgradleコマンドがそのデーモンプロセスを再利用でき、起動に掛かるコストを抑えることができます。
        しかし、既存のデーモンプロセスが使用できないこともあります。例えば、プロセスがビジーだったり、要求されたJavaのバージョンやJVM引数が違うといった場合です。
        新しいデーモンプロセスが、正確にはいつ起動されるかの詳細については、以下を参照してください。
        デーモンプロセスは、アイドル状態で3時間経過すると自動的に期限切れになります。
        </para>
        <para>
            <phrase role="original">Here are all situations in which we fork a new daemon process:</phrase>
            デーモンプロセスが新しく起動される場面を全て列挙すると、
            <itemizedlist>
                <listitem><phrase role="original">If the daemon process is currently busy running some job, a brand new daemon process will be started.</phrase> 既存のデーモンがある処理を実行中の場合、新たなデーモンが起動されます。</listitem>
                <listitem><phrase role="original">We fork a separate daemon process per Java home. So even if there is some idle daemon waiting
                    for build requests but you happen to run a build with a different Java home then a brand new daemon will be forked.</phrase> デーモンプロセスは、java homeごとに起動されます。アイドル状態のデーモンがビルドリクエストを待機していたとしても、別のjava homeからビルドを実行した場合デーモンプロセスが新しく起動されます。</listitem>
                <listitem><phrase role="original">We fork a separate daemon process if the jvm arguments for the build are sufficiently different.
                    For example we will not fork a new daemon if a some system property has changed.
                    However if the -Xmx memory setting changed or some fundamental immutable system property changed (e.g. file.encoding)
                    then a new daemon will be forked.</phrase>
                    ビルドのJVM引数が大きく異なる場合、デーモンプロセスが新しく起動されます。いくつかのシステムプロパティに関しては、変更されても新プロセスを立ち上げないこともあります。しかし、-Xmxメモリ設定や、その他の基本的で変更できないシステムプロパティ(file.encodingなど)が変更された場合、プロセスが新しく起動されます。
                </listitem>
                <listitem><phrase role="original">At the moment the daemon is coupled with a particular version of Gradle.
                    This means that even if some daemon is idle but you are running the build
                    with a different version of Gradle, a new daemon will be started.
                    This also has a consequence for the <literal>--stop</literal> command line instruction:
                    this command will only stop daemons that were started with Gradle version that is executing <literal>--stop</literal>.
                </phrase>起動されているデーモンは、特定のバージョンのGradleと関連づいています。
                    そのため、アイドル状態のデーモンが存在したとしても、それと別のバージョンのGradleでビルドを実行すると新しいデーモンが起動されます。
                    これは、<literal>--stop</literal>コマンドについてあることを教唆しています――つまり、<literal>--stop</literal>で停止できるデーモンは、その<literal>--stop</literal>を実行しているGradleと同じバージョンのGradleで起動されたデーモンだけだということです。
                </listitem>
            </itemizedlist>
            <phrase role="original">We plan to improve the functionality of managing and pooling the daemons in the future.</phrase>
            今後、デーモンの管理方法、プール方法の改善を行う予定です。
        </para>
    </section>

    <section id='daemon_usage_and_troubleshooting'>
        <title>使い方とトラブルシューティング <phrase role="original">Usage and troubleshooting</phrase></title>
        <para role="original">For command line usage, look at the dedicated section in <xref linkend="gradle_command_line"/>.
            If you are tired of using the same command line options again and again, take a look at
            <xref linkend="sec:gradle_configuration_properties"/>.
            This section contains information on how to configure certain behavior of the daemon
            (including turning on the daemon by default) in a more 'persistent' way.
        </para>
        <para>コマンドラインの利用方法については別節<xref linkend="gradle_command_line"/>を参照してください。
            同じコマンドラインを何度も何度も指定してうんざりしている場合は、<xref linkend="sec:gradle_configuration_properties"/>を参照してください。
            上記の節には、デーモンの振る舞いをより「永続的に」設定する方法が(デフォルトでデーモンを起動する方法を含めて)詳細に記述されています。
        </para>
        <para>
            <phrase role="original">
            Some ways of troubleshooting the Gradle daemon:
            </phrase>
            デーモンのトラブルシューティングについていくつか方法を示します。
            <itemizedlist>
                <listitem><phrase role="original">If you have a problem with your build, try temporarily disabling the daemon
                    (you can pass the command line switch <literal>--no-daemon</literal>).</phrase> ビルドで問題が発生した場合、一時的にデーモンを無効化してみてください(コマンドラインにスイッチ<literal>--no-daemon</literal>を渡す)。</listitem>
                <listitem><phrase role="original">Occasionally, you may want to stop the daemons either via the <literal>--stop</literal>
                    command line option or in a more forceful way.</phrase> <literal>--stop</literal>オプションや、もっと強制的な方法でデーモンを停止しなければならない場面もあります。</listitem>
                <listitem><phrase role="original">There is a daemon log file, which by default is located in the
                    Gradle user home directory.</phrase> デーモンのログファイルは、デフォルトではGradleユーザーホームディレクトリーにあります。</listitem>
                <listitem><phrase role="original">You may want to start the daemon in <literal>--foreground</literal>
                    mode to observe how the build is executed.</phrase> ビルドの実行状況を見るには、<literal>--feoreground</literal>を使ってデーモンを起動します。</listitem>
            </itemizedlist>
        </para>
    </section>

    <section id="sec:daemon_properties">
        <title>デーモンの設定 <phrase role="original">Configuring the daemon</phrase></title>
        <para role="original">Some daemon settings, such as JVM arguments, memory settings or the Java home, can be configured.
            Please find more information in <xref linkend="sec:gradle_configuration_properties"/>
        </para>
        <para>
            デーモン設定のうち、JVM引数、メモリーの設定、Java homeなどは設定ファイルなどで変更できます。詳細については<xref linkend="sec:gradle_configuration_properties"/>を参照してください。
        </para>
    </section>

</chapter>
