<!--
  ~ Copyright 2011 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='gradle_daemon' xml:lang="ja">　
    <title>Gradleデーモン<phrase role="original">The Gradle Daemon</phrase></title>

    <section id='enter_the_daemon'>
        <title>デーモン入門<phrase role="original">Enter the daemon</phrase></title>
        <para role="original"><emphasis>The Gradle daemon</emphasis> (sometimes referred as <emphasis>the build daemon</emphasis>)
            aims to improve the startup and execution time of Gradle.
        </para>
        <para>Gradleデーモン(ビルドデーモンと呼ばれることもあります)はGradleの起動と実行の速度を改善します。
        </para>

        <para role="original">
            We came up with several use cases where the daemon is very useful.
            For some workflows, the user invokes Gradle many times to execute a small number of relatively quick tasks.
            For example:
            <itemizedlist>
                <listitem>When using test driven development, where the unit tests are executed many times.</listitem>
                <listitem>When developing a web application, where the application is assembled many times.</listitem>
                <listitem>When discovering what a build can do, where gradle -t is executed a number of times.</listitem>
            </itemizedlist>
            For above sorts of workflows, it is important that the startup cost of invoking Gradle is as small as possible.
        </para>
        <para>
            時おりデーモンが非常に有効であるような時があるでしょう。
            場合によっては、ユーザーはGradleをちょっとしたタスクを何度も実行することがあるでしょう。
            例えば、次のようなケースがあります。
            <itemizedlist>
                <listitem>テスト駆動開発にて、ユニットテストを度々実行するような場合</listitem>
                <listitem>Webアプリケーション開発にて、アプリケーションを何度も構築する場合</listitem>
                <listitem>ビルドの挙動を調べるために、gradle -tを何度も実行する場合</listitem>
            </itemizedlist>
            これらの場合、Gradleを起動・実行するための時間は出来る限り短いことが重要でしょう。
        </para>
        <para role="original">
            In addition, user interfaces can provide some interesting features if the Gradle model can be built relatively quickly.
            For example, the daemon might be useful for following scenarios:
            <itemizedlist>
                <listitem>Content assistance in the IDE</listitem>
                <listitem>Live visualisation of the build in a GUI</listitem>
                <listitem>Tab completion in a CLI</listitem>
            </itemizedlist>
        </para>
        <para>
            さらに、もしGradleモデルがより早く実行されることにより、ユーザーインターフェースは優れたものになるでしょう。
            例えば、デーモンは次のようなケースで有効となるかもしれません。
            <itemizedlist>
                <listitem>統合開発環境で入力補完する場合</listitem>
                <listitem>GUIでビルド状況を表示する場合</listitem>
                <listitem>コマンドラインインターフェースでのタブ補完する場合</listitem>
            </itemizedlist>
        </para>
        <para role="original">
            In general, snappy behavior of the build tool is always handy.
            If you try using the daemon for your local builds it's going to be hard
            for you to go back to regular use of Gradle.
        </para>
        <para>
            一般的には、ビルドツールの軽快な動作は常に便利です。
            デーモンをローカルで使い始めると、通常のGradle利用に戻りたくなくなるでしょう。
        </para>
        <para role="original">
            The Tooling API (see <xref linkend="embedding"/>)
            uses the daemon all the time, e.g. you cannot officially use the Tooling API without the daemon.
            This means that if you use the STS Gradle plugin for Eclipse or new Intellij IDEA plugin (IDEA>10)
            the daemon acts behind the hood.
        </para>
        <para>
            ツールAPI (参照 <xref linkend="embedding"/>)
            は常にデーモンを利用しています。つまり、通常デーモンなしでツールAPIを使えません。
            したがって、EclipseのSTS GradleプラグインやIDEA10以降に搭載されたIntelliJ IDEAプラグインを用いる場合、
            デーモンが背後で起動しています。
        </para>
        <para role="original">In future the daemon will offer more features:
            <itemizedlist>
                <listitem>Snappy up-to-date checks: use native file system change notifications (eg via jdk7 nio.2)
                    to preemptively perform up-to-date analysis.</listitem>
                <listitem>Even faster builds: preemptively evaluate projects, so that the model is ready
                    when the user next invokes Gradle.</listitem>
                <listitem>Did we mention faster builds? The daemon can potentially preemptively download dependencies
                    or check for new versions of snapshot dependencies.</listitem>
                <listitem>Utilize a pool of reusable processes available for compilation and testing.
                    For example, both the Groovy and Scala compilers have a large startup cost.
                    The build daemon could maintain a process with Groovy and/or Scala already loaded.</listitem>
                <listitem>Preemptive execution of certain tasks, for example compilation. Quicker feedback.</listitem>
                <listitem>Fast and accurate bash tab completion.</listitem>
                <listitem>Periodically garbage collect the Gradle caches.</listitem>
            </itemizedlist>
        </para>
        <para>
            <itemizedlist>今後は下記の機能が追加される予定である :
                <listitem>イケてる更新チェック : ファイルシステムの変更通知(jdk7 nio.2)を利用して
                    事前に更新されたファイルの差分分析を実行する</listitem>
                <listitem>より高速なビルド : 事前にプロジェクトを評価して、次にユーザーがGradleを起動する前には
                    モデルが準備されている状態にする</listitem>
                <listitem>より高速なビルドについて言ったっけ？デーモンは能力としては事前に依存ライブラリーをダウンロードして
                    新バージョンの依存ファイルのスナップショットがないか確認する</listitem>
                <listitem>コンパイルプロセスとテストプロセスの再利用化を促進する。
                    例えばGroovyとScalaコンパイラーの起動には多大なコストがかかる。
                    そこで、ビルドデーモンはGroovyとScala双方のコンパイラーが起動された状態を維持する。</listitem>
                <listitem>ある種のタスクは事前に実行しておく。例えば、コンパイルなど。より早いフィードバックを可能とする。</listitem>
                <listitem>速くて正確なbash上のタブ補完</listitem>
                <listitem>Gradleキャッシュを定期的にガーベージコレクトする</listitem>
            </itemizedlist>
        </para>
    </section>

    <section id='reusing_daemons'>
        <title>Reusing and expiration of daemons</title>
        <para>The basic idea is that the gradle command forks a daemon process, which performs the actual build.
            Subsequent invocations of the gradle command will reuse the daemon, avoiding the startup costs.
            Sometimes we cannot use an existing daemon because it is busy or its java version or jvm arguments are different.
            For exact details on when exactly new daemon process is forked read the dedicated section below.
            The daemon process automatically expire after 3 hours of idle time.
        </para>
        <para>元々の発想はgradleコマンドがデーモンプロセスを起動して、そのデーモンに実際のビルドを実行させることであった。
            そして引き続き実行されるgradleコマンドがデーモンを再利用して、起動にかかるコストが低下させられる。
        </para>
        <para>
            Here're all situations in which we fork a new daemon process:
            <itemizedlist>
                <listitem>If the daemon process is currently busy running some job, a brand new daemon process will be started.</listitem>
                <listitem>We fork a separate daemon process per java home. So even if there is some idle daemon waiting
                    for build requests but you happen to run build with a different java home then a brand new daemon will be forked.</listitem>
                <listitem>We fork a separate daemon process if the jvm arguments for the build are sufficiently different.
                    For example we will not fork a new daemon if a some system property has changed.
                    However if -Xmx memory setting change or some fundamental immutable system property changes (e.g. file.encoding)
                    then new daemon will be forked.
                </listitem>
                <listitem>At the moment daemon is coupled with particular version of Gradle.
                    This means that even if some daemon is idle but you are running the build
                    with a different version of Gradle, a new daemon will be started.
                    This also have a consequence for the <literal>--stop</literal> command line instruction:
                    You can only stop daemons that were started with the Gradle version you use when running <literal>--stop</literal>.
                </listitem>
            </itemizedlist>
            We plan to improve the ways of managing / pooling the daemons in future.
        </para>
        <para>
            新たなデーモンプロセスを起動する場面は以下のとおりである。
            <itemizedlist>
                <listitem>既存のデーモンがある処理を実行中の場合、新たなデーモンを起動する。</listitem>
                <listitem>複数のデーモンプロセスをjava環境毎に起動する。何も処理を実行していないデーモンが存在していて
                    別のjava環境でのビルドを実行した場合でも、新しいデーモンが起動するようになる。</listitem>
                <listitem>デーモンがあるバージョンのGradleと関連づいている場合、
                    つまりいくつかの稼動していないデーモンが存在し、ある別のバージョンのGradleが
                    実行されているような場合でも、新しいデーモンが起動される。
                    その結果<literal>--stop</literal>コマンドの入力が必要になる:
                    デーモンを止められる唯一の方法は<literal>--stop</literal>コマンドと同時に起動した場合のみである。
                </listitem>
            </itemizedlist>
            今後、デーモンの管理方法、プール方法の改善を行う予定である。
        </para>
    </section>

    <section id='daemon_usage_and_troubleshooting'>
        <title>使い方とトラブルシューティング<phrase role="original">Usage and troubleshooting</phrase></title>
        <para role="original">For command line usage take a look dedicated section in <xref linkend="gradle_command_line"/>.
            If you are tired of using the same command line options again and again, take a look at
            <xref linkend="sec:gradle_configuration_properties"/>.
            The section contains information on how to configure certain behavior of the daemon
            (including turning on the daemon by default) in a more 'persistent' way.
        </para>
        <para>コマンドラインの利用方法は別途参照<xref linkend="gradle_command_line"/>
            同じコマンドラインオプションを何度も使う場合は、こちらを参照
            <xref linkend="sec:gradle_configuration_properties"/>
            上記の節にはデーモンの振る舞いの記述法が(デフォルトでデーモンを起動する方法を含めて)詳細に記述されている。
        </para>
        <para role="original">
            As mentioned earlier we are actively improving the daemon. At the moment the daemon
            is marked as 'experimental' in the user interface. We encourage everyone to try the
            daemon out and get back to us with feedback (or even better: the pull requests).
            Some ways of troubleshooting the Gradle daemon:
            <itemizedlist>
                <listitem>If you have a problem with your build, try temporarily disabling the daemon
                    (you can pass the command line switch <literal>--no-daemon</literal>).</listitem>
                <listitem>Occasionally, you may want to stop the daemons either via the <literal>--stop</literal>
                    command line option or in a more forceful way.</listitem>
                <listitem>There is a daemon log file, which by default is located in the
                    Gradle user home directory.</listitem>
                <listitem>You may want to start the daemon in <literal>--foreground</literal>
                    mode to observe how the build is executed.</listitem>
            </itemizedlist>
        </para>
        <para>
            前述のとおり、ユーザーインターフェース上「experimental」と表示されている
            現在はデーモンを改善中である。ぜひデーモンを利用して頂き、フィードバック
            してもらいたい（。プル・リクエストはなおさら良い）。
            Gradleデーモンのトラブルシューティング法は以下のとおりである。
            <itemizedlist>
                <listitem>ビルドで問題が発生した場合は、一時的にデーモンを利用できなくする。
                （コマンドラインにスイッチ<literal>--no-daemon</literal>を渡すことで可能である）</listitem>
                <listitem>時おり、デーモンを停止したい場合があるだろう。その場合は<literal>--stop</literal>
                    コマンドラインオプションをつけることで強制的に停止できるであろう。</listitem>
                <listitem>ログファイルを利用する場合は、デフォルトでは
                    Gradleユーザーホームディレクトリーにある。</listitem>
                <listitem><literal>--feoreground</literal>を使ってデーモンを起動することで、
                    ビルドの実行状況を観察できる。</listitem>
            </itemizedlist>
        </para>
    </section>

    <section id="sec:daemon_properties">
        <title>デーモンのプロパティ<phrase role="original" >Daemon properties</phrase></title>
        <para role="original">Some daemon settings can be configured in <filename>gradle.properties</filename>.
            For example, jvm args - memory settings or the java home.
            Please find more information in <xref linkend="sec:gradle_properties_and_system_properties"/>
        </para>
        <para>デーモンの設定に関しては<filename>gradle.properties</filename>に記述できるものもある。
            例えば、jvmの引数に関する記述 - メモリーの設定、java homeの設定など。
            より詳細はこちらを参照。<xref linkend="sec:gradle_properties_and_system_properties"/>
        </para>
    </section>

</chapter>
