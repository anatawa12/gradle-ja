<chapter id="custom_plugins" xml:lang="ja">
    <title>カスタムプラグインの作成<phrase role="original">Writing Custom Plugins</phrase></title>

    <para role="original">A Gradle plugin packages up reusable pieces of build logic, which can be used across many different
        projects and builds. Gradle allows you to implement your own custom plugins, so you can reuse your
        build logic, and share it with others.
    </para>
    <para>Gradleプラグインは再利用可能なビルドロジックの断片をパッケージとしてまとめ、異なるプロジェクトやビルドで横断的に使えるようにします。
        Gradleは独自のカスタムプラグインの実装手段を提供していますので、独自のビルドロジックを再利用し、他のユーザーと共有することができます。
    </para>

    <para role="original">
        You can implement a custom plugin in any language you like, provided the implementation ends up compiled as
        bytecode. For the examples here, we are going to use Groovy as the implementation language. You could use
        Java or Scala instead, if you want.
    </para>
    <para>
        カスタムプラグインは、最終的にバイトコードへコンパイルできるなら、どんな言語でもお好みの言語で実装することができます。
        このサンプルでは実装言語としてGroovyを使います。
        かわりにJavaやScalaを使うこともできますので、お好きにどうぞ。
    </para>

    <section>
        <title>プラグインのパッケージング<phrase role="original">Packaging a plugin</phrase></title>
        <para role="original">There are several places where you can put the source for the plugin.
        </para>
        <para>プラグインのソースを配置できる場所はいくつかあります。
        </para>
        <variablelist>
            <varlistentry>
                <term>ビルドスクリプト<phrase role="original">Build script</phrase></term>
                <listitem>
                    <para role="original">You can include the source for the plugin directly in the build script. This has the benefit that the plugin is
                        automatically compiled and included in the classpath of the build script without you having to do anything.
                        However, the plugin is not visible outside the build script, and so you cannot reuse the plugin
                        outside the build script it is defined in.
                    </para>
                    <para>ビルドスクリプトの中にプラグインのソースを直接含めることができます。
                        この方法は、特になにもしなくてもプラグインが自動的にコンパイルされ、ビルドスクリプトのクラスパスに追加されるという利点があります。
                        しかし、プラグインはビルドスクリプトの外部から参照できないため、プラグインが定義されているビルドスクリプトの外部からは再利用できません。
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><filename>buildSrc</filename>プロジェクト<phrase role="original"><filename>buildSrc</filename> project</phrase></term>
                <listitem>
                    <para role="original">You can put the source for the plugin in the
                        <filename><replaceable>rootProjectDir</replaceable>/buildSrc/src/main/groovy</filename> directory.
                        Gradle will take care of compiling and testing the plugin and making it available on the
                        classpath of the build script. The plugin is visible to every build script used by the build.
                        However, it is not visible outside the build, and so you cannot reuse the plugin outside the
                        build it is defined in.
                    </para>
                    <para>プラグインのソースを<filename><replaceable>rootProjectDir</replaceable>/buildSrc/src/main/groovy</filename>ディレクトリに配置できます。
                        Gradleがプラグインのコンパイルとテストを行い、ビルドスクリプトのクラスパスで有効になるようにしてくれます。
                        プラグインは、ビルドで利用されるすべてのビルドスクリプトから参照可能です。
                        しかし、ビルドの外部からは参照できないので、プラグインが定義されているビルドの外部から再利用することはできません。
                    </para>
                    <para role="original">
                        See <xref linkend="organizing_build_logic"/> for more details about the <filename>buildSrc</filename>
                        project.</para>
                    <para>
                        <filename>buildSrc</filename>プロジェクトの詳細については、<xref linkend="organizing_build_logic"/>を参照してください。
                        </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>スタンドアロンプロジェクト<phrase role="original">Standalone project</phrase></term>
                <listitem>
                    <para role="original">You can create a separate project for your plugin. This project produces and
                        publishes a JAR which you can then use in multiple builds and share with others. Generally, this JAR
                        might include some custom plugins, or bundle several related task classes into a single library. Or
                        some combination of the two.
                    </para>
                    <para>プラグイン用に独立したプロジェクトを作ることができます。
                        このプロジェクトはJARを生成して発行するので、複数のビルドで利用したり、他のユーザーと共有することができます。
                        一般的に、このJARはカスタムプラグイン、ないしは関連するいくつかのタスククラスのバンドルする場合があります。
                        あるいは、その両方の組み合わせです。
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
        <para role="original"> In our examples, we will start with the plugin in the build script, to keep things simple.
            Then we will look at creating a standalone project.
        </para>
        <para>このサンプルでは、簡単のためにビルドスクリプト内のプラグインからはじめます。
            その後、スタンドアロンプロジェクトの作り方をみてみましょう。
        </para>
    </section>

    <section>
        <title>シンプルなプラグインの作成<phrase role="original">Writing a simple plugin</phrase></title>
        <para role="original">To create a custom plugin, you need to write an implementation of <apilink class="org.gradle.api.Plugin"/>.
            Gradle instantiates the plugin and calls the plugin instance's <apilink class="org.gradle.api.Plugin" method="apply"/> method when the
            plugin is used with a project. The project
            object is passed as a parameter, which the plugin can use to configure the project however it needs to.
            The following sample contains a greeting plugin, which adds a <literal>hello</literal> task to the project.
        </para>
        <para>カスタムプラグインを作るには、<apilink class="org.gradle.api.Plugin"/>の実装を作成する必要があります。
            Gradleはプラグインのインスタンスを生成し、プロジェクトでプラグインが利用されるときにプラグインインスタンスの<apilink class="org.gradle.api.Plugin" method="apply"/>メソッドを呼びます。
            プロジェクトオブジェクトがパラメータとして渡され、必要に応じてプラグインがプロジェクトを構成するのに使えます。
            次のサンプルは、プロジェクトに<literal>hello</literal>タスクを追加するgreetingプラグインを含んでいます。
        </para>

        <sample id="customPlugin" dir="userguide/organizeBuildLogic/customPlugin" title="カスタムプラグイン / A custom plugin">
            <sourcefile file="build.gradle"/>
            <output args="-q hello"/>
        </sample>

        <para role="original">
            One thing to note is that a new instance of a given plugin is created for each project it is applied to. Also
            note that the <apilink class="org.gradle.api.Plugin"/> class is a generic type. This example has it receiving the
            <apilink class="org.gradle.api.Plugin"/> type as a type parameter. It's possible to write unusual custom
            plugins that take different type parameters, but this will be unlikely (until someone figures out more
            creative things to do here).
        </para>
        <para>
            注意すべきは、指定されたプラグインが適用されるプロジェクト毎に、新しいプラグインのインスタンスが生成されることです。Also
            note that the <apilink class="org.gradle.api.Plugin"/> class is a generic type. This example has it receiving the
            <apilink class="org.gradle.api.Plugin"/> type as a type parameter. It's possible to write unusual custom
            plugins that take different type parameters, but this will be unlikely (until someone figures out more
            creative things to do here).
        </para>
    </section>

    <section>
        <title>ビルドから入力を得る<phrase role="original">Getting input from the build</phrase></title>

        <para role="original">Let's add a simple extension object to the project. Here we add a <literal>greeting</literal> extension object to the
            project, which allows you to configure the greeting.
        </para>
        <para>プロジェクトにシンプルなextensionオブジェクトを追加してみましょう
            ここでは、プロジェクトにextensionオブジェクト<literal>greeting</literal>を追加し、greetingタスクを構成可能にしています。
        </para>

        <sample id="customPluginWithConvention" dir="userguide/organizeBuildLogic/customPluginWithConvention" title="カスタムプラグインのextension / A custom plugin extension">
            <sourcefile file="build.gradle"/>
            <output args="-q hello"/>
        </sample>

        <para role="original">In this example, <classname>GreetingPluginExtension</classname> is a plain old Groovy object with a field called <literal>message</literal>.
            The extension object is added to the plugin list with the name <literal>greeting</literal>. This object then becomes available as a project property
            with the same name as the extension object.
        </para>
        <para>この例では、<classname>GreetingPluginExtension</classname>は<literal>message</literal>フィールドを持つPOGO(plain old Groovy object)です。
            extensionオブジェクトは<literal>greeting</literal>という名前でプラグインリストに追加されます。
            このオブジェクトは、extensionオブジェクトと同じ名前のプロジェクトプロパティとして有効になります。
        </para>

        <para role="original">Oftentimes, you have several related properties you need to specify on a single plugin. Gradle adds a configuration closure block for each extension object, so you
            can group settings together. The following example shows you how this works.
        </para>
        <para>しばしば、ひとつのプラグインに対していくつかの関連したプロパティを指定する必要がある場合があります。
           Gradleはそれぞれのextensionオブジェクトに対してコンフィグレーションクロージャブロックを追加するので、
           グループの設定をまとめて行うことができます。
           次のサンプルは、これがどのように働くのかを示しています。
        </para>

        <sample id="customPluginWithAdvancedConvention" dir="userguide/organizeBuildLogic/customPluginWithAdvancedConvention" title="コンフィグレーションクロージャ付きのカスタムプラグイン / A custom plugin with configuration closure">
            <sourcefile file="build.gradle"/>
            <output args="-q hello"/>
        </sample>

        <para role="original">In this example, several settings can be grouped together within the <literal>greeting</literal> closure.
            The name of the closure block in the build script (<literal>greeting</literal>) needs to match the extension object name.
            Then, when the closure is executed, the fields on the extension object will be mapped to the variables within the closure
            based on the standard Groovy closure delegate feature.
        </para>
        <para>この例では、<literal>greeting</literal>クロージャ内にいくつかの設定をグループ化してまとめることができています。
            ビルドスクリプトにおけるクロージャブロックの名前(<literal>greeting</literal>)は、extensionオブジェクトの名前と一致している必要があります。
            そして、クロージャが実行されると、Groovyの標準のクロージャ委譲機能に基づいて、extensionオブジェクトのフィールドはクロージャ内の変数にマップされます。
        </para>
    </section>

    <section>
        <title>カスタムタスクやプラグインでファイルを扱う<phrase role="original">Working with files in custom tasks and plugins</phrase></title>
        <para role="original">
            When developing custom tasks and plugins, it's a good idea to be very flexible when accepting input configuration for file locations.
            To do this, you can leverage the <apilink class="org.gradle.api.Project" method="file(java.lang.Object)"/> method to resolve values to files as late as possible.
        </para>
        <para>
            カスタムタスクやプラグインを開発するとき、ファイルロケーションの入力コンフィグレーションを柔軟に行えるようにするのは良いアイデアです。
            これを実現するにあたり、ファイルに対する値の解決をなるべく遅らせるために<apilink class="org.gradle.api.Project" method="file(java.lang.Object)"/>メソッドを活用できます
        </para>
        <sample id="lazyFileProperties" dir="userguide/tasks/customTaskWithFileProperty" title="ファイルプロパティの遅延評価 / Evaluating file properties lazily">
            <sourcefile file="build.gradle"/>
            <output args="-q sayGreeting"/>
        </sample>
        <para role="original">
            In this example, we configure the <literal>greet</literal> task <literal>destination</literal> property as a closure, which is evaluated with
            the <apilink class="org.gradle.api.Project" method="file(java.lang.Object)"/> method to turn the return value of the closure into a file object
            at the last minute. You will notice that in the example above we specify the <literal>greetingFile</literal> property value after we have
            configured to use it for the task. This kind of lazy evaluation is a key benefit of accepting any value when setting a file property, then
            resolving that value when reading the property.
        </para>
        <para>
            この例では、<literal>greet</literal>タスクの<literal>destination</literal>プロパティをクロージャで定義したので、
            クロージャの戻り値をfileオブジェクトに変換することが必要になる直前に<apilink class="org.gradle.api.Project" method="file(java.lang.Object)"/>メソッドによって評価されます。
            上記のサンプルでは、タスクで値を利用するコンフィグレーションを行った後で<literal>greetingFile</literal>プロパティの値を指定していることに気づくでしょう。
            この種の遅延評価は、ファイルプロパティを設定する際に任意の値を受け入れ、そしてプロパティの読み出し時に値を解決することができるという重要なメリットをもたらします。
        </para>
    </section>

    <section>
        <title>スタンドアロンプロジェクト<phrase role="original">A standalone project</phrase></title>
        <para role="original">Now we will move our plugin to a standalone project, so we can publish it and share it with others.
            This project is simply a Groovy project that produces a JAR containing the plugin classes.
            Here is a simple build script for the project. It applies the Groovy plugin, and adds the Gradle API
            as a compile-time dependency.
        </para>
        <para>それでは、プラグインをスタンドアロンプロジェクトに移動して、発行して他のユーザーと共有できるようにしましょう。
            このプロジェクトは、プラグインクラスを含むJARを発行する単なるGroovyプロジェクトです。
            プロジェクトに対するシンプルなビルドスクリプトはこのようになります。
            Groovyプラグインを適用して、コンパイル時の依存関係としてGradle APIを追加しています。
        </para>

        <sample id="customPluginStandalone" dir="customPlugin/plugin" title="カスタムプラグインに対するビルド / A build for a custom plugin" includeLocation="true">
            <sourcefile file="build.gradle" snippet="use-plugin"/>
        </sample>

	<para role="original">
            So how does Gradle find the <apilink class="org.gradle.api.Plugin"/> implementation? The answer is you need to provide a properties file in the jar's
	    <filename>META-INF/gradle-plugins</filename> directory that matches the id of your plugin.
	</para>
	<para>
        Gradleはどのようにして<apilink class="org.gradle.api.Plugin"/>の実装を探すのでしょうか？
        その答えは、JARの<filename>META-INF/gradle-plugins</filename>ディレクトリに、
        プラグインのIDに対応するプロパティファイルを提供する必要があるということです。
	</para>
        <sample id="customPluginStandalone" dir="customPlugin/plugin" title="カスタムプラグインに対するワイヤリング / Wiring for a custom plugin">
            <sourcefile file="src/main/resources/META-INF/gradle-plugins/org.samples.greeting.properties"/>
        </sample>

	<para role="original">
	    Notice that the properties filename matches the plugin id and is placed in the resources folder, and
	    that the <literal>implementation-class</literal> property identifies the <apilink class="org.gradle.api.Plugin"/> implementation class.
	</para>
	<para>
	    プロパティファイルの名前がプラグインIDと一致していてリソースフォルダに配置されていること、
	    <literal>implementation-class</literal>プロパティに<apilink class="org.gradle.api.Plugin"/>の実装クラスを指定していることに注意してください。
	</para>

        <section>
            <title>Creating a plugin id</title>
            <para>
                Plugin ids are fully qualified in a manner similar to Java packages (i.e. a reverse domain name).  This helps to avoid
                collisions and provides a way to group plugins with similar ownership.
            </para>
            <para>
                Your plugin id should be a combination of components that reflect namespace (a reasonable pointer to you or your organization)
                and the name of the plugin it provides.  For example if you had a Github account named “foo” and your plugin was named “bar”,
                a suitable plugin id might be <literal>com.github.foo.bar</literal>.  Similarly, if the plugin was developed at the baz organization,
                the plugin id might be <literal>org.baz.bar</literal>.
            </para>
            <para>
                Plugin ids should conform to the following:
            </para>
            <itemizedlist>
                <listitem>May contain any alphanumeric character, '.', and '-'.</listitem>
                <listitem>Must contain at least one '.' character separating the namespace from the name of the plugin.</listitem>
                <listitem>Conventionally use a lowercase reverse domain name convention for the namespace.</listitem>
                <listitem>Conventionally use only lowercase characters in the name.</listitem>
                <listitem><literal>org.gradle</literal> and <literal>com.gradleware</literal> namespaces may not be used.</listitem>
                <listitem>Cannot start or end with a '.' character.</listitem>
                <listitem>Cannot contain consecutive '.' characters (i.e. '..').</listitem>
            </itemizedlist>
            <para>
                Although there are conventional similarities between plugin ids and package names, package names are generally more detailed than is
                necessary for a plugin id.  For instance, it might seem reasonable to add “gradle” as a component of your plugin id, but since plugin
                ids are only used for Gradle plugins, this would be superfluous.  Generally, a namespace that identifies ownership and a name are all
                that are needed for a good plugin id.
            </para>
        </section>

        <section>
            <title>Publishing your plugin</title>
            <para>
                If you are publishing your plugin internally for use within your organization, you can publish it like
                any other code artifact.  See the <link linkend="publishing_ivy">ivy</link> and <link linkend="publishing_maven">maven</link>
                chapters on publishing artifacts.
            </para>
            <para>
                If you are interested in publishing your plugin to be used by the wider Gradle community, you can publish it to the
                <ulink url="http://plugins.gradle.org">Gradle plugin portal</ulink>.  This site provides the ability to search for and
                gather information about plugins contributed by the Gradle community.  See the instructions
                <ulink url="http://plugins.gradle.org/submit">here</ulink> on how to make your plugin available on this site.
            </para>
        </section>

        <section>
            <title>別のプロジェクトでプラグインを使う<phrase role="original">Using your plugin in another project</phrase></title>
            <para role="original">To use a plugin in a build script, you need to add the plugin classes to the build script's classpath. To
                do this, you use a “<literal>buildscript { }</literal>” block, as described in <xref linkend="sec:external_dependencies"/>.
                The following example shows how you might do this when the JAR containing the plugin has been published
                to a local repository:
            </para>
            <para>ビルドスクリプトでプラグインを使うためには、ビルドスクリプトのクラスパスにプラグインクラスを追加する必要があります。
                このために、<xref linkend="sec:external_dependencies"/>で説明したように、<literal>buildscript { }</literal>ブロックが使えます
                次のサンプルは、プラグインを含むJARがローカルリポジトリに発行済みのときにこれを行う方法を示しています:
            </para>
            <sample id="customPluginStandalone" dir="customPlugin/consumer" title="別のプロジェクトでカスタムプラグインを使う / Using a custom plugin in another project">
                <test args="-p../plugin uploadArchives"/>
                <test args="hello"/>
                <sourcefile file="build.gradle" snippet="use-plugin"/>
            </sample>
            <para>
                Alternatively, if your plugin is published to the plugin portal, you can use the incubating plugins DSL (see <xref linkend="sec:plugins_block" />)
                to apply the plugin:
            </para>
            <sample id="useCommunityPluginDSL" dir="plugin-dsl" title="Applying a community plugin with the plugins DSL">
                <sourcefile file="build.gradle" snippet="use-community-plugin"/>
            </sample>
        </section>

        <section>
            <title>プラグインに対するテストの作成<phrase role="original">Writing tests for your plugin</phrase></title>
            <para role="original">You can use the <apilink class="org.gradle.testfixtures.ProjectBuilder"/> class to create
                <apilink class="org.gradle.api.Project"/> instances to use when you test your plugin implementation.
            </para>
            <para>プラグイン実装をテストするときには、<apilink class="org.gradle.api.Project"/>インスタンスを生成するために
                <apilink class="org.gradle.testfixtures.ProjectBuilder"/>クラスが利用できます。
            </para>
            <sample id="customPluginStandalone" dir="customPlugin/plugin" title="カスタムプラグインのテスト / Testing a custom plugin">
                <sourcefile file="src/test/groovy/org/gradle/GreetingPluginTest.groovy" snippet="test-plugin"/>
            </sample>
        </section>

        <section>
            <title>Using the Java Gradle Plugin development plugin</title>
            <para>You can use the incubating <link linkend="javaGradle_plugin">Java Gradle Plugin development plugin</link>
                to eliminate some of the boilerplate declarations in your build script and provide some basic validations
                of plugin metadata.  This plugin will automatically apply the <link linkend="java_plugin">Java plugin</link>,
                add the <literal>gradleApi()</literal> dependency to the compile configuration, and perform plugin metadata
                validations as part of the <literal>jar</literal> task execution.
            </para>
            <sample id="useJavaGradlePluginPlugin" dir="javaGradlePlugin" title="Using the Java Gradle Plugin Development plugin">
                <sourcefile file="build.gradle" snippet="use-java-gradle-plugin-plugin"/>
            </sample>
        </section>
    </section>

    <section>
        <title>複数のドメインオブジェクトの管理<phrase role="original">Maintaining multiple domain objects</phrase></title>

        <para role="original">Gradle provides some utility classes for maintaining collections of objects, which work well with the Gradle build language.</para>
        <para>Gradleはオブジェクトのコレクションを管理するためのユーティリティクラスを提供しており、それらはGradleビルド言語の中で活用できます。
        </para>

        <sample id="domainObjectContainer" dir="userguide/organizeBuildLogic/customPluginWithDomainObjectContainer" title="ドメインオブジェクトの管理 / Managing domain objects">
            <sourcefile file="build.gradle"/>
            <output args="-q books"/>
        </sample>
        <para role="original">
            The <apilink class="org.gradle.api.Project" method="container(java.lang.Class)"/> methods create instances of <apilink class="org.gradle.api.NamedDomainObjectContainer"/>, that have many useful methods for managing and configuring the objects. In order
            to use a type with any of the <literal>project.container</literal> methods, it MUST expose a property named “<literal>name</literal>”
            as the unique, and constant, name for the object. The <literal>project.container(Class)</literal> variant of the container method creates
            new instances by attempting to invoke the constructor of the class that takes a single string argument, which is the desired name of the object.
            See the above link for <literal>project.container</literal> method variants that allow custom instantiation strategies.
        </para>
        <para>
            <apilink class="org.gradle.api.Project" method="container(java.lang.Class)"/>メソッドは、
            オブジェクトの管理やコンフィグレーションに便利な多くのメソッドを提供する
            <apilink class="org.gradle.api.NamedDomainObjectContainer"/>のインスタンスを生成します。
            <literal>project.container</literal>のメソッドでタイプを扱うためには、
            オブジェクトのユニークかつ固定の名前を提供する“<literal>name</literal>”プロパティを公開しなければなりません。
            <literal>project.container(Class)</literal>メソッドおよびそのバリエーションは、
            単一のstringを引数として取るクラスのコンストラクタの実行を試みることで新しいインスタンスを生成します。
            このとき、引数はオブジェクトの名前となることが期待されます。
            カスタムのインスタンス化戦略を可能にする<literal>project.container</literal>メソッドのバリエーションについては、上記のリンクを参照してください。
        </para>
    </section>
</chapter>
