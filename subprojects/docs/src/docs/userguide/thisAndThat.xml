<!--
  ~ Copyright 2009 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='tutorial_this_and_that' xml:lang="ja">
    <title>いろんなあれこれについてのチュートリアル<phrase role="original">Tutorial - 'This and That'</phrase></title>
    <section id='sec:directory_creation'>
        <title>ディレクトリの作成<phrase role="original">Directory creation</phrase></title>
        <para role="original">There is a common situation, that multiple tasks depend on the existence of a directory. Of course you can
            deal with this by adding a
            <literal>mkdir</literal>
            to the beginning of those tasks. But this is kind of bloated. There is a better solution (works only if the
            tasks that need the directory have a
            <emphasis>dependsOn</emphasis>
            relationship):
        </para>
        <para>あるディレクトリが存在していることを前提にして、様々なタスクを作成することはよくあると思います。もちろんそういったタスクのはじめにいちいち<emphasis>mkdir</emphasis>を呼び出してもいいのですが、それではやはり冗長です。ディレクトリを作成するためのタスクを別に作成して、そのタスクに依存するように宣言するほうがいいでしょう。</para>
        <sample id="makeDirectory" dir="userguide/tutorial/makeDirectory" title="mkdirでディレクトリを作成する / Directory creation with mkdir">
            <sourcefile file="build.gradle"/>
            <output args="-q compile"/>
        </sample>
        <para role="original">But Gradle offers you also <emphasis>Directory Tasks</emphasis> to deal with this.</para>
        <para>しかし、Gradleではもっといい方法があります。<emphasis>Directoryタスク</emphasis>です。</para>
        <sample id="directoryTask" dir="userguide/tutorial/directoryTask" title="Directory creation with Directory tasks">
            <sourcefile file="build.gradle"/>
            <output args="-q otherResources"/>
        </sample>
        <para role="original">A <emphasis>Directory Task</emphasis>
            is a simple task whose name is a relative path to the project dir
            <footnote>
                <para role="original">The notation <literal>dir('/somepath')</literal> is a convenience method for
                    <literal>tasks.add('somepath', type: Directory)</literal>
                </para>
            </footnote>
            . During the execution phase the directory corresponding to this path gets created if it does not exist yet.
            Another interesting thing to note in this example, is that you can also pass tasks objects to the dependsOn
            declaration of a task.
        </para>
        <para><emphasis>Directoryタスク</emphasis>はプロジェクトディレクトリからの相対パスを名前とする単純なタスクです。
            <footnote>
                <para><literal>dir('/somepath')</literal>は<literal>tasks.add('somepath', type: Directory)</literal>の略記法です。</para>
            </footnote>
            実行フェーズでそのパスにディレクトリがなければ作成します。さらに上の例で注目すべきところは、DirectoryタスクをタスクのdependsOn宣言に引き渡すことができるという点です。</para>
    </section>
    <section id='sec:gradle_properties_and_system_properties'>
        <title>Gradleプロパティとシステムプロパティ<phrase role="original">Gradle properties and system properties</phrase></title>
        <para role="original">Gradle offers a variety of ways to add properties to your build. With the <option>-D</option> command line
            option you can pass a system property to the JVM which runs Gradle. The <option>-D</option> option of the
            <command>gradle</command> command has the same effect as the <option>-D</option> option of the
            <command>java</command> command.
        </para>
        <para>Gradleでは、さまざまな方法でビルドにプロパティ値を渡すことができます。<option>-D</option>オプションを使えばGradleを実行しているJVMにシステムプロパティを渡すことができます。<command>gradle</command>コマンドは<option>-D</option>オプションを<command>java</command>コマンドへの<option>-D</option>オプションと同じように処理します。</para>
        <para role="original">You can also directly add properties to your project objects using properties files. You can place a
            <filename>gradle.properties</filename> file in the Gradle user home directory (defaults to
            <filename><replaceable>USER_HOME</replaceable>/.gradle</filename>) or in your project directory. For
            multi-project builds you can place <filename>gradle.properties</filename> files in any subproject directory.
            The properties of the <filename>gradle.properties</filename> can be accessed via the project object. The
            properties file in the user's home directory has precedence over property files in the project directories.
        </para>
        <para>propertiesファイルを記述することで、projectオブジェクトに直接プロパティを追加することもできます。このプロパティファイル<filename>gradle.properties</filename>はGradleのホームディレクトリ(デフォルトでは<filename><replaceable>USER_HOME</replaceable>/.gradle</filename>)かプロジェクトディレクトリに作成します。マルチプロジェクトの場合、gradle.properteisはすべてのサブプロジェクトディレクトリに置くことができます。<filename>gradle.properties</filename>に記述されたプロパティはprojectオブジェクトからアクセスすることができます。なお、ホームディレクトリの<filename>gradle.properties</filename>は、プロジェクトディレクトリの<filename>gradle.properties</filename>の定義を上書きし優先的に使用されます。</para>
        <para role="original">You can also add properties directly to your project object via the <option>-P</option>
            command line option. For more exotic use cases you can even pass properties <emphasis>directly</emphasis>
            to the project object via system and environment properties. For example if you run a build on a continuous
            integration server where you have no admin rights for the <emphasis>machine</emphasis>. Your build script
            needs properties which values should not be seen by others. Therefore you can't use the <option>-P</option>
            option. In this case you can add an environment property in the project administration section (invisible to
            normal users).
            <footnote>
                <para role="original">
                    <emphasis>Teamcity</emphasis> or <emphasis>Bamboo</emphasis> are for example CI servers which
                    offer this functionality.
                </para>
            </footnote>
            If the environment property follows the pattern
            <literal>ORG_GRADLE_PROJECT_<replaceable>propertyName</replaceable>=somevalue</literal>,
            <literal>propertyName</literal> is added to your project object. If in the future CI servers support Gradle
            directly, they might start Gradle via its main method. Therefore we already support the same mechanism for
            system properties. The only difference is the pattern, which is
            <literal>org.gradle.project.<replaceable>propertyName</replaceable></literal>.
        </para>
        <para>projectオブジェクトに追加するプロパティは、コマンドラインオプションの<option>-P</option>オプションで設定することもできます。また、さらにエキゾチックな使い方に備えて、環境変数やシステムプロパティからプロパティを<emphasis>直接</emphasis>取り込む機能もあります。たとえば、管理権限のないマシン上のCIサーバーで継続的なビルドを行う場合について考えてみましょう。自分のビルドスクリプトに、他人から見られたくない値をプロパティとして設定する必要がある場合、<option>-P</option>オプションは使えません。このときは、プロジェクトの管理者のみアクセスできるようなCIサーバー上のページで環境変数を設定することで、ビルドスクリプトにプロパティを渡すことができます。
            <footnote>
                <para><emphasis>Teamcity</emphasis>や<emphasis>Bamboo</emphasis>といったCIサーバーがこの機能を持っています。</para>
            </footnote>
            ここで設定する環境変数名にはあるパターンがあり、<literal>ORG_GRADLE_PROJECT_<replaceable>propertyName</replaceable>=somevalue</literal>という環境変数を設定した場合<literal>propertyName</literal>というプロパティがプロジェクトに設定されます。もし将来的にCIサーバーがGradleを直接サポートするようになったときには、CIサーバーはGradleのmainメソッドを呼び出してビルドを開始するかもしれません。そのときのために、Gradleはシステムプロパティを使って同様のメカニズムを実装しています。パターンが<literal>org.gradle.project.<replaceable>propertyName</replaceable></literal>となっていること以外は環境変数の場合と同じです。</para>
        <para role="original">With the <filename>gradle.properties</filename> files you can also set system properties. If a property
            in such a file has the prefix <literal>systemProp.</literal> the property and its value are added to the 
            system properties, without the prefix.
        </para>
        <para><filename>gradle.properties</filename>ファイルでもシステムプロパティを設定することができます。ファイル内でプレフィックスに<literal>systemProp</literal>をつけてプロパティを設定することで、プレフィックス部分をのぞいたプロパティ名でシステムプロパティに追加されます。</para>
        <sample id="properties" dir="userguide/tutorial/properties" title="gradle.propertiesでプロパティを設定する / Setting properties with a gradle.properties file">
            <sourcefile file="gradle.properties"/>
            <sourcefile file="build.gradle"/>
            <output args="-q -PcommandLineProjectProp=commandLineProjectPropValue -Dorg.gradle.project.systemProjectProp=systemPropertyValue printProps"/>
        </sample>
        <section id='sub:checking_for_project_properties'>
            <title>プロジェクトプロパティの確認<phrase role="original">Checking for project properties</phrase></title>
            <para role="original">You can access a project property in your build script simply by using its name as you would use a
                variable. In case this property does not exists, an exception is thrown and the build fails. If your
                build script relies on optional properties the user might set for example in a gradle.properties file,
                you need to check for existence before you can access them. You can do this by using the method
                <literal>hasProperty('propertyName')</literal>
                which returns
                <literal>true</literal>
                or <literal>false</literal>.
            </para>
            <para>プロジェクトに設定されたプロパティは、ビルドスクリプト内では単にプロパティ名でアクセスできます。この場合、アクセスしたプロパティがプロジェクトに設定されてなければ例外が発生してビルドは失敗します。プロパティが設定されてても設定されてなくてもいいようにしたい場合、たとえばユーザーにgradle.propertiesでプロパティをセットさせたいときなどは、アクセスする前にプロパティがセットされているかどうか確認しましょう。<literal>hasProperty('propertyName')</literal>がtrueやfalseを返すので、それでプロパティの存在を確認できます。</para>
        </section>
    </section>

    <section id="sec:gradle_configuration_properties">
        <title>Configuring gradle via gradle.properties</title>
        <para>The idea is that certain settings like jvm memory settings, java home, deamon on/off
            are best useful if they can versioned with the project in your VCS so that
            the entire team can work with consistent environment.
            You can place those settings in the <filename>gradle.properties</filename>.
            The configuration is applied in following order
            (in case an option is configured in multiple locations the last one wins):
            <itemizedlist>
                <listitem>from <filename>gradle.properties</filename> located in <literal>gradle user home</literal>.</listitem>
                <listitem>from <filename>gradle.properties</filename> located in project build dir.</listitem>
                <listitem>from system properties, e.g. when <literal>-Dsome.property</literal> is used in the command line.</listitem>
            </itemizedlist>
        </para>
        <para>
            The following properties can be used to configure gradle:
            <varlistentry>
                <term><literal>org.gradle.daemon</literal></term>
                <listitem><para>When set to <literal>true</literal> the gradle daemon is to run the build.
                    This is our favorite property because we nearly always run gradle jobs with the daemon.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.gradle.jvmargs</literal></term>
                <listitem><para>Specifies the jvmargs used for the daemon process.
                    In future this setting will be honored by regular gradle builds.
                    Currently, only daemon uses it.
                    The setting is particularly useful for tweaking memory settings.
                    At the moment the default settings are pretty generous with regards to memory.</para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.gradle.java.home</literal></term>
                <listitem><para>Specifies the java home for the daemon process.
                    In future this setting will be honored by regular gradle builds.
                    Currently, only daemon uses it.
                    The value can be set to either <literal>jdk</literal> or <literal>jre</literal> location,
                    however, depending on what does your build do, <literal>jdk</literal> is safer.
                    Reasonable default is used if the setting is unspecified.</para>
                </listitem>
            </varlistentry>
        </para>
    </section>

    <section id='sec:accessing_the_web_via_a_proxy'>
        <title>プロキシを通してWebにアクセスする<phrase role="original">Accessing the web via a proxy</phrase></title>
        <para role="original">Setting a proxy for web access (for example for downloading dependencies) is easy. Gradle does not need to
            provide special functionality for this. The JVM can be instructed to go via proxy by setting certain system
            properties. You could set these system properties directly in your build script with <literal>
                System.properties['proxy.proxyUser'] = 'userid'</literal>. An arguably nicer way is shown in
            <xref linkend='sec:gradle_properties_and_system_properties'/>. Your gradle.properties file could look like
            this:
        </para>
        <para>Webにアクセスする(依存関係に含まれるライブラリをダウンロードするときなど)ためのプロキシの設定も簡単にできます。Gradle自身がこのために特別な機能を用意しているわけではありませんが、規定のシステムプロパティを設定すればJVMがプロキシを使用してくれます。ビルドスクリプトで<literal>System.properties['proxy.proxyUser'] = 'userid'</literal>とやってもいいですが、システムプロパティを設定するためのよりよい方法は<xref linkend='sec:gradle_properties_and_system_properties'/>で見てきたとおりです。次のような<filename>gradle.properties</filename>で設定できます。</para>
        <example>
            <title>プロキシを通してWebにアクセスする<phrase role="original">Accessing the web via a proxy</phrase></title>
            <para><filename>gradle.properties</filename></para>
            <programlisting><![CDATA[
systemProp.http.proxyHost=www.somehost.org
systemProp.http.proxyPort=8080
systemProp.http.proxyUser=userid
systemProp.http.proxyPassword=password
systemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost	
]]></programlisting>
        </example>
        <para role="original">We could not find a good overview for all possible proxy settings. One place to look are the constants
            in a file from the ant project. Here a
            <ulink url='http://svn.apache.org/viewvc/ant/core/trunk/src/main/org/apache/tools/ant/util/ProxySetup.java?view=markup&amp;pathrev=556977'>
                link
            </ulink> to the svn view. The other is a
            <ulink url='http://download.oracle.com/javase/6/docs/technotes/guides/net/properties.html'>
                Networking Properties page
            </ulink> from the JDK docs. If anyone knows a better overview please let us know via the mailing list.
        </para>
        <section id='sub:ntlm_authentication'>
            <title>NTLM Authentication</title>
            <para>If your proxy requires NTLM authentication, you may need to provide the authentication domain as well as the username and password.
                There are 2 ways that you can provide the domain for authenticating to a NTLM proxy:
                <itemizedlist>
                    <listitem>Set the <literal>http.proxyUser</literal> system property to a value like <literal><replaceable>domain</replaceable>/<replaceable>username</replaceable></literal>.
                    </listitem>
                    <listitem>Provide the authentication domain via the <literal>http.auth.ntlm.domain</literal> system property.
                    </listitem>
                </itemizedlist>
            </para>
        </section>
    </section>
    <section id="sec:configuring_using_external_script">
        <title>外部のビルドスクリプトをプロジェクトに取り込む<phrase role="original">Configuring the project using an external build script</phrase></title>
        <para role="original">You can configure the current project using an external build script. All of the Gradle build language
            is available in the external script. You can even apply other scripts from the external script.
        </para>
        <para>外部のビルドスクリプトを取り込んでプロジェクトを設定することができます。取り込む外部スクリプト内では、Gradleの文法がすべて使用できます。その外部スクリプトから、さらに別の外部スクリプトを取り込むことさえ可能です。</para>
        <sample id="configureProjectUsingScript" dir="userguide/tutorial/configureProjectUsingScript" title="外部のビルドスクリプトファイルでプロジェクトの設定を行う / Configuring the project using an external build script">
            <sourcefile file="build.gradle"/>
            <sourcefile file="other.gradle"/>
            <output args="-q hello"/>
        </sample>
    </section>
    <section id='sec:configuring_arbitrary_objects'>
        <title>任意のオブジェクトを設定する<phrase role="original">Configuring arbitrary objects</phrase></title>
        <para role="original">You can configure arbitrary objects in the following very readable way.
        </para>
        <para>非常に読みやすい方法で任意のオブジェクトを設定できます。</para>
        <sample id="configureObject" dir="userguide/tutorial/configureObject" title="任意のオブジェクトを設定する / Configuring arbitrary objects">
            <sourcefile file="build.gradle"/>
            <output args="-q configure"/>
        </sample>
    </section>
    <section>
        <title>外部スクリプトから任意のオブジェクトを設定する<phrase role="original">Configuring arbitrary objects using an external script</phrase></title>
        <para role="original">You can also configure arbitrary objects using an external script.
        </para>
        <para>任意のオブジェクトを設定するのは、外部のスクリプトからでも可能です。</para>
        <sample id="configureObjectUsingScript" dir="userguide/tutorial/configureObjectUsingScript" title="外部スクリプトから任意のオブジェクトを設定する / Configuring arbitrary objects using a script">
            <sourcefile file="build.gradle"/>
            <sourcefile file="other.gradle"/>
            <output args="-q configure"/>
        </sample>
    </section>
    <section id='sec:caching'>
        <title>キャッシング<phrase role="original">Caching</phrase></title>
        <para role="original">To improve responsiveness Gradle caches all compiled scripts by default. This includes all build scripts,
            initialization scripts, and other scripts. The first time you run a build for a project, Gradle creates a
            <filename>.gradle</filename> directory in which it puts the compiled script. The next time you run this
            build, Gradle uses the compiled script, if the script has not changed since it was compiled.  Otherwise the
            script gets compiled and the new version is stored in the cache. If you run Gradle with the
            <option>-C rebuild</option> option, the cached script is discarded and the script is compiled and stored
            in the cache. This way you can force Gradle to rebuild the cache.
        </para>
        <para>応答速度を上げるため、Gradleはコンパイル済みのスクリプトをデフォルトですべてキャッシュします。キャッシュ対象にはすべてのビルドスクリプトや初期化スクリプト、その他のスクリプトまで含まれています。最初にプロジェクトをビルドしたとき、Gradleは<filename>.gradle</filename>ディレクトリをプロジェクトディレクトリに作成し、そこのコンパイル済みのスクリプトを保存します。次にプロジェクトをビルドしたときにはGradleはそのコンパイル済みのスクリプトを使用します。前回コンパイルしたときからスクリプトが変更されていた場合は再度コンパイルして保存します。Gradleを実行するときに、リビルドオプションの<option>-C</option>オプションを使えばキャッシュはすべて破棄され、再度コンパイル、保存されます。</para>
    </section>
</chapter>
