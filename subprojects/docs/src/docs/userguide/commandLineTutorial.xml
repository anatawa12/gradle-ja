<!--
  ~ Copyright 2009 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id="tutorial_gradle_command_line" xml:lang="ja">
    <title>Gradleのコマンドラインを使う <phrase role="original">Using the Gradle Command-Line</phrase></title>
    <para role="original">This chapter introduces the basics of the Gradle command-line. You run a build using the
        <command>gradle</command> command, which you have already seen in action in previous chapters.</para>
    <para>本章では、Gradleのコマンドラインについて基本的な部分を紹介します。これまで動かしてきたように、Gradleのビルドは<command>gradle</command>コマンドで実行します。</para>
    <section>
        <title>複数のタスクを実行する<phrase role="original">Executing multiple tasks</phrase></title>
        <para role="original">You can execute multiple tasks in a single build by listing each of the tasks on the command-line. For example,
            the command <userinput>gradle compile test</userinput> will execute the <literal>compile</literal> and
            <literal>test</literal> tasks. Gradle will execute the tasks in the order that they are listed on the
            command-line, and will also execute the dependencies for each task. Each task is executed once only,
            regardless of how it came to be included in the build: whether it was specified on the command-line, or it a
            dependency of another task, or both. Let's look at an example.</para>
        <para>
        一回のビルドで、複数のタスクを実行することができます。ビルドを実行するときに、タスクを並べて指定してください。たとえば、<userinput>gradle compile test</userinput>というコマンドを実行すれば、<literal>compile</literal>タスクと<literal>test</literal>タスクが実行されます。Gradleはタスクを列挙された順に実行するほか、それらが依存しているタスクも実行します。また、タスクが実行されるのはそれぞれ一度だけです。コマンドラインで明示的に指定されたタスクも、それらに依存して実行されるタスクも、またその両方に含まれるタスクも同様です。次の例を見てください。
        </para>
        <para role="original">
            Below four tasks are defined. Both <literal>dist</literal> and <literal>test</literal> depend on the
            <literal>compile</literal> task. Running <userinput>gradle dist test</userinput> for this build script
            results in the <literal>compile</literal> task being executed only once.</para>
        <para>
        この例では、四つのタスクが定義されており、<literal>dist</literal>と<literal>test</literal>はどちらも<literal>compile</literal>タスクに依存しています。このビルドスクリプトを呼び出して<userinput>gradle dist test</userinput>と実行しても、実行された二つのタスクから依存されている<literal>compile</literal>タスクは一度だけしか実行されません。
        </para>
        <figure>
            <title>Task間の依存関係<phrase role="original">Task dependencies</phrase></title>
            <imageobject>
                <imagedata fileref="img/commandLineTutorialTasks.png"/>
            </imageobject>
        </figure>
        <sample id="multipleTasksFromCommandLine" dir="userguide/tutorial/excludeTasks" title="複数のタスクの実行 / Executing multiple tasks">
            <sourcefile file="build.gradle"/>
            <output args="dist test"/>
        </sample>
        <para role="original">
            Because each task is executed once only, executing <userinput>gradle test test</userinput> is exactly the same
            as executing <userinput>gradle test</userinput>.</para>
        <para>タスクが一度だけ実行されるということは、<userinput>gradle test test</userinput>と打ち込んでも<userinput>gradle test</userinput>と打ち込んでも、実行される処理は全く同じだということです。</para>
    </section>

    <section id="sec:excluding_tasks_from_the_command_line">
        <title>タスクを除外してビルドする<phrase role="original">Excluding tasks</phrase></title>
        <para role="original">You can exclude a task from being executed using the <option>-x</option> command-line option and providing
            the name of the task to exclude. Let's try this with the sample build file above.</para>
        <para><option>-x</option>オプションでタスクの名前を指定することで、そのタスクを除外してビルドを実行することができます。先ほどのサンプルで試してみましょう。</para>
        <sample id="excludeTask" dir="userguide/tutorial/excludeTasks" title="タスクの除外 / Excluding tasks">
            <output args="dist -x test"/>
        </sample>
        <para role="original">You can see from the output of this example, that the <literal>test</literal> task is not executed, even
            though it is a dependency of the <literal>dist</literal> task. You will also notice that the
            <literal>test</literal> task's dependencies, such as <literal>compileTest</literal>
            are not executed either. Those dependencies of <literal>test</literal> that are required by another task, such as
            <literal>compile</literal>, are still executed.</para>
        <para><literal>dist</literal>タスクは<literal>test</literal>に依存しているのですが、この例では<literal>test</literal>タスクは実行されていないことが分かります。また、<literal>test</literal>タスクが依存しているタスク、たとえば<literal>compileTest</literal>タスクもやはり実行されていません。しかし、<literal>test</literal>タスクが依存しているタスクのうち、<literal>test</literal>以外からも依存されているタスク、つまり<literal>compile</literal>タスクは実行されているのです。</para>
    </section>

    <section id="sec:continue_build_on_failure">
        <title>エラー発生時にビルドを継続する <phrase role="original">Continuing the build when a failure occurs</phrase></title>
        <para role="original">By default, Gradle will abort execution and fail the build as soon as any task fails. This allows the build to complete sooner, but hides other failures
            that would have occurred. In order to discover as many failures as possible in a single build execution, you can use the <literal>--continue</literal> option.
        </para>
        <para>
            デフォルトでは、タスクが失敗するとすぐにGradleは実行を中止してビルドを失敗させます。これはビルドの完了は早くなりますが、発生するかもしれない他のエラーを隠してしまうかもしれません。
            一回のビルド実行でできるだけ多くのエラーを発見するには、<literal>--continue</literal>オプションを使用します。
        </para>
        <para role="original">When executed with <literal>--continue</literal>, Gradle will execute <emphasis>every</emphasis> task to be executed where all of the dependencies for that task completed without failure,
            instead of stopping as soon as the first failure is encountered. Each of the encountered failures will be reported at the end of the build.
        </para>
        <para>
            <literal>--continue</literal>オプションをつけてビルドすると、エラー発生時に即ビルドが停止されるのではなく、失敗せずに完了したタスクに依存するタスクは<emphasis>全て</emphasis>実行されるようになります。
            また、ビルド中に発生したエラーはビルド終了時に全てレポートされます。
        </para>
        <para role="original">If a task fails, any subsequent tasks that were depending on it will not be executed, as it is not safe to do so. For example, tests will not
            run if there is a compilation failure in the code under test; because the test task will depend on the compilation task (either directly or indirectly).
        </para>
        <para>
            タスクが失敗した場合、依存関係上の後続タスクは安全に実行できないため行われません。
            例えば、テストの際、コードのコンパイルでエラーが発生するとテストは実施されません。テストタスクはコンパイルタスクに直接的、間接的に依存しているからです。
        </para>
    </section>

    <section>
        <title>タスク名の省略<phrase role="original">Task name abbreviation</phrase></title>
        <para role="original">When you specify tasks on the command-line, you don't have to provide the full name of the task. You only need to provide enough of the
            task name to uniquely identify the task. For example, in the sample build above, you can execute task
            <literal>dist</literal> by running <userinput>gradle d</userinput>:</para>
        <para>タスク名をコマンドラインで指定するとき、タスク名をすべて入力する必要はありません。タスク名を一つに決定できるだけの文字を入力すればよいのです。先ほどの例で言えば、<userinput>gradle d</userinput>と入力すれば<literal>dist</literal>を実行できます。</para>
        <sample id="abbreviateTaskName" dir="userguide/tutorial/excludeTasks" title="タスク名の省略 / Abbreviated task name">
            <output args="di"/>
        </sample>
        <para role="original">You can also abbreviate each word in a camel case task name. For example, you can execute task <literal>compileTest</literal>
            by running <userinput>gradle compTest</userinput> or even <userinput>gradle cT</userinput></para>
        <para>キャメルケースで分割されたそれぞれの単語を省略することもできます。たとえば、<literal>compileTest</literal>というタスクだと、<userinput>gradle compTest</userinput>と入力したり、<userinput>gradle cT</userinput>と入力したりすることで実行できます。</para>
        <sample id="abbreviateCamelCaseTaskName" dir="userguide/tutorial/excludeTasks" title="キャメルケースのタスク名を省略 / Abbreviated camel case task name">
            <output args="cT"/>
        </sample>
        <para role="original">You can also use these abbreviations with the <option>-x</option> command-line option.</para>
        <para><option>-x</option>オプションで除外タスクを指定するときにも、同じようにタスク名を省略できます。</para>
    </section>

    <section id="sec:selecting_build">
        <title>ビルドスクリプトを指定して実行する<phrase role="original">Selecting which build to execute</phrase></title>
        <para role="original">When you run the <command>gradle</command> command, it looks for a build file in the current directory.
            You can use the <option>-b</option> option to select another build file.
            If you use <option>-b</option> option then <filename>settings.gradle</filename> file is not used. Example:
        </para>
        <para><command>gradle</command>コマンドは、デフォルトではカレントディレクトリにあるビルドスクリプトを探して実行しますが、<option>-b</option>オプションを使えば別のビルドスクリプトを指定することもできます。次の例を見てください。
        なお、<option>-b</option>を使うと、<filename>settings.gradle</filename>ファイルは使用されなくなります。</para>
        <sample id="selectProjectUsingBuildFile" dir="userguide/tutorial/selectProject" title="ビルドスクリプトを指定してビルドするプロジェクトを選択する / Selecting the project using a build file">
            <sourcefile file="subdir/myproject.gradle"/>
            <output args="-q -b subdir/myproject.gradle hello"/>
        </sample>
        <para role="original">Alternatively, you can use the <option>-p</option> option to specify the project directory to use.
        For multi-project builds you should use <option>-p</option> option instead of <option>-b</option> option.
        </para>
        <para>別の方法として、<option>-p</option>オプションを指定して、使用するプロジェクトディレクトリを変更することもできます。
        マルチプロジェクトの場合は、<option>-b</option>オプションでなく<option>-p</option>オプションを使用するべきです。</para>
        <sample id="selectProjectUsingProjectDir" dir="userguide/tutorial/selectProject" title="プロジェクトディレクトリを使ってプロジェクトを選択する / Selecting the project using project directory">
            <output args="-q -p subdir hello"/>
        </sample>
    </section>

    <section id="sec:obtaining_information_about_your_build">
        <title>ビルドに関する情報を取得する<phrase role="original">Obtaining information about your build</phrase></title>
        <para role="original">Gradle provides several built-in tasks which show particular details of your build. This can be
            useful for understanding the structure and dependencies of your build, and for debugging problems.
        </para>
        <para>ビルドに関する様々な情報を表示するために、組み込みのタスクがいくつか用意されています。自分の作ったビルドが今どんな構造になっているのか調べたり、何か問題が起こったときにデバッグしたりするのに役立つはずです。</para>
        <para role="original">In addition to the built-in tasks shown below, you can also use the
            <link linkend="project_reports_plugin">project report plugin</link> to add tasks to your project which will
            generate these reports.
        </para>
        <para>この組み込みタスクに加えて、<link linkend="project_reports_plugin">プロジェクトレポートプラグイン</link>というプラグインを使うこともできます。このプラグインは、これらの情報をレポートに保存するタスクをプロジェクトに追加してくれます。</para>
        <section>
            <title>プロジェクトの一覧<phrase role="original">Listing projects</phrase></title>
            <para role="original">Running <userinput>gradle projects</userinput> gives you a list of the sub-projects of the selected project,
                displayed in a hierarchy. Here is an example:
            </para>
            <para><userinput>gradle projects</userinput>を実行すると、指定したプロジェクトのサブプロジェクトを一覧できます。プロジェクトの一覧は階層構造で表示されます。次の例をご覧ください。</para>
            <sample id="projectListReport" dir="userguide/tutorial/projectReports" title="プロジェクトに関する情報を取得する / Obtaining information about projects">
                <output args="-q projects"/>
            </sample>
            <para role="original">The report shows the description of each project, if specified. You can provide a description for a project
                by setting the <literal>description</literal> property:
            </para>
            <para>このレポートは、プロジェクトに説明書きが添付されている場合、その説明も表示されます。プロジェクトの説明は、プロジェクトのプロパティで設定してください。</para>
            <sample id="projectListReport" dir="userguide/tutorial/projectReports" title="プロジェクトに説明を添付する / Providing a description for a project">
                <sourcefile file="build.gradle" snippet="project-description"/>
            </sample>
        </section>
        <section id="sec:listing_tasks">
            <title>タスクの一覧<phrase role="original">Listing tasks</phrase></title>
            <para role="original">Running <userinput>gradle tasks</userinput> gives you a list of the main tasks of the
                selected project. This report shows the default tasks for the project, if any, and a description for
                each task. Below is an example of this report:
            </para>
            <para><userinput>gradle tasks</userinput>を実行すると、プロジェクトに設定されているメインタスクの一覧とデフォルトタスクを表示します。さらに、タスクに説明書きが添付されていれば、その説明も表示されます。</para>
            <sample id="taskListReport" dir="userguide/tutorial/projectReports" title="タスクに関する情報を取得する / Obtaining information about tasks">
                <output args="-q tasks"/>
            </sample>
            <para role="original">By default, this report shows only those tasks which have been assigned to a task group. You can do this
                by setting the <literal>group</literal> property for the task. You can also set the <literal>description</literal>
                property, to provide a description to be included in the report.
            </para>
            <para>デフォルトでは、このレポートは何らかのタスクグループに属しているタスクしか表示されません。タスクの<literal>group</literal>プロパティを設定することでタスクにグループを割り当てることができます。また、このレポートでタスクに関する説明書きを表示させるには、タスクの<literal>description</literal>プロパティに説明書きを設定してください。</para>
            <sample id="taskListReport" dir="userguide/tutorial/projectReports" title="タスクレポートの内容を変更する / Changing the content of the task report">
                <sourcefile file="build.gradle" snippet="add-task-to-report"/>
            </sample>
            <para role="original">You can obtain more information in the task listing using the <option>--all</option> option. With
                this option, the task report lists all tasks in the project, grouped by main task, and the dependencies
                for each task. Here is an example:
            </para>
            <para><option>--all</option>オプションを追加すると、タスクリストについてもっと多くの情報を取得できます。プロジェクトにあるすべてのメインタスクとタスク間の依存関係が表示されます。次の表示例をご覧ください。</para>
            <sample id="taskListAllReport" dir="userguide/tutorial/projectReports" title="タスクに関してもっと多くの情報を取得する / Obtaining more information about tasks">
                <output args="-q tasks --all"/>
            </sample>
        </section>
        <section id="sec:show_task_details">
            <title>タスクの使い方を詳しく表示する <phrase role="original">Show task usage details</phrase></title>
            <para role="original">Running <userinput>gradle help --task someTask</userinput> gives you detailed information about a specific task or multiple
                tasks matching the given task name in your multiproject build <!--TODO RG ref multiproject-->
                Below is an example of this detailed information:
            </para>
            <para>
                <userinput>gradle help --task someTask</userinput>を実行すると、ある特定のタスク、マルチプロジェクトの場合は指定した名前にマッチする全てのタスクについての詳細な情報が表示されます。
                表示される情報の例は以下の通りです。
            </para>
            <sample id="taskHelp" dir="userguide/tutorial/projectReports" title="タスクについて詳細なヘルプ情報を取得する / Obtaining detailed help for tasks">
                <output args="-q help --task libs"/>
            </sample>
            <para role="original">This information includes the full task path, the task type, possible commandline options and the description of the given task.
            </para>
            <para>上記の通り、表示される情報にはタスクのフルパス、使用可能なコマンドラインオプション、またタスクの説明が含まれています。</para>
        </section>
        <section id="sec:listing_dependencies">
            <title>プロジェクトの依存関係一覧<phrase role="original">Listing project dependencies</phrase></title>
            <para role="original">Running <userinput>gradle dependencies</userinput>
                gives you a list of the dependencies of the selected project, broken down by configuration. For each
                configuration, the direct and transitive dependencies of that configuration are shown in a tree. Below
                is an example of this report:
            </para>
            <para id="para:commandline_dependency_report"><userinput>gradle dependencies</userinput>はプロジェクトの依存関係をコンフィギュレーションごとに一覧表示します。プロジェクトに直接設定されている依存関係と推移的依存関係が、コンフィギュレーション別のツリー構造で表示されます。</para>
            <sample id="dependencyListReport" dir="userguide/tutorial/projectReports" title="依存関係の情報を取得する / Obtaining information about dependencies">
                <output args="-q dependencies api:dependencies webapp:dependencies"/>
            </sample>
            <para role="original">
                Since a dependency report can get large, it can be useful to restrict the report to a particular configuration.
                This is achieved with the optional <userinput>--configuration</userinput> parameter:
            </para>
            <para>
            依存関係のレポートは巨大になることもあるので、レポート内容を特定のコンフィギュレーションのみに限定できれば便利です。
            これは、オプションの<userinput>--configuration</userinput>を指定することで実現できます。
            </para>
            <sample id="dependencyListReportFiltered" dir="userguide/tutorial/projectReports" title="依存関係のレポートをコンフィギュレーションでフィルタする / Filtering dependency report by configuration">
                <output args="-q api:dependencies --configuration testCompile"/>
            </sample>
        </section>
        <section id="sec:dependency_insight">
            <title>個別の依存関係に対する解析情報を取得する <phrase role="original">Getting the insight into a particular dependency</phrase></title>
            <para id="para:commandline_dependency_insight_report" role="original">Running <userinput>gradle dependencyInsight</userinput>
                gives you an insight into a particular dependency (or dependencies) that match specified input.
                Below is an example of this report:
            </para>
            <para><userinput>gradle dependencyInsight</userinput>を実行すると、個別の、または複数の依存関係を指定して、それぞれに対する解析情報を取得することができます。以下がそのレポートの例です。
            </para>
            <sample id="dependencyInsightReport" dir="userguide/tutorial/projectReports" title="個別の依存関係に対する解析情報を取得する / Getting the insight into a particular dependency">
                <output args="-q webapp:dependencyInsight --dependency groovy --configuration compile"/>
            </sample>
            <para role="original">
                This task is extremely useful for investigating the dependency resolution,
                finding out where certain dependencies are coming from and why certain versions are selected.
                For more information please see <apilink class="org.gradle.api.tasks.diagnostics.DependencyInsightReportTask"/>.
            </para>
            <para>
                dependencyInsightは、依存関係がどのように解決されているか調査するときにとても便利なタスクです。ある依存関係がどこから来て、なぜそのバージョンが選択されているのか調べることができます。
                詳細については、<apilink class="org.gradle.api.tasks.diagnostics.DependencyInsightReportTask"/>を参照してください。
            </para>
            <para role="original">
                The built-in dependencyInsight task is a part of the 'Help' tasks group.
                The task needs to configured with the dependency and the configuration.
                The report looks for the dependencies that match the specified dependency spec in the specified configuration.
                If java related plugin is applied, the dependencyInsight task is pre-configured with 'compile' configuration because typically it's the compile dependencies we are interested in.
                You should specify the dependency you are interested in via the command line '--dependency' option.
                If you don't like the defaults you may select the configuration via '--configuration' option.
                For more information see <apilink class="org.gradle.api.tasks.diagnostics.DependencyInsightReportTask"/>.
            </para>
            <para>
                組み込みのdependencyInsightタスクは、Helpグループに属しています。
                このタスクは、依存関係およびコンフィグレーションを指定しないと使用できません。
                レポートが出力される際は、指定されたコンフィグレーションの指定された依存関係を探しに行きます。
                Java関連のプラグインが適用されていれば、dependencyInsightタスクは既にcompileコンフィグレーションに対して設定されています。一般的に言って、よく調べたくなる依存関係はこのコンフィグレーションに属しているからです。
                また、調査対象の依存関係を「--dependency」オプションで指定しなければなりません。
                さらに、デフォルトのコンフィグレーションが気に入らないときは「--configuration」オプションで明示的にコンフィグレーションを指定します。
                詳しくは<apilink class="org.gradle.api.tasks.diagnostics.DependencyInsightReportTask"/>を参照してください。
            </para>
        </section>
        <section id="sec:listing_properties">
            <title>プロジェクトのプロパティ一覧<phrase role="original">Listing project properties</phrase></title>
            <para role="original">Running <userinput>gradle properties</userinput> gives you a list of the properties of the selected
                project. This is a snippet from the output:
            </para>
            <para><userinput>gradle properties</userinput>はプロジェクトのプロパティを一覧表示します。出力例の一部を以下に示します。</para>
            <sample id="propertyListReport" dir="userguide/tutorial/projectReports" title="プロパティに関する情報 / Information about properties">
                <output args="-q api:properties" ignoreExtraLines="true"/>
            </sample>
        </section>
        <section id="sec:profiling_build">
            <title>ビルドのプロファイリング<phrase role="original">Profiling a build</phrase></title>
            <para role="original">The <userinput>--profile</userinput> command line option will record some useful timing information
            while your build is running and write a report to the <filename>build/reports/profile</filename> directory.
            The report will be named using the time when the build was run.
            </para>
            <para>コマンドラインオプションで<userinput>--profile</userinput>をつけてビルドを実行すると、ビルドに要した時間のうち有用と思われるいくつかの情報を計測して、結果を<filename>build/reports/profile</filename>ディレクトリを出力します。レポート名には、ビルドを行った時刻が付加されます。</para>
            <para role="original">This report lists summary times and details for both the configuration phase and task execution.  The
                times for configuration and task execution are sorted with the most expensive operations first.  The task
                execution results also indicate if any tasks were skipped (and the reason) or if tasks that were not skipped
                did no work.
            </para>
            <para>このレポートでは、ビルド時間に関する概要のほか、設定フェーズとタスク実行に要した時間がタスクごとに表示されます。設定フェーズ、タスク実行に関するレポートは必要時間の降順でソートされており、さらにタスク実行については、タスクがスキップされたかどうか、作業が発生したかどうかみることができるようになっています。</para>
            <para role="original">Builds which utilize a buildSrc directory will generate a second profile report for buildSrc in the
                <filename>buildSrc/build</filename> directory.                
            </para>
            <para>なお、<filename>buildSrc</filename>ディレクトリを使っている場合、<filename>buildSrc/build</filename>に<filename>buildSrc</filename>のレポートが別途出力されます。</para>
            <imageobject>
                <imagedata fileref="img/profile.png" width="903px" depth="477px"/>
            </imageobject>

        </section>
    </section>

    <section id="sec:dry_run">
        <title>空実行<phrase role="original">Dry Run</phrase></title>
        <para role="original">Sometimes you are interested in which tasks are executed in which order for a given set of tasks specified on the
            command line, but you don't want the tasks to be executed. You can use the <option>-m</option> option for this.
            For example <userinput>gradle -m clean compile</userinput> shows you all tasks to be executed as
            part of the <literal>clean</literal> and <literal>compile</literal> tasks.
            This is complementary to the <option>tasks</option> task, which shows you the tasks which are available for
            execution.
        </para>
        <para>コマンドラインにタスク名を並べて実行したときに、どのタスクがどの順番で実行されるのか知りたくなることがあります。しかしそのために実際にタスクを実行したくはありません。このような場合、<option>-m</option>オプションをつけて実行してください。たとえば、<userinput>gradle -m clean compile</userinput>と実行すれば、cleanタスクとcompileタスクの実行にあたって実際に実行されるすべてのタスクが実行順に表示されます。これは、実行可能なタスクの一覧を表示する<option>tasks</option>タスクの補足にもなります。</para>
    </section>

    <section>
        <title>まとめ<phrase role="original">Summary</phrase></title>
        <para role="original">In this chapter, you have seen some of the things you can do with Gradle from the command-line. You can
            find out more about the <command>gradle</command> command in <xref linkend="gradle_command_line"/>.</para>
        <para>この章では、コマンドラインで使えるGradleの機能をいくつか見てきました。<literal>gradle</literal>コマンドについては<xref linkend="gradle_command_line"/>にも記載してあります。</para>
    </section>
</chapter>
