<!--
  ~ Copyright 2009 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id="artifact_management" xml:lang="ja">
    <title>アーティファクトの管理<phrase role="original">Artifact Management</phrase></title>
    <section>
        <title>はじめに<phrase role="original">Introduction</phrase></title>
        <para role="original">This chapter is about how you declare what are the artifacts of your project and how to work with
            them (e.g. upload them). We define the artifacts of the projects as the files the project want to
            provide to the outside world. This can be a library or a distribution or any other file. Usually artifacts
            are archives, but not necessarily. In the Maven world a project can provide only one artifact. With Gradle
            a project can provide as many artifacts as needed.
        </para>
        <para>この章では、プロジェクトのアーティファクト(成果物)を定義する方法と、アーティファクトの取り扱い方(アップロードする方法など)について解説します。Gradleでは、アーティファクトを「プロジェクトが外部へ公開したいファイル」と定義しています。普通は何らかのアーカイブになるかと思いますが、必ずしもはそうとは限りません。ライブラリだったり配布物だったり、その他いろいろなファイルがアーティファクトになりうるでしょう。Mavenの世界では、一つのプロジェクトにつき一つのアーティファクトしか公開できませんが、Gradleでは必要ならいくつでも公開することができます。</para>
    </section>
    <section id="artifacts_and_configurations">
        <title>アーティファクトとコンフィギュレーション<phrase role="original">Artifacts and configurations</phrase></title>
        <para role="original">Like dependencies, artifacts are grouped by configurations. In fact, a configuration can contain
            both, artifacts and dependencies, at the same time. To assign an artifact to a configuration, you can write:
        </para>
        <para>依存関係と同じように、アーティファクトもコンフィギュレーションによってグループ化されます。実際、コンフィギュレーションはアーティファクトと依存関係、両方を同時に持つこともできます。アーティファクトをグループ化するには、次のようにします。</para>
        <sample id="assignArtifact" dir="userguide/artifacts/uploading" title="アーティファクトをコンフィギュレーションに割り当てる / Assignment of an artifact to a configuration">
            <sourcefile file="build.gradle" snippet="assign-artifact"/>
        </sample>
        <para role="original">What do you gain by assigning an artifact to a configuration? For each configuration (also for the custom
        ones added by you) Gradle provides the tasks <code>upload[ConfigurationName]</code> and
        <code>build[ConfigurationName]</code>.
        <footnote><para role="original">To be exact, the Base plugin provides those tasks. The BasePlugin is automatically applied, if you use
        the Java plugin.</para></footnote>
        Execution of these tasks will build or upload the artifacts belonging to
        the respective configuration.
        </para>
        <para>
        アーティファクトをコンフィギュレーションに割り当てると、どういうメリットがあるのでしょうか？ Gradleは、すべてのコンフィギュレーション(独自定義のものも含む)に対して、<code>upload[コンフィグレーション名]</code>タスクと<code>build[コンフィグレーション名]</code>タスクを自動で作成します。
        <footnote><para>
        正確に言うと、これらのタスクを作成するのはBaseプラグインです。Baseプラグインは、Javaプラグインを使うと自動的に適用されます。
        </para></footnote>
        これらのタスクを実行すると、コンフィギュレーションに属しているアーティファクトをビルドしたり、アップロードしたりできます。
        </para>
        <para role="original">Table <xref linkend="tab:configurations"/> shows the configurations added by the Java plugin. Two of the
        configurations are relevant for the usage with artifacts. The <code>archives</code> configuration is the standard
        configuration to assign your artifacts to. The Java plugin automatically assigns the default jar to this
        configuration. We will talk more about the <code>default</code> configuration in <xref linkend="project_libraries"/>.
            As with dependencies, you can declare as many custom configurations as you like and assign artifacts to them.
        </para>
        <para><xref linkend="tab:configurations"/>には、Javaプラグインが作成するコンフィギュレーションの一覧が載っています。アーティファクトに関連するものはそのうちの二つですね。<code>archives</code>コンフィギュレーションは、プロジェクトのアーティファクトを追加するための一般的なコンフィギュレーションです。Javaプラグインは、デフォルトのjar(タスク)を自動的に<code>archives</code>コンフィギュレーションに含めます。もう一つの<code>default</code>コンフィギュレーションについては、<xref linkend="project_libraries"/>で詳しく解説します。依存関係と同じように、カスタムのコンフィギュレーションを定義してアーティファクトを追加することも可能です。</para>
        <para role="original">It is important to note that the custom archives you are creating as part of your build are not
        automatically assigned to any configuration. You have to explicitly do this assignment.</para>
        <para>ビルド手順の一つとしてカスタムのアーカイブを作ったとしても、デフォルトではどのコンフィギュレーションにも追加されないことに注意してください。明示的にコンフィギュレーションを割り当てる必要があります。</para>
    </section>
    <section>
        <title>アーティファクトのアップロード<phrase role="original">Uploading artifacts</phrase></title>
        <para role="original">We have said that there is a specific upload task for each configuration. But before you can do an upload,
            you have to configure the upload task and define where to upload. The repositories you have defined (as described
            in <xref linkend="sec:repositories"/>) are not automatically used for uploading. In fact, some of those repositories allow only for artifacts downloading.
            Here is an example how
            you can configure the upload task of a configuration:
        </para>
        <para>先ほど、すべてのコンフィギュレーションにアップロード用のタスクが作成されることを説明しました。しかし、実際にそのタスクを使うためには、どこにアーティファクトをアップロードするのか設定してやる必要があります。プロジェクトに定義したリポジトリ(<xref linkend="sec:repositories"/>)が、勝手にアップロードに使用されることはありません。実際、ダウンロードしか許していないリポジトリもあるでしょう。次の例は、アップロードタスクの設定方法を示すものです。</para>
        <sample id="uploading" dir="userguide/artifacts/uploading" title="アップロードタスクの設定 / Configuration of the upload task">
            <sourcefile file="build.gradle" snippet="uploading"/>
        </sample>
        <para role="original">As you can see, you can either use a reference to an existing repository or create a new repository.
        As described in <xref linkend="sub:more_about_ivy_resolvers"/>, you can use all the Ivy resolvers suitable
        for the purpose of uploading.</para>
        <para>この例のように、定義済みのリポジトリを参照することもできますし、新しくリポジトリ定義を作って追加することもできます。<xref linkend="sub:more_about_ivy_resolvers"/>のときと同じように、アップロードでもすべてのIvyリポジトリリゾルバを使うことができます。</para>
        <para role="original">Uploading to a Maven repository is described in <xref linkend="uploading_to_maven_repositories"/>.</para>
        <para>Mavenリポジトリへのアップロードについては、<xref linkend="uploading_to_maven_repositories"/>をご参照ください。</para>
    </section>
    <section id="project_libraries">
        <title>プロジェクトライブラリについての追記事項<phrase role="original">More about project libraries</phrase></title>
        <para role="original">If your project is supposed to be used as a library, you need to define what are the artifacts of this library
            and what are the dependencies of these artifacts. The Java plugin adds a <code>default</code> configuration for
            this purpose. This configuration extends both the <code>archives</code> and the <code>runtime</code> configuration,
            with the implicit assumption that the <code>runtime</code> dependencies are the dependencies of the <code>archives</code>
            configuration. Of course this is fully customizable. You can add your own custom configuration or let the the
            existing configurations extends from other configurations. You might have different group of artifacts which have
            a different set of dependencies. This mechanism is very powerful and flexible.
            </para>
            <para>あるプロジェクトがライブラリとして使用される場合、アーティファクトおよびアーティファクトが依存しているライブラリが何なのかを定義しておく必要があります。このためにJavaプラグインが作成するのが<code>default</code>というコンフィギュレーションです。このコンフィギュレーションは、<code>archives</code>と<code>runtime</code>、両方のコンフィギュレーションを継承したものになっています。archivesコンフィギュレーションはruntimeコンフィギュレーションに依存しているはずだ、という暗黙的な仮定の上での仕様なのですが、もちろんこのあたりの設定は完全にカスタマイズ可能です。独自のコンフィギュレーションを作成してもいいし、既存のコンフィギュレーションの継承元を変えてやってもいいでしょう。別の依存関係をもつアーティファクト群を追加することもできます。非常に強力で、柔軟性のある仕組みだといえます。</para>
        <para role="original">If someone wants to use your project as a library, she simply needs to declare on which configuration of
            the dependency to depend on.
            A Gradle dependency offers the <code>configuration</code> property to declare this. If this
            is not specified, the <code>default</code> configuration is used (see <xref linkend="sec:dependency_configurations"/>).
            Using your project as a library
            can either happen from within a multi-project build or by retrieving your project from a repository. In
            the latter case, an ivy.xml descriptor in the repository is supposed to contain all the neccesary information. If you
            work with Maven repositories you don't have the flexibility as described above. For how to publish to a Maven
            repository, see the section <xref linkend="uploading_to_maven_repositories"/>.
        </para>
        <para>誰かがあなたのプロジェクトをライブラリとして使いたいとしましょう。そのときすべきことは、あなたのプロジェクトの内、どのコンフィグレーションに依存するのか指定することだけです。Gradleの依存関係定義では、<code>configuration</code>というプロパティを指定できるようになっています。もしこのプロパティが指定されていなければ、<code>default</code>コンフィギュレーションが使用されます(<xref linkend="sec:dependency_configurations"/>をご参照ください)。
        あるプロジェクトがライブラリとして使われるのには、二つのケースがあります。マルチプロジェクトの中からライブラリとして参照される場合と、リポジトリからプロジェクトを取得する場合です。後者のケースでは、リポジトリにあるivy.xmlが必要な情報を全て含めることになっていますので、Mavenリポジトリを使う場合は先ほど述べたような柔軟性は持てません。Mavenリポジトリへライブラリを公開する方法については、<xref linkend="uploading_to_maven_repositories"/>をご覧ください。</para>
    </section>
</chapter>
