<!--
  ~ Copyright 2009 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id="artifact_management" xml:lang="ja">
    <title>アーティファクトの公開 <phrase role="original">Publishing artifacts</phrase></title>
    <note>
        <para role="original">
            This chapter describes the <emphasis>original</emphasis> publishing mechanism available in Gradle 1.0: in Gradle 1.3 a new mechanism for publishing was introduced.
            While this new mechanism is <emphasis>incubating</emphasis> and not yet complete, it introduces some new concepts and features that do (and will) make Gradle publishing even more powerful.
        </para>
        この章は、Grails1.0の段階で使用されている<emphasis>既存の</emphasis>公開システムについて書かれています。Gradle1.3からは、公開処理に新しい仕組みが導入されました。
        この仕組みは現在試験的な段階にあり、まだ完成していませんが、Gradleの公開処理をより強力にする新しい概念、機能がいくつか取り入れられる予定です。
        <para role="original">
            You can read about the new publishing plugins in <xref linkend="publishing_ivy"/> and <xref linkend="publishing_maven"/>.
        </para>
        <para>
            You can read about the new publishing plugins in <xref linkend="publishing_ivy"/> and <xref linkend="publishing_maven"/>. Please try them out and give us feedback.
        </para>
    </note>
    <section>
        <title>はじめに<phrase role="original">Introduction</phrase></title>
        <para role="original">This chapter is about how you declare the outgoing artifacts of your project, and how to work with
            them (e.g. upload them). We define the artifacts of the projects as the files the project provides to the
            outside world. This might be a library or a ZIP distribution or any other file. A project can publish as many artifacts as it wants.
        </para>
        <para>この章では、プロジェクトが公開するアーティファクト(成果物)の定義方法と取り扱い(アップロードする方法など)について解説します。ここでいうプロジェクトのアーティファクトとは、外部の世界へ提供するファイルのことを指します。ライブラリやZIPの配布物かもしれませんし、なにか他のファイルかもしれません。一つのプロジェクトから、いくつでも好きなだけアーティファクトを公開することができます。</para>
    </section>
    <section id="artifacts_and_configurations">
        <title>アーティファクトとコンフィギュレーション<phrase role="original">Artifacts and configurations</phrase></title>
        <para role="original">Like dependencies, artifacts are grouped by configurations. In fact, a configuration can contain
            both artifacts and dependencies at the same time.
        </para>
        <para>依存関係と同じように、アーティファクトもコンフィギュレーションによってグループ化されます。実際、コンフィギュレーションにはアーティファクトと依存関係、両方を同時に含めることもできます。</para>
        <para role="original">For each configuration in your project, Gradle provides the tasks <literal>upload<replaceable>ConfigurationName</replaceable></literal> and
        <literal>build<replaceable>ConfigurationName</replaceable></literal>.
        <footnote><para role="original">To be exact, the Base plugin provides those tasks. This plugin is automatically applied if you use
        the Java plugin.</para></footnote>
        Execution of these tasks will build or upload the artifacts belonging to the respective configuration.
        </para>
        <para>Gradleは、プロジェクト内のすべてのコンフィギュレーションに対して、<literal>upload<replaceable>コンフィグレーション名</replaceable></literal> タスクと<literal>build<replaceable>コンフィグレーション名</replaceable></literal> タスクを提供します。
        <footnote><para>
        正確に言うと、Baseプラグインがこれらのタスクを提供します。Baseプラグインは、Javaプラグインを使うと自動的に適用されます。
        </para></footnote>
        これらのタスクを実行すると、対象のコンフィギュレーションに属しているアーティファクトをビルドしたり、アップロードしたりできます。
        </para>
        <para role="original">Table <xref linkend="tab:configurations"/> shows the configurations added by the Java plugin. Two of the
        configurations are relevant for the usage with artifacts. The <code>archives</code> configuration is the standard
        configuration to assign your artifacts to. The Java plugin automatically assigns the default jar to this
        configuration. We will talk more about the <code>runtime</code> configuration in <xref linkend="project_libraries"/>.
        As with dependencies, you can declare as many custom configurations as you like and assign artifacts to them.
        </para>
        <para><xref linkend="tab:configurations"/>に、Javaプラグインが追加するコンフィギュレーションの一覧を載せています。これらのうち、アーティファクトを使うに当たって関係があるものは次の二つです。<code>archives</code>コンフィギュレーションは、プロジェクトのアーティファクトを含めるための標準のコンフィギュレーションです。Javaプラグインは、デフォルトのjarを自動的にこのコンフィギュレーションに追加します。<xref linkend="project_libraries"/>では、<code>runtime</code>コンフィギュレーションについて詳しく解説します。また、アーティファクトを追加するための独自コンフィギュレーションも、依存関係のコンフィギュレーションと同じようにいくつでも宣言して追加できます。</para>
    </section>

    <section>
        <title>アーティファクトの宣言 <phrase role="original">Declaring artifacts</phrase></title>
        <section>
            <title>アーカイブタスク・アーティファクト <phrase role="original">Archive task artifacts</phrase></title>
            <para role="original">You can use an archive task to define an artifact:</para>
            <para>アーカイブタスクを使ってアーティファクトを宣言できます。</para>
            <sample id="archiveTaskArtifact" dir="userguide/artifacts/uploading" title="アーカイブタスクを使ってアーティファクトを宣言する / Defining an artifact using an archive task">
                <sourcefile file="build.gradle" snippet="archive-artifact"/>
            </sample>
            <para role="original">It is important to note that the custom archives you are creating as part of your build are not
            automatically assigned to any configuration. You have to explicitly do this assignment.</para>
            <para>重要なことですが、独自のアーカイブ作成をビルドに組み込んでも、そのアーカイブが自動的になんらかのコンフィグレーションに割り当てられるわけではないことに注目してください。割り当ては、明示的に行う必要があります。</para>
        </section>
        <section>
            <title>ファイル・アーティファクト <phrase role="original">File artifacts</phrase></title>
            <para role="original">You can also use a file to define an artifact:</para>
            <para>アーティファクトは、ファイルで宣言することもできます。</para>
            <sample id="fileArtifact" dir="userguide/artifacts/uploading" title="アーティファクトをファイルで宣言する / Defining an artifact using a file">
                <sourcefile file="build.gradle" snippet="file-artifact"/>
            </sample>
            <para role="original">Gradle will figure out the properties of the artifact based on the name of the file. You can customize these properties:</para>
            <para>Gradleは、ファイル名を元にアーティファクトのプロパティを決定します。このプロパティは、以下のようにしてカスタマイズすることができます。</para>
            <sample id="fileArtifact" dir="userguide/artifacts/uploading" title="アーティファクトのカスタマイズ / Customizing an artifact">
                <sourcefile file="build.gradle" snippet="customised-file-artifact"/>
            </sample>
            <para role="original">There is a map-based syntax for defining an artifact using a file. The map must include a <literal>file</literal> entry that
                defines the file. The map may include other artifact properties:
            </para>
            <para>ファイルでアーティファクトを宣言する際には、Mapスタイルの文法を使うこともできます。そのMapにはファイルを宣言するfileエントリを含めなければなりません。そのほか、アーティファクトの各プロパティを含めることができます。</para>
            <sample id="fileArtifact" dir="userguide/artifacts/uploading" title="ファイルでアーティファクトを宣言するMapスタイルの文法 / Map syntax for defining an artifact using a file">
                <sourcefile file="build.gradle" snippet="map-file-artifact"/>
            </sample>
        </section>
    </section>

    <section>
        <title>アーティファクトの公開 <phrase role="original">Publishing artifacts</phrase></title>
        <para role="original">We have said that there is a specific upload task for each configuration. But before you can do an upload,
            you have to configure the upload task and define where to publish the artifacts to. The repositories you have defined (as described
            in <xref linkend="sec:repositories"/>) are not automatically used for uploading. In fact, some of those repositories allow only for artifact downloading.
            Here is an example how you can configure the upload task of a configuration:
        </para>
        <para>先ほど、すべてのコンフィギュレーションにアップロード用のタスクが作成されることを説明しました。しかし、実際にアーティファクトをアップロードするには、どこに公開するかを設定する必要があります。プロジェクトに定義したリポジトリ(<xref linkend="sec:repositories"/>)が、勝手にアップロードに使用されることはありません。実際、それらのリポジトリには、ダウンロードしか許していないものもあるでしょう。次の例は、アップロードタスクの設定方法を示すものです。</para>
        <sample id="uploading" dir="userguide/artifacts/uploading" title="アップロードタスクの設定 / Configuration of the upload task">
            <sourcefile file="build.gradle" snippet="uploading"/>
        </sample>
        <para role="original">As you can see, you can either use a reference to an existing repository or create a new repository.
        As described in <xref linkend="sub:more_about_ivy_resolvers"/>, you can use all the Ivy resolvers suitable
        for the purpose of uploading.
        </para>
        <para>この例のように、定義済みのリポジトリを参照することもできますし、新しくリポジトリ定義を作って追加することもできます。<xref linkend="sub:more_about_ivy_resolvers"/>のときと同じように、アップロードでもすべてのIvyリポジトリリゾルバを使うことができます。</para>
        <para role="original">If an upload repository is defined with multiple patterns, Gradle must choose a pattern to use for uploading each file.
            By default, Gradle will upload to the pattern defined by the <literal>url</literal> parameter, combined with the optional <literal>layout</literal> parameter.
            If no <literal>url</literal> parameter is supplied, then Gradle will use the first defined <literal>artifactPattern</literal> for uploading,
            or the first defined <literal>ivyPattern</literal> for uploading ivy files, if this is set.
        </para>
        <para>
        アップロード先のリポジトリ定義に複数のレイアウトパターンが含まれている場合、どのパターンに従ってファイルをアップロードするか決定しなければなりません。
        デフォルトでは、Gradleは<literal>url</literal>パラメーターを参照します。<literal>layout</literal>が定義されていれば、それも併せて使用します。
        <literal>url</literal>パラメーターが未定義の場合は、定義されている<literal>artifactPattern</literal>のうち最初のものがアップロードに使用され、また、定義されている<literal>ivyPattern</literal>のうち最初のものがivyファイルのアップロードに使用されます。
        </para>
        <para role="original">Uploading to a Maven repository is described in <xref linkend="uploading_to_maven_repositories"/>.</para>
        <para>Mavenリポジトリへのアップロードについては、<xref linkend="uploading_to_maven_repositories"/>をご参照ください。</para>
    </section>
    <section id="project_libraries">
        <title>プロジェクトライブラリについての追記事項<phrase role="original">More about project libraries</phrase></title>
        <para role="original">If your project is supposed to be used as a library, you need to define what are the artifacts of this library
            and what are the dependencies of these artifacts. The Java plugin adds a <code>runtime</code> configuration for
            this purpose, with the implicit assumption that the <code>runtime</code> dependencies are the dependencies of
            the artifact you want to publish. Of course this is fully customizable. You can add your own custom configuration or let the
            existing configurations extend from other configurations. You might have different group of artifacts which have
            a different set of dependencies. This mechanism is very powerful and flexible.
            </para>
            <para>プロジェクトがライブラリとして使用される場合、そのライブラリのアーティファクトは何か、アーティファクトが依存しているライブラリは何か、定義しておく必要があります。Javaプラグインは、この目的のために<code>runtime</code>というコンフィギュレーションを追加します。これは、公開したいアーティファクトは<code>runtime</code>依存関係に依存しているはずだ、という暗黙的な仮定の上での仕様ですが、もちろんこのあたりの設定は完全にカスタマイズ可能です。独自のコンフィギュレーションを作成してもいいし、既存のコンフィギュレーションの継承元を変えてもいいでしょう。別の依存関係をもつ別のアーティファクトを加えることもできます。このメカニズムは非常に強力で、柔軟性豊かなものです。</para>
        <para role="original">If someone wants to use your project as a library, she simply needs to declare on which configuration of
            the dependency to depend on.
            A Gradle dependency offers the <code>configuration</code> property to declare this. If this
            is not specified, the <code>default</code> configuration is used (see <xref linkend="sec:dependency_configurations"/>).
            Using your project as a library
            can either happen from within a multi-project build or by retrieving your project from a repository. In
            the latter case, an <filename>ivy.xml</filename> descriptor in the repository is supposed to contain all the necessary information. If you
            work with Maven repositories you don't have the flexibility as described above. For how to publish to a Maven
            repository, see the section <xref linkend="uploading_to_maven_repositories"/>.
        </para>
        <para>誰かがあなたのプロジェクトをライブラリとして使いたいとしましょう。そのときすべきことは、あなたのプロジェクトの内、どのコンフィグレーションに依存するのか指定することだけです。Gradleの依存関係定義では、<code>configuration</code>というプロパティを指定できるようになっています。もしこのプロパティが指定されていなければ、<code>default</code>コンフィギュレーションが使用されます(<xref linkend="sec:dependency_configurations"/>をご参照ください)。
        あるプロジェクトがライブラリとして使われるのには、二つのケースがあります。マルチプロジェクトの中からライブラリとして参照される場合と、リポジトリからプロジェクトを取得する場合です。後者のケースでは、リポジトリにあるivy.xmlが必要な情報を全て含めることになっていますので、Mavenリポジトリを使う場合は先ほど述べたような柔軟性は持てません。Mavenリポジトリへライブラリを公開する方法については、<xref linkend="uploading_to_maven_repositories"/>をご覧ください。</para>
    </section>
</chapter>
