<!--
  ~ Copyright 2012 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='build_environment' xml:lang="ja">
    <title>ビルド環境 <phrase role="original">The Build Environment</phrase></title>

    <section id="sec:gradle_configuration_properties">
        <title>gradle.propertiesを使用したビルド環境の構築<phrase role="original">Configuring the build environment via gradle.properties</phrase></title>
        <para><phrase role="original">Gradle provides several options that make it easy to configure the Java process that will be used to execute your build.
            While it's possible to configure these in your local environment via GRADLE_OPTS or JAVA_OPTS,
            certain settings like JVM memory settings, Java home, daemon on/off
            can be more useful if they can versioned with the project in your VCS so that
            the entire team can work with consistent environment.
            Setting up a consistent environment for your build is as simple as placing those settings into a <filename>gradle.properties</filename> file.
            The configuration is applied in following order
            (in case an option is configured in multiple locations the last one wins):</phrase>
            Gradleでは、ビルドを実行するJavaプロセスの設定を簡単に変更するための方法が複数用意されています。
            ローカルの環境変数でGRADLE_OPTSやJAVA_OPTSを使って設定することもできますが、一部の設定値、JVMメモリ設定やJava home、デーモンのオンオフなどについてはプロジェクトのVCSに格納してバージョン管理しておけば、チームメンバー全員が一貫した環境で作業することができるので便利です。
            こうした一貫した設定値は、<filename>gradle.properties</filename>に設定値を保存するだけで実現可能です。
            設定値は以下の順序で適用されます（複数箇所で設定されている場合は最後の一つが優先されます）。
            <itemizedlist>
                <listitem><phrase role="original">from <filename>gradle.properties</filename> located in project build dir.</phrase> プロジェクトのビルドディレクトリに置かれた<filename>gradle.properties</filename></listitem>
                <listitem><phrase role="original">from <filename>gradle.properties</filename> located in <literal>gradle user home</literal>.</phrase> <literal>gradleユーザーホームディレクトリ</literal>に置かれた<filename>gradle.properties</filename></listitem>
                <listitem><phrase role="original">from system properties, e.g. when <literal>-Dsome.property</literal> is used in the command line.</phrase> <literal>-Dsome.property</literal>などで指定されたシステムプロパティ</listitem>
            </itemizedlist>
        </para>
        <para>
            <phrase role="original">The following properties can be used to configure the Gradle build environment:</phrase>
            以下のプロパティがGradleのビルド環境を設定するために使用されます。
            <varlistentry>
                <term><literal>org.gradle.daemon</literal></term>
                <listitem><para role="original">When set to <literal>true</literal> the Gradle daemon is to run the build.
                    For local developer builds this is our favorite property. The developer environment is optimized for speed and feedback
                    so we nearly always run Gradle jobs with the daemon.
                    We don't run CI builds with the daemon (i.e. a long running process)
                    as the CI environment is optimized for consistency and reliability.
                </para>
                <para>
                <literal>true</literal>に設定するとデーモンによりビルドが実行されます。
                開発者がローカルでビルドを実行する際は、このプロパティを設定することをおすすめします。開発環境ではスピードやフィードバックという点を重視したいので、私たちもほとんどいつもデーモンを使ってGradleのジョブを走らせています。
                一方、CI環境では並行性、信頼性といった点を重視したいため、CIビルド（というか実行時間の長い処理）でデーモンを使うことはありません。
                </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.gradle.java.home</literal></term>
                <listitem><para role="original">Specifies the java home for the Gradle build process.
                    The value can be set to either <literal>jdk</literal> or <literal>jre</literal> location,
                    however, depending on what does your build do, <literal>jdk</literal> is safer.
                    Reasonable default is used if the setting is unspecified.</para>
                    <para>
                    Gradleのビルドシステムで使用するJava homeを指定します。
                    設定するのは<literal>jdk</literal>でも<literal>jre</literal>構いませんが、プロジェクトによってはjdkを指定した方が安全かもしれません。
                    指定しなければ、適当なデフォルト値が設定されます。
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.gradle.jvmargs</literal></term>
                <listitem><para role="original">Specifies the jvmargs used for the daemon process.
                    The setting is particularly useful for tweaking memory settings.
                    At the moment the default settings are pretty generous with regards to memory.</para>
                    <para>
                    デーモンプロセスに渡すJVM引数を指定します。
                    この設定はメモリ設定を調節するのに特に便利です。
                    デフォルト値はメモリに応じて適切に設定されます。
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.gradle.configureondemand</literal></term>
                <listitem><para role="original">Enables new incubating mode that makes Gradle selective when configuring projects.
                    Only relevant projects are configured which results in faster builds for large multi-projects.
                    See <xref linkend="sec:configuration_on_demand"/>.</para>
                    <para>Gradleがプロジェクトを選択的に設定する試験的なモードを有効にします。
                    関係のあるプロジェクトのみを評価することで、巨大なマルチプロジェクト・ビルドをより高速にビルドできるようにします。
                    詳しくは<xref linkend="sec:configuration_on_demand"/>を参照してください。
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term><literal>org.gradle.parallel</literal></term>
                <listitem><para role="original">When configured, Gradle will run in incubating parallel mode.</para>
                    <para>この設定を行うと、Gradleの試験的な並列ビルドモードが有効化されます。</para>
                </listitem>
            </varlistentry>
        </para>
        <section>
            <title>javaプロセスのフォーク<phrase role="original">Forked java processes</phrase></title>
            <para role="original">Many settings (like the java version and maximum heap size) can only be specified when launching a new JVM for the build process. This means that Gradle
                must launch a separate JVM process to execute the build after parsing the various <filename>gradle.properties</filename> files.
                When running with the daemon, a JVM with the correct parameters is started once and reused for each daemon build execution.
                When Gradle is executed without the daemon, then a new JVM must be launched for every build execution,
                unless the JVM launched by the Gradle start script happens to have the same parameters.
            </para>
            <para>
                JVMに関する設定の多く(Javaバージョンや最大ヒープサイズなど)は、新しくJVMプロセスを起動するときのみ設定できます。
                これはつまり、Gradleが解析した多様な<filename>gradle.properties</filename>に従ってビルドを実行するには、JVMプロセスを新しく起動しなければならないということを意味します。
                デーモンを実行しているときは、適切なパラメーターが設定されたJVMが起動され、デーモンごとに再利用されます。
                デーモンを使用せずにビルドを実行したときは、Gradleのスタートスクリプトが起動したJVMとたまたま同じパラメーターでビルドするのでない限り、ビルドの度に新しくJVMを起動しなければなりません。
            </para>
            <para role="original">
            This launching of an extra JVM on every build execution is quite expensive, which is why we highly recommend that you use the Gradle Daemon if you are
            specifying <literal>org.gradle.java.home</literal> or <literal>org.gradle.jvmargs</literal>. See <xref linkend="gradle_daemon"/> for more details.</para>
            <para>
                ビルドを実行する度にJVMを余分に起動しなければならないというのは、とても大きなコストになります。なので、<literal>org.gradle.java.home</literal>や<literal>org.gradle.jvmargs</literal>を設定しているのであればGradleデーモンを使ってビルドすることを強く推奨します。詳細については<xref linkend="gradle_daemon"/>を参照してください。</para>
        </section>
    </section>

    <section id='sec:accessing_the_web_via_a_proxy'>
        <title>プロクシ経由のWebアクセス<phrase role="original">Accessing the web via a proxy</phrase></title>
        <para role="original">Configuring an HTTP proxy (for example for downloading dependencies) is done via standard JVM system properties. These properties can be set directly in the build script; for example <literal>
                System.setProperty('http.proxyHost', 'www.somehost.org')</literal> for the proxy host. Alternatively, the properties can be specified in a gradle.properties file,
            either in the build's root directory or in the Gradle home directory.
        </para>
        <para>(例えば依存関係のダウンロードするための)HTTPプロクシの設定は 標準的なJVMのシステムプロパティを使って行います。これらの設定は、直接ビルドスクリプト上で設定することが可能です。
								例えばプロクシのホストの為に<literal>
                System.setProperty('http.proxyHost', 'www.somehost.org')</literal>と設定できます。
								あるいは、ビルドのルートディレクトリ上 又は Gradleホームディレクトリ上にある gradle.propertiesファイルにそれらの値を設定できます。
        </para>
        <example>
            <title>HTTPプロクシの設定<phrase role="original">Configuring an HTTP proxy</phrase></title>
            <para><filename>gradle.properties</filename></para>
            <programlisting><![CDATA[
systemProp.http.proxyHost=www.somehost.org
systemProp.http.proxyPort=8080
systemProp.http.proxyUser=userid
systemProp.http.proxyPassword=password
systemProp.http.nonProxyHosts=*.nonproxyrepos.com|localhost	
]]></programlisting>
        </example>
        <para role="original">There are separate settings for HTTPS.</para>
        <para>HTTPS設定の分離</para>
        <example>
            <title>HTTPSプロクシの設定<phrase role="original">Configuring an HTTPS proxy</phrase></title>
            <para><filename>gradle.properties</filename></para>
            <programlisting><![CDATA[
systemProp.https.proxyHost=www.somehost.org
systemProp.https.proxyPort=8080
systemProp.https.proxyUser=userid
systemProp.https.proxyPassword=password
systemProp.https.nonProxyHosts=*.nonproxyrepos.com|localhost
]]></programlisting>
        </example>
        <para role="original">We could not find a good overview for all possible proxy settings. One place to look are the constants
            in a file from the Ant project. Here a
            <ulink url='http://svn.apache.org/viewvc/ant/core/trunk/src/main/org/apache/tools/ant/util/ProxySetup.java?view=markup&amp;pathrev=556977'>
                link
            </ulink> to the Subversion view. The other is a
            <ulink url='http://download.oracle.com/javase/6/docs/technotes/guides/net/properties.html'>
                Networking Properties page
            </ulink> from the JDK docs. If anyone knows a better overview, please let us know via the mailing list.
        </para>
        <para>使用可能な全てのプロクシ設定を概観できる良い資料については残念ながら発見することができませんでした。一つの情報源は、Antプロジェクトのファイルに定義された定数です。
            <ulink url='http://svn.apache.org/viewvc/ant/core/trunk/src/main/org/apache/tools/ant/util/ProxySetup.java?view=markup&amp;pathrev=556977'>
                Subversionへのリンク
            </ulink>を載せておきます。他には、JDKドキュメントに
            <ulink url='http://download.oracle.com/javase/6/docs/technotes/guides/net/properties.html'>
                ネットワーク設定値のページ
            </ulink>がありました。 その他、もっと良い資料をご存知であれば、メーリングリストでお知らせください。
        </para>
        <section id='sub:ntlm_authentication'>
            <title>NTLM認証<phrase role="original">NTLM Authentication</phrase></title>
            <para><phrase role="original">If your proxy requires NTLM authentication, you may need to provide the authentication domain as well as the username and password.
                There are 2 ways that you can provide the domain for authenticating to a NTLM proxy:</phrase>
                NTLM認証が必要なプロクシを使う場合、ユーザ名とパスワードだけでなく認証ドメインを設定する必要があります。ドメインを設定する方法には以下の二つがあります。
                <itemizedlist>
                    <listitem><phrase role="original">Set the <literal>http.proxyUser</literal> system property to a value like <literal><replaceable>domain</replaceable>/<replaceable>username</replaceable></literal>.</phrase>
                        システムプロパティ<literal>http.proxyUser</literal>に、<replaceable>domain</replaceable>/<replaceable>username</replaceable>のように値を設定する。
                    </listitem>
                    <listitem><phrase role="original">Provide the authentication domain via the <literal>http.auth.ntlm.domain</literal> system property.
                    </phrase> システムプロパティ<literal>http.auth.ntlm.domain</literal>に認証ドメインを設定する。</listitem>
                </itemizedlist>
            </para>
        </section>
    </section>
</chapter>
