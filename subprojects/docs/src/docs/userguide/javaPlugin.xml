<!--
  ~ Copyright 2010 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<chapter id='java_plugin' xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="ja">
    <title>Javaプラグイン<phrase role="original">The Java Plugin</phrase></title>

    <para role="original">The Java plugin adds Java compilation, testing and bundling capabilities to a project. It serves as the basis
        for many of the other Gradle plugins.
    </para>
    <para>Javaプラグインは、プロジェクトにJavaのコンパイル、テスト、そしてビルド能力を与えます。このプラグインは、他の多くのGradleプラグインの基礎となっています。
    </para>

    <section>
        <title>使用方法<phrase role="original">Usage</phrase></title>
        <para role="original">To use the Java plugin, include in your build script:</para>
        <para>Javaプラグインを使うためには、ビルドスクリプトに下記を含めます：</para>
        <sample id="useJavaPlugin" dir="java/quickstart" title="Javaプラグインの使用 / Using the Java plugin">
            <sourcefile file="build.gradle" snippet="use-plugin"/>
        </sample>
    </section>

    <section>
        <title>ソースセット<phrase role="original">Source sets</phrase></title>
        <para role="original">The Java plugin introduces the concept of a <firstterm>source set</firstterm>. A source set is simply a group of
            source files which are compiled and executed together. These source files may include Java source files and
            resource files. Other plugins add the ability to include Groovy and Scala source files in a source set.
            A source set has an associated compile classpath, and runtime classpath.
        </para>
        <para>Javaプラグインは<firstterm>ソースセット</firstterm>の概念を導入します。ソースセットは、一緒にコンパイルされ実行されるソースファイルのグループです。このソースファイルには、Javaソースファイルとリソースファイルを含むことができます。他のプラグインは、ソースセットにGroovyやScalaのソースファイルを含めることを可能にします。ソースセットは、それぞれに関連づけられたコンパイル時クラスパスと実行時クラスパスを持ちます。
        </para>
        <para role="original">
            One use for source sets is to group source files into logical groups which describe their purpose. For example,
            you might use a source set to define an integration test suite, or you might use separate source sets to define
            the API and implementation classes of your project.
        </para>
        <para>ソースセットを使うと、ソースファイルを論理的なグループに分割し、それぞれ別個の目的を持たせることもできます。例えば、統合テストスイートやプロジェクトのAPIクラスを定義したり、異なるJavaバージョンでコンパイルする必要があるソースを分離することなどに使うことができます。
        </para>
        <para role="original">The Java plugin defines two standard source sets, called <literal>main</literal> and <literal>test</literal>.
            The <literal>main</literal> source set contains your production source code, which is compiled and assembled
            into a JAR file. The <literal>test</literal> source set contains your unit test source code, which is
            compiled and executed using JUnit or TestNG.
        </para>
        <para>Javaプラグインは、<literal>main</literal>と<literal>test</literal>という二つの標準ソースセットを定義します。<literal>main</literal>ソースセットは、コンパイルされJARファイルを構成する製品ソースコードを含みます。<literal>test</literal>ソースセットは、コンパイルされJUnitやTestNGで実行されるユニットテストコードを含みます。
        </para>
    </section>
    
    <section>
        <title>タスク<phrase role="original">Tasks</phrase></title>
        <para role="original">The Java plugin adds a number of tasks to your project, as shown below.</para>
        <para>Javaプラグインは、以下に示すような数多くのタスクをプロジェクトに追加します。</para>

        <table>
            <title>Javaプラグイン - タスク<phrase role="original">Java plugin - tasks</phrase></title>
            <thead>
                <tr>
                    <td>タスク名<phrase role="original">Task name</phrase></td>
                    <td>依存先<phrase role="original">Depends on</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>説明<phrase role="original">Description</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>compileJava</literal>
                </td>
                <td>コンパイル時クラスパスを作り出すすべてのタスク。
                <literal>compile</literal>コンフィギュレーションに含まれる、
                プロジェクトの依存関係のための<literal>jar</literal>タスクを含む
                <phrase role="original">All tasks which produce the compile classpath. This includes the <literal>jar</literal> task for
                    project dependencies included in the <literal>compile</literal> configuration.</phrase>
                </td>
                <td><apilink class="org.gradle.api.tasks.compile.Compile"/></td>
                <td>javacを使って製品Javaソースファイルをコンパイルする
                <phrase role="original">Compiles production Java source files using javac.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>processResources</literal>
                </td>
                <td>-</td>
                <td><apilink class="org.gradle.api.tasks.Copy"/></td>
                <td>製品リソースを製品クラスディレクトリにコピーする
                <phrase role="original">Copies production resources into the production classes directory.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>classes</literal>
                </td>
                <td>
                    <literal>compileJava</literal> と <literal>processResources</literal>。
                    一部のプラグインはさらにコンパイルタスクを追加する
                    <phrase role="original"><literal>compileJava</literal> and <literal>processResources</literal>.
                    Some plugins add additional compilation tasks.</phrase>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>製品クラスディレクトリを構築する
                <phrase role="original">Assembles the production classes directory.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>compileTestJava</literal>
                </td>
                <td>
                    <literal>compile</literal>、そしてテストのコンパイル時クラスパスを作り出すすべてのタスク
                    <phrase role="original"><literal>compile</literal>, plus all tasks which produce the test compile classpath.</phrase>
                </td>
                <td><apilink class="org.gradle.api.tasks.compile.Compile"/></td>
                <td>javacを使ってテストJavaソースファイルをコンパイルする
                <phrase role="original">Compiles test Java source files using javac.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>processTestResources</literal>
                </td>
                <td>-</td>
                <td><apilink class="org.gradle.api.tasks.Copy"/></td>
                <td>テストリソースをテストクラスディレクトリにコピーする
                <phrase role="original">Copies test resources into the test classes directory.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>testClasses</literal>
                </td>
                <td>
                    <literal>compileTestJava</literal> と <literal>processTestResources</literal>。一部のプラグインはさらにテストコンパイルタスクを追加する
                    <phrase role="original"><literal>compileTestJava</literal> and <literal>processTestResources</literal>.
                    Some plugins add additional test compilation tasks.</phrase>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>テストクラスディレクトリを構築する
                <phrase role="original">Assembles the test classes directory.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>jar</literal>
                </td>
                <td>
                    <literal>compile</literal>
                </td>
                <td><apilink class="org.gradle.api.tasks.bundling.Jar"/></td>
                <td>JARファイルを構築する
                <phrase role="original">Assembles the JAR file</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>javadoc</literal>
                </td>
                <td><literal>compile</literal></td>
                <td><apilink class="org.gradle.api.tasks.javadoc.Javadoc"/></td>
                <td>Javadocを使って製品JavaソースのAPIドキュメントを生成する
                <phrase role="original">Generates API documentation for the production Java source, using Javadoc </phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>test</literal>
                </td>
                <td>
                    <literal>compile</literal> と
                    <literal>compileTest</literal>、そしてテストの実行時クラスパスを作り出すすべてのタスク
                    <phrase role="original"><literal>compile</literal>,
                    <literal>compileTest</literal>,
                    plus all tasks which produce the test runtime classpath.</phrase>
                </td>
                <td><apilink class="org.gradle.api.tasks.testing.Test"/></td>
                <td>JUnitかTestNGを使ってユニットテストを実行する
                <phrase role="original">Runs the unit tests using JUnit or TestNG.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>uploadArchives</literal>
                </td>
                <td>
                    <literal>archives</literal>コンフィギュレーションのアーティファクトを生成するタスク
                    （ <literal>jar</literal>を含む）
                    <phrase role="original">The tasks which produce the artifacts in the <literal>archives</literal> configuration, including <literal>jar</literal>.</phrase>
                </td>
                <td><apilink class="org.gradle.api.tasks.Upload"/></td>
                <td><literal>archives</literal> コンフィギュレーションのアーティファクト（JARファイルを含む）をアップロードする
                <phrase role="original">Uploads the artifacts in the <literal>archives</literal> configuration, including the JAR file.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>clean</literal>
                </td>
                <td>-</td>
                <td><apilink class="org.gradle.api.tasks.Delete"/></td>
                <td>プロジェクトのビルドディレクトリを削除する<phrase role="original">Deletes the project build directory.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>clean<replaceable>TaskName</replaceable></literal>
                </td>
                <td>-</td>
                <td><apilink class="org.gradle.api.tasks.Delete"/></td>
                <td>指定したタスクが生成する出力ファイルを削除する。
                例えば<literal>cleanJar</literal>は<literal>jar</literal>タスクが作ったJARファイルを削除し、<literal>cleanTest</literal>は<literal>test</literal>タスクが作ったテスト結果を削除する。
                <phrase role="original">Deletes the output files produced by the specified task. For example <literal>cleanJar</literal>
                    will delete the JAR file created by the <literal>jar</literal> task, and
                    <literal>cleanTest</literal> will delete the test results created by the <literal>test</literal> task.</phrase>
                </td>
            </tr>
        </table>

        <para role="original">For each source set you add to the project, the Java plugin adds the following compilation tasks:</para>
        <para>Javaプラグインは、プロジェクトに追加されるソースセットの各々について以下のコンパイルタスクを追加します：</para>
        <table id="java_source_set_tasks">
            <title>Javaプラグイン - ソースセットタスク<phrase role="original">Java plugin - source set tasks</phrase></title>
            <thead>
                <tr>
                    <td>タスク名<phrase role="original">Task name</phrase></td>
                    <td>依存先<phrase role="original">Depends on</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>説明<phrase role="original">Description</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>compile<replaceable>SourceSet</replaceable>Java</literal>
                </td>
                <td>
                    このソースセットのコンパイル時クラスパスを作り出すすべてのタスク
                    <phrase role="original">All tasks which produce the source set's compile classpath.</phrase>
                </td>
                <td><apilink class="org.gradle.api.tasks.compile.Compile"/></td>
                <td>javacを使って特定のソースセットのJavaソースファイルをコンパイルする
                <phrase role="original">Compiles the given source set's Java source files using javac.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>process<replaceable>SourceSet</replaceable>Resources</literal>
                </td>
                <td>-</td>
                <td><apilink class="org.gradle.api.tasks.Copy"/></td>
                <td>特定のソースセットのリソースをそのクラスディレクトリにコピーする
                <phrase role="original">Copies the given source set's resources into the classes directory.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal><replaceable>sourceSet</replaceable>Classes</literal>
                </td>
                <td>
                    <literal>compile<replaceable>SourceSet</replaceable>Java</literal> と
                    <literal>process<replaceable>SourceSet</replaceable>Resources</literal>。一部のプラグインはさらにこのソースセットのコンパイルタスクを追加する
                    <phrase role="original"><literal>compile<replaceable>SourceSet</replaceable>Java</literal> and
                    <literal>process<replaceable>SourceSet</replaceable>Resources</literal>.
                    Some plugins add additional compilation tasks for the source set.</phrase>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>特定のソースセットのクラスディレクトリを構築する
                <phrase role="original">Assembles the given source set's classes directory.</phrase></td>
            </tr>
        </table>
        
        <para role="original">The Java plugin also adds a number of tasks which form a lifecycle for the project:</para>
        <para>Javaプラグインは、プロジェクトのライフサイクルを構成する数多くのタスクも追加します：</para>

        <table>
            <title>Javaプラグイン - ライフサイクルタスク<phrase role="original">Java plugin - lifecycle tasks</phrase></title>
            <thead>
                <tr>
                    <td>タスク名<phrase role="original">Task name</phrase></td>
                    <td>依存先<phrase role="original">Depends on</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>説明<phrase role="original">Description</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>assemble</literal>
                </td>
                <td>
                    <literal>jar</literal>を含む、プロジェクトのすべてのアーカイブタスク。
                    一部のプラグインはプロジェクトにさらにアーカイブタスクを追加する
                    <phrase role="original">All archive tasks in the project, including <literal>jar</literal>. Some plugins add additional
                    archive tasks to the project.</phrase>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>プロジェクトのすべてのアーカイブを構築する
                <phrase role="original">Assembles all the archives in the project.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>check</literal>
                </td>
                <td>
                    <literal>test</literal>を含む、プロジェクトのすべての検証タスク。
                    一部のプラグインはプロジェクトにさらに検証タスクを追加する
                    <phrase role="original">All verification tasks in the project, including <literal>test</literal>. Some plugins add
                    additional verification tasks to the project.</phrase>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>プロジェクトのすべての検証タスクを実行する
                <phrase role="original">Performs all verification tasks in the project.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>build</literal>
                </td>
                <td>
                    <literal>check</literal> と <literal>assemble</literal>
                    <phrase role="original"><literal>check</literal> and <literal>assemble</literal></phrase>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>プロジェクトのフルビルドを実行する
                <phrase role="original">Performs a full build of the project.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>buildNeeded</literal>
                </td>
                <td>
                    <literal>build</literal> と、<literal>testRuntime</literal>コンフィギュレーションのプロジェクトライブラリ依存先すべての
                    <literal>build</literal>タスク                   
                    <phrase role="original"><literal>build</literal> and <literal>build</literal> tasks in all project lib dependencies of the
                    <literal>testRuntime</literal> configuration.</phrase>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>このプロジェクトと、このプロジェクトが依存しているすべてのプロジェクトのフルビルドを実行する。
                <phrase role="original">Performs a full build of the project and all projects it depends on.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>buildDependents</literal>
                </td>
                <td>
                    <literal>build</literal> と、<literal>testRuntime</literal>コンフィギュレーションのプロジェクトライブラリ依存先がこのプロジェクトであるすべてのプロジェクトの
                    <literal>build</literal>タスク 
                    <phrase role="original"><literal>build</literal> and <literal>build</literal> tasks in all projects with a project lib
                    dependency on this project in a <literal>testRuntime</literal> configuration.</phrase>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>このプロジェクトと、このプロジェクトに依存しているすべてのプロジェクトのフルビルドを実行する。
                <phrase role="original">Performs a full build of the project and all projects which depend on it.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>build<replaceable>ConfigurationName</replaceable></literal>
                </td>
                <td>
                    <replaceable>ConfigurationName</replaceable>コンフィギュレーションのアーティファクトを作り出すタスク
                    <phrase role="original">The tasks which produce the artifacts in configuration <replaceable>ConfigurationName</replaceable>.</phrase>
                </td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>指定されたコンフィギュレーションのアーティファクトを構築する。
                    このタスクは、Javaプラグインが暗黙的に適用するBaseプラグインにより追加される。
                    <phrase role="original">Assembles the artifacts in the specified configuration.
                        The task is added by the Base plugin which is implicitly applied by the Java plugin.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>upload<replaceable>ConfigurationName</replaceable></literal>
                </td>
                <td>
                    <replaceable>ConfigurationName</replaceable>コンフィギュレーションのアーティファクトをアップロードするタスク
                    <phrase role="original">The tasks which uploads the artifacts in configuration <replaceable>ConfigurationName</replaceable>.</phrase>
                </td>
                <td><apilink class="org.gradle.api.tasks.Upload"/></td>
                <td>指定されたコンフィギュレーションのアーティファクトを構築しアップロードする。
                    このタスクは、Javaプラグインが暗黙的に適用するBaseプラグインにより追加される。
                    <phrase role="original">Assembles and uploads the artifacts in the specified configuration.
                        The task is added by the Base plugin which is implicitly applied by the Java plugin.</phrase>
                </td>
            </tr>
        </table>

        <para role="original">The following diagram shows the relationships between these tasks.</para>
        <para>下の図は、上記のタスク間の関係を示しています。</para>

        <figure>
            <title>Javaプラグイン - タスク<phrase role="original">Java plugin - tasks</phrase></title>
            <imageobject>
                <imagedata fileref="img/javaPluginTasks.png"/>
            </imageobject>
        </figure>
    </section>

    <section>
        <title>プロジェクトレイアウト<phrase role="original">Project layout</phrase></title>
        <para role="original">The Java plugin assumes the project layout shown below. None of these directories need exist or have
            anything in them. The Java plugin will compile whatever it finds, and handles anything which is missing.
        </para>
        <para>Javaプラグインは、以下のようなプロジェクトレイアウトを仮定しています。これらのディレクトリは、存在しなかったり中身が空でもかまいません。Javaプラグインは、見つけたものをコンパイルし、見つからないものには適切に対処します。
        </para>

        <table id='javalayout'>
            <title>Javaプラグイン - デフォルトプロジェクトレイアウト<phrase role="original">Java plugin - default project layout</phrase></title>
            <thead>
                <tr>
                    <td>ディレクトリ<phrase role="original">Directory</phrase></td>
                    <td>意味<phrase role="original">Meaning</phrase></td>
                </tr>
            </thead>
            <xi:include href="javaProjectMainLayout.xml"/>
            <xi:include href="javaProjectTestLayout.xml"/>
            <xi:include href="javaProjectGenericLayout.xml"/>
        </table>

        <section>
            <title>プロジェクトレイアウトの変更<phrase role="original">Changing the project layout</phrase></title>
            <para role="original">You configure the project layout by configuring the appropriate source set. This is discussed in
                more detail in the following sections. Here is a brief example which changes the main Java and resource
                source directories.
            </para>
            <para>プロジェクトのレイアウトは、適切なソースセットを設定することでカスタマイズできます。これについては後続の節でより詳しく説明します。以下に、mainのJavaソースとリソースのソースディレクトリを変更する簡単な例を示します。
            </para>
            <sample id="customJavaSourceLayout" dir="java/customizedLayout" title="Javaソースレイアウトのカスタマイズ / Custom Java source layout">
                <sourcefile file="build.gradle" snippet="define-main"/>
            </sample>
        </section>
    </section>

    <section id="sec:java_plugin_and_dependency_management">
        <title>依存関係の管理<phrase role="original">Dependency management</phrase></title>
        <para role="original">The Java plugin adds a number of dependency configurations to your project, as shown below. It assigns
            those configurations to tasks such as <literal>compileJava</literal> and <literal>test</literal>.
        </para>
        <para>Javaプラグインは、以下のような多くの依存関係のコンフィギュレーションをプロジェクトに追加します。
        これらのコンフィギュレーションは<literal>compileJava</literal>や<literal>test</literal>といったタスクに割り当てられます。
        </para>
        <table id='tab:configurations'>
            <title>Javaプラグイン - 依存関係のコンフィギュレーション<phrase role="original">Java plugin - dependency configurations</phrase></title>
            <thead>
                <tr>
                    <td>名前<phrase role="original">Name</phrase></td>
                    <td>拡張元<phrase role="original">Extends</phrase></td>
                    <td>利用するタスク<phrase role="original">Used by tasks</phrase></td>
                    <td>意味<phrase role="original">Meaning</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>compile</td>
                <td>-</td>
                <td>compileJava</td>
                <td>コンパイル時の依存関係
                <phrase role="original">Compile time dependencies</phrase></td>
            </tr>
            <tr>
                <td>runtime</td>
                <td>compile</td>
                <td>-</td>
                <td>実行時の依存関係
                <phrase role="original">Runtime dependencies</phrase></td>
            </tr>
            <tr>
                <td>testCompile</td>
                <td>compile</td>
                <td>compileTestJava</td>
                <td>テストのコンパイル時の追加依存関係
                <phrase role="original">Additional dependencies for compiling tests.</phrase></td>
            </tr>
            <tr>
                <td>testRuntime</td>
                <td>runtime, testCompile</td>
                <td>test</td>
                <td>テストの実行時の追加依存関係
                <phrase role="original">Additional dependencies for running tests only.</phrase></td>
            </tr>
            <tr>
                <td>archives</td>
                <td>-</td>
                <td>uploadArchives</td>
                <td>このプロジェクトが生成するアーティファクト(jarファイルなど)
                <phrase role="original">Artifacts (e.g. jars) produced by this project.</phrase></td>
            </tr>
            <tr>
                <td>default</td>
                <td>runtime</td>
                <td>-</td>
                <td>このプロジェクトに依存するプロジェクトが使用する、デフォルトのコンフィグレーション。アーティファクトと、このプロジェクトが実行時に要求する依存関係が含まれる。
                    <phrase role="original">The default configuration used by a project dependency on this project. Contains the artifacts and
                    dependencies required by this project at runtime.</phrase>
                </td>
            </tr>
        </table>
        <figure>
            <title>Javaプラグイン - 依存関係のコンフィギュレーション<phrase role="original">Java plugin - dependency configurations</phrase></title>
            <imageobject>
                <imagedata fileref="img/javaPluginConfigurations.png"/>
            </imageobject>
        </figure>
        <para role="original">For each source set you add to the project, the Java plugins adds the following dependency configurations:</para>
        <para>プロジェクトに追加されたそれぞれのソースセットに対し、Javaプラグインは次の依存関係コンフィグレーションを追加します。</para>
        <table id="java_source_set_configurations">
            <title>Javaプラグイン - ソースセットの依存関係コンフィグレーション<phrase role="original">Java plugin - source set dependency configurations</phrase></title>
            <thead>
                <tr>
                    <td>名前<phrase role="original">Name</phrase></td>
                    <td>拡張元<phrase role="original">Extends</phrase></td>
                    <td>利用するタスク<phrase role="original">Used by tasks</phrase></td>
                    <td>意味<phrase role="original">Meaning</phrase></td>
                </tr>
            </thead>
            <tr>
                <td><replaceable>sourceSet</replaceable>Compile</td>
                <td>-</td>
                <td>compile<replaceable>SourceSet</replaceable>Java</td>
                <td>対象ソースセットのコンパイル時依存関係<phrase role="original">Compile time dependencies for the given source set</phrase></td>
            </tr>
            <tr>
                <td><replaceable>sourceSet</replaceable>Runtime</td>
                <td><replaceable>sourceSet</replaceable>Compile</td>
                <td>-</td>
                <td>対象ソースセットの実行時依存関係<phrase role="original">Runtime time dependencies for the given source set</phrase></td>
            </tr>
        </table>
    </section>

    <section>
        <title>規約プロパティ<phrase role="original">Convention properties</phrase></title>
        <para role="original">
            The Java plugin adds a number of convention properties to the project, shown below. You can use these properties
            in your build script as though they were properties of the project object (see
            <xref linkend="sub:more_about_convention_objects"/>).
        </para>
        <para>
            Javaプラグインは、以下のような多くの規約プロパティをプロジェクトに追加します。
            これらは、ビルドスクリプトの中で、あたかもprojectオブジェクトのプロパティであるかのように使うことができます
            (<xref linkend="sub:more_about_convention_objects"/>参照)。
        </para>

        <table id='javaconventionDir'>
            <title>Javaプラグイン - ディレクトリプロパティ<phrase role="original">Java plugin - directory properties</phrase></title>
            <thead>
                <tr>
                    <td>プロパティ名<phrase role="original">Property name</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>デフォルト値<phrase role="original">Default value</phrase></td>
                    <td>説明<phrase role="original">Description</phrase></td>
                </tr>
            </thead>
            <xi:include href="reportingBasePluginProperties.xml"/>
            <tr>
                <td>
                    <literal>testResultsDirName</literal>
                </td>
                <td>
                    <classname>String</classname>
                </td>
                <td>
                    <literal>test-results</literal>
                </td>
                <td>
                    テスト結果の.xmlファイルを生成するディレクトリ名。ビルドディレクトリへの相対パス
                    <phrase role="original">The name of the directory to generate test result .xml files into, relative to the build directory.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>testResultsDir</literal>
                </td>
                <td>
                    <classname>File</classname> (read-only)
                </td>
                <td>
                    <literal><replaceable>buildDir</replaceable>/<replaceable>testResultsDirName</replaceable></literal>
                </td>
                <td>
                    テスト結果の.xmlファイルを生成するディレクトリ<phrase role="original">The directory to generate test result .xml files into.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>testReportDirName</literal>
                </td>
                <td>
                    <classname>String</classname>
                </td>
                <td>
                    <literal>tests</literal>
                </td>
                <td>
                    テストレポートを生成するディレクトリ名。レポートディレクトリへの相対パス
                    <phrase role="original">The name of the directory to generate the test report into, relative to the reports directory.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>testReportDir</literal>
                </td>
                <td>
                    <classname>File</classname> (read-only)
                </td>
                <td>
                    <literal><replaceable>reportsDir</replaceable>/<literal>testReportDirName</literal></literal>
                </td>
                <td>
                    テストレポートを生成するディレクトリ
                    <phrase role="original">The directory to generate the test report into.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>libsDirName</literal>
                </td>
                <td>
                    <classname>String</classname>
                </td>
                <td>
                    <literal>libs</literal>
                </td>
                <td>
                    ライブラリを生成するディレクトリ名。ビルドディレクトリへの相対パス
                    <phrase role="original">The name of the directory to generate libraries into, relative to the build directory.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>libsDir</literal>
                </td>
                <td>
                    <classname>File</classname> (read-only)
                </td>
                <td>
                    <literal><replaceable>buildDir</replaceable>/<replaceable>libsDirName</replaceable></literal>
                </td>
                <td>
                    ライブラリを生成するディレクトリ
                    <phrase role="original">The directory to generate libraries into.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>distsDirName</literal>
                </td>
                <td>
                    <classname>String</classname>
                </td>
                <td>
                    <literal>distributions</literal>
                </td>
                <td>
                    ディストリビューションを生成するディレクトリ名。ビルドディレクトリへの相対パス
                    <phrase role="original">The name of the directory to generate distributions into, relative to the build directory.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>distsDir</literal>
                </td>
                <td>
                    <classname>File</classname> (read-only)
                </td>
                <td>
                    <literal><replaceable>buildDir</replaceable>/<replaceable>distsDirName</replaceable></literal>
                </td>
                <td>
                    ディストリビューションを生成するディレクトリ
                    <phrase role="original">The directory to generate distributions into.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>docsDirName</literal>
                </td>
                <td>
                    <classname>String</classname>
                </td>
                <td>
                    <literal>docs</literal>
                </td>
                <td>
                    ドキュメントを生成するディレクトリ名。ビルドディレクトリへの相対パス
                    <phrase role="original">The name of the directory to generate documentation into, relative to the build directory.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>docsDir</literal>
                </td>
                <td>
                    <classname>File</classname> (read-only)
                </td>
                <td>
                    <literal><replaceable>buildDir</replaceable>/<replaceable>docsDirName</replaceable></literal>
                </td>
                <td>
                    ドキュメントを生成するディレクトリ
                    <phrase role="original">The directory to generate documentation into.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>dependencyCacheDirName</literal>
                </td>
                <td>
                    <classname>String</classname>
                </td>
                <td>
                    <literal>dependency-cache</literal>
                </td>
                <td>
                    ソースの依存関係情報をキャッシュするのに使用するディレクトリ名。ビルドディレクトリへの相対パス
                    <phrase role="original">The name of the directory to use to cache source dependency information, relative to the build directory.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>dependencyCacheDir</literal>
                </td>
                <td>
                    <classname>File</classname> (read-only)
                </td>
                <td>
                    <literal><replaceable>buildDir</replaceable>/<replaceable>dependencyCacheDirName</replaceable></literal>
                </td>
                <td>
                    ソースの依存関係情報をキャッシュするのに使用するディレクトリ
                    <phrase role="original">The directory to use to cache source dependency information.</phrase>
                </td>
            </tr>
        </table>

        <table id='javaconventionNonDir'>
            <title>Javaプラグイン - その他のプロパティ<phrase role="original">Java plugin - other properties</phrase></title>
            <thead>
                <tr>
                    <td>プロパティ名<phrase role="original">Property name</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>デフォルト値<phrase role="original">Default value</phrase></td>
                    <td>説明<phrase role="original">Description</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>sourceSets</literal>
                </td>
                <td><apilink class="org.gradle.api.tasks.SourceSetContainer"/> (read-only)</td>
                <td>非null<phrase role="original">Not null</phrase></td>
                <td>プロジェクトのソースセット
                <phrase role="original">Contains the project's source sets.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>sourceCompatibility</literal>
                </td>
                <td><apilink class="org.gradle.api.JavaVersion"/>。
                StringやNumberで設定することも可能。例：                    <literal>'1.5'</literal> や <literal>1.5</literal>
                    <phrase role="original"><apilink class="org.gradle.api.JavaVersion"/>. Can also set using a String or a Number, eg
                    <literal>'1.5'</literal> or <literal>1.5</literal>.</phrase>
                </td>
                <td>Value of the current used JVM</td>
                <td>Javaソースのコンパイル時に使用するJavaバージョン互換性
                <phrase role="original">Java version compatibility to use when compiling Java source.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>targetCompatibility</literal>
                </td>
                <td><apilink class="org.gradle.api.JavaVersion"/>。
                StringやNumberで設定することも可能。例：                    <literal>'1.5'</literal> や <literal>1.5</literal>
                    <phrase role="original"><apilink class="org.gradle.api.JavaVersion"/>. Can also set using a String or Number, eg
                    <literal>'1.5'</literal> or <literal>1.5</literal>.</phrase>
                </td>
                <td>
                    <literal><replaceable>sourceCompatibility</replaceable></literal>
                </td>
                <td>クラス生成のターゲットJavaバージョン
                <phrase role="original">Java version to generate classes for.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>archivesBaseName</literal>
                </td>
                <td>
                    <classname>String</classname>
                </td>
                <td><literal><replaceable>projectName</replaceable></literal></td>
                <td>JARやZIPファイルのようなアーカイブに使用するベース名
                <phrase role="original">The basename to use for archives, such as JAR or ZIP files.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>manifest</literal>
                </td>
                <td><apilink class="org.gradle.api.java.archives.Manifest"/></td>
                <td>空のマニフェスト<phrase role="original">an empty manifest</phrase></td>
                <td>すべてのJARファイルを含むマニフェスト
                <phrase role="original">The manifest to include in all JAR files.</phrase></td>
            </tr>
        </table>

        <para role="original">
            These properties are provided by convention objects of type <apilink class="org.gradle.api.plugins.JavaPluginConvention"/>,
            <apilink class="org.gradle.api.plugins.BasePluginConvention"/> and
            <apilink class="org.gradle.api.plugins.ReportingBasePluginConvention"/>.
        </para>
        <para>
            これらのプロパティは、<apilink class="org.gradle.api.plugins.JavaPluginConvention"/>、
            <apilink class="org.gradle.api.plugins.BasePluginConvention"/>、
            <apilink class="org.gradle.api.plugins.ReportingBasePluginConvention"/>などの型の規約オブジェクトによって提供されます。
        </para>
    </section>

    <section id="sec:source_sets">
        <title>ソースセットの利用<phrase role="original">Working with source sets</phrase></title>
        <para role="original">You can access the source sets of a project using the <literal>sourceSets</literal> property. This
            is a container for the project's source sets, of type <apilink class="org.gradle.api.tasks.SourceSetContainer"/>.
            There is also a <literal>sourceSets { }</literal> script block, which you can pass a closure to configure the
            source set container. The source set container works pretty much the same way as other containers, such
            as <literal>tasks</literal>.
        <para>プロジェクトのソースセットには、<literal>sourceSets</literal>プロパティを使ってアクセスすることができます。
        これはプロジェクトのソースセットのコンテナで、<apilink class="org.gradle.api.tasks.SourceSetContainer"/>型です。
        また、<literal>sourceSets()</literal>というメソッドもあり、クロージャを渡してソースセットコンテナを設定することができます。
        ソースセットコンテナは、<literal>tasks</literal>のような他のコンテナと同じように働きます。
        </para>
        </para>
        <sample id="defineSourceSet" dir="userguide/java/sourceSets" title="ソースセットへのアクセス / Accessing a source set">
            <sourcefile file="build.gradle" snippet="access-source-set"/>
        </sample>
        <para role="original">To configure an existing source set, you simply use one of the above access methods to set the
            properties of the source set. The properties are described below. Here is an example which configures the
            main Java and resources directories:</para>
        <para>既存のソースセットを設定するには、上記のアクセスメソッドの一つを使って、そのソースセットのプロパティを設定します。
        プロパティについては後述します。以下に、mainのJavaソースとリソースディレクトリを設定する例を示します：</para>
        <sample id="configureSourceSet" dir="java/customizedLayout" title="ソースセットのソースディレクトリの設定 / Configuring the source directories of a source set">
            <sourcefile file="build.gradle" snippet="define-main"/>
        </sample>

        <section>
            <title>ソースセットプロパティ<phrase role="original">Source set properties</phrase></title>
            <para role="original">The following table lists some of the important properties of a source set.
                You can find more details in the API documentation for <apilink class="org.gradle.api.tasks.SourceSet"/>.
            </para>
            <para>以下の表は、ソースセットの重要なプロパティの一覧です。
            さらに詳しくは、<apilink class="org.gradle.api.tasks.SourceSet"/>のAPIドキュメントをご覧ください。
            </para>
            <table>
                <title>Javaプラグイン - ソースセットプロパティ<phrase role="original">Java plugin - source set properties</phrase></title>
                <thead>
                    <tr>
                        <td>プロパティ名<phrase role="original">Property name</phrase></td>
                        <td>型<phrase role="original">Type</phrase></td>
                        <td>デフォルト値<phrase role="original">Default value</phrase></td>
                        <td>説明<phrase role="original">Description</phrase></td>
                    </tr>
                </thead>
                <tr>
                    <td>
                        <literal>name</literal>
                    </td>
                    <td>
                        <classname>String</classname> (read-only)
                    </td>
                    <td>
                        非null<phrase role="original">Not null</phrase>
                    </td>
                    <td>
                        このソースセットを識別するための名前
                        <phrase role="original">The name of the source set, used to identify it.</phrase>
                    </td>
                </tr>
                <tr>
                    <td>
                        <literal>output</literal>
                    </td>
                    <td>
                        <apilink class="org.gradle.api.tasks.SourceSetOutput"/> (read-only)
                    </td>
                    <td>
                        Not null
                    </td>
                    <td>
                        このソースセットに対する出力ファイル。コンパイルされたクラスファイルやリソースを含む。
                        <phrase role="original">The output files of the source set, containing its compiled classes and resources.</phrase>
                    </td>
                </tr>
                <tr>
                    <td>
                        <literal>output.classesDir</literal>
                    </td>
                    <td>
                        <classname>File</classname>
                    </td>
                    <td>
                        <literal><replaceable>buildDir</replaceable>/classes/<replaceable>name</replaceable></literal>
                    </td>
                    <td>
                        このソースセットのクラスを生成するディレクトリ
                        <phrase role="original">The directory to generate the classes of this source set into.</phrase>
                    </td>
                </tr>
                <tr>
                    <td>
                        <literal>output.resourcesDir</literal>
                    </td>
                    <td>
                        <classname>File</classname>
                    </td>
                    <td>
                        <literal><replaceable>buildDir</replaceable>/resources/<replaceable>name</replaceable></literal>
                    </td>
                    <td>
                        このソースセットのリソースを生成するディレクトリ
                        <phrase role="original">The directory to generate the resources of this source set into.</phrase>
                    </td>
                </tr>
                <tr>
                    <td>
                        <literal>compileClasspath</literal>
                    </td>
                    <td>
                        <apilink class="org.gradle.api.file.FileCollection"/>
                    </td>
                    <td>
                        <literal>compile<replaceable>SourceSet</replaceable></literal>コンフィグレーション
                        <phrase role="original"><literal>compile<replaceable>SourceSet</replaceable></literal> configuration.</phrase>
                    </td>
                    <td>
                        このソースセットのソースファイルのコンパイル時クラスパス
                        <phrase role="original">The classpath to use when compiling the source files of this source set.</phrase>
                    </td>
                </tr>
                <tr>
                    <td>
                        <literal>runtimeClasspath</literal>
                    </td>
                    <td>
                        <apilink class="org.gradle.api.file.FileCollection"/>
                    </td>
                    <td>
                        <literal>output</literal> + <literal>runtime<replaceable>SourceSet</replaceable></literal>コンフィグレーション
                        <phrase role="original"><literal>output</literal> + <literal>runtime<replaceable>SourceSet</replaceable></literal> configuration.</phrase>
                    </td>
                    <td>
                        このソースセットのクラスの実行時クラスパス
                        <phrase role="original">The classpath to use when executing the classes of this source set.</phrase>
                    </td>
                </tr>
                <tr>
                    <td>
                        <literal>java</literal>
                    </td>
                    <td>
                        <apilink class="org.gradle.api.file.SourceDirectorySet"/> (read-only)
                    </td>
                    <td>
                        非null<phrase role="original">Not null</phrase>
                    </td>
                    <td>
                        このソースセットのJavaソースファイル。
                        Javaソースディレクトリ内の<filename>.java</filename>ファイルのみを含み、その他のファイルは含まない
                        <phrase role="original">The Java source files of this source set. Contains only <filename>.java</filename> files
                        found in the Java source directories, and excludes all other files.</phrase>
                    </td>
                </tr>
                <tr>
                    <td>
                        <literal>java.srcDirs</literal>
                    </td>
                    <td>
                        <classname>Set&lt;File></classname>。
                        設定には<xref linkend="sec:specifying_multiple_files"/>で述べる方法ならどれでも使用可
                        <phrase role="original"><classname>Set&lt;File></classname>. Can set using anything described in <xref linkend="sec:specifying_multiple_files"/>.</phrase>
                    </td>
                    <td>
                        <literal>[<replaceable>projectDir</replaceable>/src/<replaceable>name</replaceable>/java]</literal>
                    </td>
                    <td>
                        このソースセットのJavaソースファイルを含むソースディレクトリ
                        <phrase role="original">The source directories containing the Java source files of this source set.</phrase>
                    </td>
                </tr>
                <tr>
                    <td>
                        <literal>resources</literal>
                    </td>
                    <td>
                        <apilink class="org.gradle.api.file.SourceDirectorySet"/> (read-only)
                    </td>
                    <td>
                        非null<phrase role="original">Not null</phrase>
                    </td>
                    <td>
                        このソースセットのリソース。
                        リソースのみを含み、リソースソースディレクトリ内の<filename>.java</filename>ファイルは含まない。
                        Groovyプラグインのような他のプラグインでは、このコレクションから除外されるタイプがさらに追加される。
                        <phrase role="original">The resources of this source set. Contains only resources, and excludes any
                        <filename>.java</filename> files found in the resource source directories. Other plugins,
                        such as the Groovy plugin, exclude additional types of files from this collection.</phrase>
                    </td>
                </tr>
                <tr>
                    <td>
                        <literal>resources.srcDirs</literal>
                    </td>
                    <td>
                        <classname>Set&lt;File></classname>。
                        設定には<xref linkend="sec:specifying_multiple_files"/>で述べる方法ならどれでも使用可<phrase role="original"><classname>Set&lt;File></classname>. Can set using anything described in <xref linkend="sec:specifying_multiple_files"/>.</phrase>
                    </td>
                    <td>
                        <literal>[<replaceable>projectDir</replaceable>/src/<replaceable>name</replaceable>/resources]</literal>
                    </td>
                    <td>
                        このソースセットのリソースを含むソースディレクトリ
                        <phrase role="original">The source directories containing the resources of this source set.</phrase>
                    </td>
                </tr>
                <tr>
                    <td>
                        <literal>allJava</literal>
                    </td>
                    <td>
                        <apilink class="org.gradle.api.file.SourceDirectorySet"/> (read-only)
                    </td>
                    <td>
                        <literal>java</literal>
                    </td>
                    <td>
                        このソースセットのすべての<filename>.java</filename>ファイル。
                        Groovyプラグインのような一部のプラグインでは、さらに追加のJavaソースファイルがこのコレクションに追加される。
                        <phrase role="original">All <filename>.java</filename> files of this source set. Some plugins, such as the Groovy plugin,
                        add additional Java source files to this collection.</phrase>
                    </td>
                </tr>
                <tr>
                    <td>
                        <literal>allSource</literal>
                    </td>
                    <td>
                        <apilink class="org.gradle.api.file.SourceDirectorySet"/> (read-only)
                    </td>
                    <td>
                        <literal>resources + java</literal>
                    </td>
                    <td>
                        このソースセットのすべてのソースファイル。
                        すべてのリソースファイルとJavaソースファイルが含まれる。
                        Groovyプラグインのような一部のプラグインでは、さらに追加のソースファイルがこのコレクションに追加される。
                        <phrase role="original">All source files of this source set. This include all resource files and all Java source files.
                        Some plugins, such as the Groovy plugin, add additional source files to this collection.</phrase>
                    </td>
                </tr>
            </table>
        </section>

        <section>
            <title>新しいソースセットの定義<phrase role="original">Defining new source sets</phrase></title>
            <para role="original">To define a new source set, you simply reference it in the <literal>sourceSets { }</literal> block. Here's an example:
            </para>
            <para>新しいソースセットは、sourceSets { }ブロックの中でそれを参照するだけで定義できます。以下がその例です。:</para>
            <sample id="defineSourceSet" dir="userguide/java/sourceSets" title="ソースセットの定義 / Defining a source set">
                <sourcefile file="build.gradle" snippet="define-source-set"/>
            </sample>
            <para role="original">
                When you define a new source set, the Java plugin adds some dependency configurations for the
                source set, as shown in <xref linkend="java_source_set_configurations"/>. You can use these configurations to
                define the compile and runtime dependencies of the source set.
            </para>
            <para>
                ソースセットを定義すると、Javaプラグインは、そのソースセットのために<xref linkend="java_source_set_configurations"/>で示した依存関係のコンフィグレーションを追加します。これらのコンフィグレーションを、そのソースセットのコンパイル時や実行時の依存関係を定義するために使うことができます。
            </para>
            <sample id="sourceSetDependencies" dir="userguide/java/sourceSets" title="ソースセットの依存関係定義 / Defining source set dependencies">
                <sourcefile file="build.gradle" snippet="source-set-dependencies"/>
            </sample>
            <para role="original">
                The Java plugin also adds a number of tasks which assemble the classes for the
                source set, as shown in <xref linkend="java_source_set_tasks"/>. For example, for a source set called
                <literal>intTest</literal>, you can run <userinput>gradle intTestClasses</userinput> to compile the
                int test classes.
            </para>
            <para>
                また、Javaプラグインは、<xref linkend="java_source_set_tasks"/>に示したような、 そのソースセットのクラスを構築するためのタスクを追加します。 例えば、intTestというソースセットを追加すると、<userinput>gradle intTestClasses</userinput>と実行することでそのソースセットのクラスをコンパイルできるようになります。
                </para>
                <sample id="compileSourceSet" dir="userguide/java/sourceSets" title="ソースセットのコンパイル / Compiling a source set">
                <output args="intTestClasses"/>
            </sample>
        </section>

        <section>
            <title>ソースセットの実例<phrase role="original">Some source set examples</phrase></title>
            <para role="original">Adding a JAR containing the classes of a source set:</para>
            <para>ソースセットのクラスを含んだJARを追加します：</para>
            <sample id="configureSourceSet" dir="userguide/java/sourceSets" title="ソースセットのJARを生成 / Assembling a JAR for a source set">
                <sourcefile file="build.gradle" snippet="jar"/>
            </sample>
            <para role="original">Generating Javadoc for a source set:</para>
            <para>ソースセットのJavadocを生成します：</para>
            <sample id="configureSourceSet" dir="userguide/java/sourceSets" title="ソースセットのJavadocを生成 / Generating the Javadoc for a source set">
                <sourcefile file="build.gradle" snippet="javadoc"/>
            </sample>
            <para role="original">Adding a test suite to run the tests in a source set:</para>
            <para>ソースセットに含まれるテストを実行するテストスイートを追加します：</para>
            <sample id="configureSourceSet" dir="userguide/java/sourceSets" title="ソースセットのテストを実行 / Running tests in a source set">
                <sourcefile file="build.gradle" snippet="test"/>
            </sample>
        </section>
    </section>

    <section id='sec:javadoc'>
        <title>Javadoc<phrase role="original">Javadoc</phrase></title>
        <para role="original">The <literal>javadoc</literal> task is an instance of <apilink class="org.gradle.api.tasks.javadoc.Javadoc"/>.
            It supports the core javadoc options and the options of the standard doclet described in the
            <ulink url='http://download.oracle.com/javase/1.5.0/docs/tooldocs/windows/javadoc.html#referenceguide'>reference documentation</ulink>
            of the Javadoc executable.
            For a complete list of supported Javadoc options consult the API documentation of the following classes:
            <apilink class="org.gradle.external.javadoc.CoreJavadocOptions"/> and <apilink class="org.gradle.external.javadoc.StandardJavadocDocletOptions"/>. 
        </para>
        <para><literal>javadoc</literal>タスクは<apilink class="org.gradle.api.tasks.javadoc.Javadoc"/>のインスタンスです。
        javadocの主なオプションと、javadocコマンドの<ulink url='http://download.oracle.com/javase/1.5.0/docs/tooldocs/windows/javadoc.html#referenceguide'>リファレンスガイド</ulink>に記載されている標準docletのオプションをサポートしています。
        サポートしているjavadocオプションの完全なリストについては、次のクラスのAPIドキュメントを参照してください: 
            <apilink class="org.gradle.external.javadoc.CoreJavadocOptions"/>および<apilink class="org.gradle.external.javadoc.StandardJavadocDocletOptions"/>。
        </para>
        <table>
            <title>Javaプラグイン - Javadocプロパティ<phrase role="original">Java plugin - Javadoc properties</phrase></title>
            <thead>
                <tr>
                    <td>プロパティ名<phrase role="original">Property name</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>デフォルト値<phrase role="original">Default value</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>classpath</literal>
                </td>
                <td><apilink class="org.gradle.api.file.FileCollection"/></td>
                <td><literal>sourceSets.main.output + sourceSets.main.compileClasspath</literal></td>
            </tr>
            <tr>
                <td><literal>source</literal></td>
                <td><apilink class="org.gradle.api.file.FileTree"/>。
                設定には<xref linkend="sec:specifying_multiple_files"/>で述べる方法ならどれでも使用可
                <phrase role="original"><apilink class="org.gradle.api.file.FileTree"/>. Can set using anything described in <xref linkend="sec:specifying_multiple_files"/>.</phrase></td>
                <td><literal>sourceSets.main.allJava</literal></td>
            </tr>
            <tr>
                <td>
                    <literal>destinationDir</literal>
                </td>
                <td><classname>File</classname></td>
                <td><filename><replaceable>docsDir</replaceable>/javadoc</filename></td>
            </tr>
            <tr>
                <td>
                    <literal>title</literal>
                </td>
                <td><classname>String</classname></td>
                <td>プロジェクトの名前とバージョン
                <phrase role="original">The name and version of the project</phrase></td>
            </tr>
        </table>
    </section>

    <section id='sec:clean'>
        <title>Clean<phrase role="original">Clean</phrase></title>
        <para role="original">The <literal>clean</literal> task is an instance of <apilink class="org.gradle.api.tasks.Delete"/>. It
            simply removes the directory denoted by its <literal>dir</literal>
            property.
        </para>
        <para><literal>clean</literal>タスクは<apilink class="org.gradle.api.tasks.Delete"/>のインスタンスです。
        <literal>dir</literal>プロパティで示されるディレクトリを削除します。
        </para>
        <table>
            <title>Javaプラグイン - Cleanプロパティ<phrase role="original">Java plugin - Clean properties</phrase></title>
            <thead>
                <tr>
                    <td>タスクプロパティ<phrase role="original">Property name</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>デフォルト値<phrase role="original">Default value</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>dir</literal>
                </td>
                <td><classname>File</classname></td>
                <td><filename><replaceable>buildDir</replaceable></filename></td>
            </tr>
        </table>
    </section>

    <section id='sec:resources'>
        <title>リソース<phrase role="original">Resources</phrase></title>
        <para role="original">The Java plugin uses the <apilink class="org.gradle.api.tasks.Copy"/> task for resource handling. It adds an
            instance for each source set in the project. You can find out more about the copy task in
            <xref linkend="sec:copying_files"/>.
        </para>
        <para>Javaプラグインは、リソースの処理に<apilink class="org.gradle.api.tasks.Copy"/>タスクを使います。
        プロジェクトの各ソースセットに対して一つのインスタンスを追加します。
        copyタスクの詳細については、<xref linkend="sec:copying_files"/>をご覧ください。
        </para>
        <table>
            <title>Javaプラグイン- processResourcesプロパティ<phrase role="original">Java plugin - ProcessResources properties</phrase></title>
            <thead>
                <tr>
                    <td>タスクプロパティ<phrase role="original">Property name</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>デフォルト値<phrase role="original">Default value</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>srcDirs</literal>
                </td>
                <td><classname>Object</classname>。
                設定には<xref linkend="sec:specifying_multiple_files"/>で述べる方法ならどれでも使用可
                <phrase role="original"><classname>Object</classname>. Can set using anything described in <xref linkend="sec:specifying_multiple_files"/>.</phrase></td>
                <td><literal><replaceable>sourceSet</replaceable>.resources</literal></td>
            </tr>
            <tr>
                <td>
                    <literal>destinationDir</literal>
                </td>
                <td><classname>File</classname>。
                設定には<xref linkend="sec:locating_files"/>で述べる方法ならどれでも使用可
                <phrase role="original"><classname>File</classname>. Can set using anything described in <xref linkend="sec:locating_files"/>.</phrase></td>
                <td><literal><replaceable>sourceSet</replaceable>.output.resourcesDir</literal></td>
            </tr>
        </table>
    </section>

    <section id='sec:compile'>
        <title>CompileJava<phrase role="original">CompileJava</phrase></title>
        <para role="original">The Java plugin adds a <apilink class="org.gradle.api.tasks.compile.Compile"/> instance for each
            source set in the project. Some of the most common configuration options are shown below.
        </para>
        <para>Javaプラグインは、プロジェクトの各ソースセットに対して一つの<apilink class="org.gradle.api.tasks.compile.Compile"/>インスタンスを追加します。
        compileタスクは、実際のコンパイル作業をAntのjavacタスクに委譲します。
        Antのjavacタスクの大部分のプロパティが設定可能です。
        </para>
        <table>
            <title>Javaプラグイン - Compileプロパティ<phrase role="original">Java plugin - Compile properties</phrase></title>
            <thead>
                <tr>
                    <td>タスクプロパティ<phrase role="original">Property name</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>デフォルト値<phrase role="original">Default value</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>classpath</literal>
                </td>
                <td><apilink class="org.gradle.api.file.FileCollection"/></td>
                <td><literal><replaceable>sourceSet</replaceable>.compileClasspath</literal></td>
            </tr>
            <tr>
                <td>
                    <literal>source</literal>
                </td>
                <td><apilink class="org.gradle.api.file.FileTree"/>。
                設定には<xref linkend="sec:specifying_multiple_files"/>で述べる方法ならどれでも使用可
                <phrase role="original"><apilink class="org.gradle.api.file.FileTree"/>. Can set using anything described in <xref linkend="sec:specifying_multiple_files"/>.</phrase></td>
                <td><literal><replaceable>sourceSet</replaceable>.java</literal></td>
            </tr>
            <tr>
                <td>
                    <literal>destinationDir</literal>
                </td>
                <td><classname>File</classname>.</td>
                <td><literal><replaceable>sourceSet</replaceable>.output.classesDir</literal></td>
            </tr>
        </table>
        
        <para role="original">The compile task delegates to Ant's javac task. Setting <literal>options.useAnt</literal> to <literal>false</literal>
            activates Gradle's direct compiler integration, bypassing the Ant task. In a future Gradle release, this will become the default.
        </para>
        <para>コンパイルタスクは、AntのJavacタスクに処理を投げます。 設定を <literal>options.useAnt</literal> を <literal>false</literal>にすると、
            Antタスクを回避して、Gradleのダイレクトコンパイラーの利用を有効にします。 将来リリースされるGradleでは, その徹底がデフォルトになるでしょう。
        </para>
        
        <para role="original">By default, the Java compiler runs in the Gradle process. Setting <literal>options.fork</literal> to <literal>true</literal>
            causes compilation to occur in a separate process. In the case of the Ant javac task, this means that a new process will be
            forked for each compile task, which can slow down compilation. Conversely, Gradle's direct compiler integration (see above) will
            reuse the same compiler process as much as possible. In both cases, all fork options specified
            with <literal>options.forkOptions</literal> will be honored.
        </para>
        <para>デフォルトでは、javaコンパイラはGradleプロセス上で実行されます。設定を <literal>options.fork</literal> を <literal>true</literal>にすると、
            個別のプロセスでコンパイルを実行します。 Antのjavacタスクを例に挙げると, コンパイルタスクを実行するたびに新しいプロセスが実行される形で
            遅延実行させることも可能です。反対に、Gradleのダイレクトコンパイラの利用を有効にした場合 (上記参照) 出来るだけ
            同一のプロセスでコンパイルを実行しようとします. 両方利用するケースの場合は、全ての処理実行オプションは
            <literal>options.forkOptions</literal> によって指定されるでしょう。
        </para>
    </section>

    <section id='sec:java_test'>
        <title>テスト<phrase role="original">Test</phrase></title>
        <para role="original">The <literal>test</literal> task is an instance of <apilink class="org.gradle.api.tasks.testing.Test"/>.
            It automatically detects and executes all unit tests in the <literal>test</literal> source set.
            It also generates a report once test execution is complete. JUnit and TestNG are both supported.
            Have a look at <apilink class="org.gradle.api.tasks.testing.Test"/> for the complete API.
        </para>
        <para><literal>test</literal>タスクは<apilink class="org.gradle.api.tasks.testing.Test"/>のインスタンスです。
        このタスクは、<literal>test</literal>ソースセットに含まれるすべてのユニットテストを自動的に検出し、実行します。
        また、テストの実行が完了するとレポートを生成します。JUnitとTestNGの両方がサポートされています。
        完全なAPIについては、<apilink class="org.gradle.api.tasks.testing.Test"/>を見てください。
        </para>

        <section>
            <title>テストの実行<phrase role="original">Test execution</phrase></title>
            <para role="original">Tests are executed in a separate isolated JVM. The <apilink class="org.gradle.api.tasks.testing.Test"/> task's
                API allows you some control over how this happens.
            </para>
            <para>テストは隔離された別のJVMで実行されます。
            <apilink class="org.gradle.api.tasks.testing.Test"/>タスクのAPIを使って、テストの実行を制御できます。
            </para>
            <para role="original">There are a number of properties which control how the test process is launched. This includes
                things such as system properties, JVM arguments, and the Java executable to use. The task also provides a
                <literal>debug</literal> property, which when set to true, starts the test process in debug mode,
                suspended and listening on port 5005. This makes it very easy to debug your tests.  You may also enable
                this using a system property as specified below.
            </para>
            <para>テストプロセスの起動を制御するための多くのプロパティが用意されています。
            これにはシステムプロパティや、JVMへの引数、Java実行コマンドなどが含まれます。            またこのタスクは<literal>debug</literal>プロパティを提供していて、これをtrueに設定すると、テストプロセスはデバッグモードで起動され、一時停止してポート5005でlistenした状態になります。
            これにより、テストのデバッグがとても簡単になります。
            このモードは、後述するシステムプロパティを使って有効にすることもできます。
            </para>
            <para role="original">You can specify whether or not to execute your tests in parallel. Gradle provides parallel test execution 
                by running multiple test processes concurrently. Each test process executes only a single test at a time, so you
                generally don't need to do anything special to your tests to take advantage of this.
                The <literal>maxParallelForks</literal> property specifies the maximum number of test processes to run
                at any given time. The default is 1, that is, do not execute the tests in parallel.
            </para>
            <para>テストが並列に実行されるかどうかを指定することができます。
            Gradleでは、複数のテストプロセスを同時に実行する並列テスト実行が可能です。
            各テストプロセスは一度に一つのテストだけを実行するので、通常、これを活用するために何か特別な準備をする必要はありません。
            <literal>maxParallelForks</literal>プロパティで、同時に実行されるテストプロセスの最大個数を指定します。
            デフォルトは1で、これはテストが並列実行されないということです。
            </para>
            <para role="original">The test process sets the <literal>org.gradle.test.worker</literal> system property to a unique
                identifier for that test process, which you can use, for example, in files names or other
                resource identifiers.
            </para>
            <para>テストプロセスでは、そのテストプロセスの一意な識別子である<literal>org.gradle.test.worker</literal>システムプロパティが設定されます。
            これは例えばファイル名の一部や、その他のリソースの識別子などに利用することができます。
            </para>
            <para role="original">You can specify that test processes should be restarted after it has executed a certain number of
                test classes. This can be a useful alternative to giving your test process a very large
                heap.
                The <literal>forkEvery</literal> property specifies the
                maximum number of test classes to execute in a test process. The default is to execute an unlimited number
                of tests in each test process.</para>
            <para>一定のテストクラスを実行し終わったら、そのテストプロセスが再起動されるように指定することができます。
            これは、テストプロセスに巨大なヒープを割り当てることに対する便利な代替手段になりえます。
            <literal>forkEvery</literal>プロパティは、一つのテストプロセス内で実行されるテストクラスの最大数を指定します。
            デフォルトでは各テストプロセスで無制限な数のテストを実行できます。</para>
            <para role="original">The task has an <literal>ignoreFailures</literal> property to control the behavior when tests fail.
                Test always executes every test that it detects. It stops the build afterwards if <literal>ignoreFailures</literal>
                is false and there are failing tests. The default value of <literal>ignoreFailures</literal> is false.
            </para>
            <para>このタスクは、テストが失敗したときの振る舞いを制御する<literal>ignoreFailures</literal>プロパティを持っています。
            Testはいつも見つけたテストをすべて実行します。
            <literal>ignoreFailures</literal>がfalseのとき、失敗したテストがあるとそれ以降のビルドは停止されます。
            <literal>ignoreFailures</literal>のデフォルト値はfalseです。
            </para>
        </section>

        <section>
            <title>システムプロパティ<phrase role="original">System properties</phrase></title>
            <para role="original">There are two system properties that can affect test execution.  Both of these are based off
                  of the name of the test task with a suffix.
            </para>
            <para>二つのシステムプロパティがテストの実行に影響を与えます。
            これらは両方ともテストタスク名＋接尾辞という形式になっています。
            </para>
            <para role="original">Setting a system property of <replaceable>taskName.single</replaceable> = <replaceable>testNamePattern</replaceable>
                  will only execute tests that match the specified <replaceable>testNamePattern</replaceable>.
                  The <replaceable>taskName</replaceable> can be a full multi-project path like &quot;:sub1:sub2:test&quot;
                  or just the task name.  The <replaceable>testNamePattern</replaceable> will be used to form an include
                  pattern of &quot;**/testNamePattern*.class&quot;.
                  If no tests with this pattern can be found an exception is thrown. This is to shield you from false security.
                  If tests of more then one subproject are executed, the pattern is applied to each subproject. An exception
                  is thrown if no tests can be found for a particular subproject. In such a case you can use the path notation of the
                  pattern, so that the pattern is applied only to the test task of a specific subproject. Alternatively you can specify the fully
                  qualified task name to be executed. You can also specify multiple patterns. Examples:
            </para>
            <para><replaceable>taskName.single</replaceable> = <replaceable>testNamePattern</replaceable>というシステムプロパティを設定すると、指定された<replaceable>testNamePattern</replaceable>にマッチするテストだけが実行されます。
            <replaceable>taskName</replaceable>には、&quot;:sub1:sub2:test&quot;のような完全なマルチプロジェクトパスか、単なるタスク名が使えます。
            <replaceable>testNamePattern</replaceable>は、&quot;**/testNamePattern*.class&quot;という形式のincludesパターンを構成するのに使われます。
            このパターンでテストが一つも見つからない場合は例外が発生します。
            これは手違いによる偽りの安心を防ぐためです。
            複数のサブプロジェクトに対してテストが実行される場合、パターンは各サブプロジェクトに適用されます。
            ある一つのサブプロジェクトでテストが見つからなかった場合でも例外が発生します。
            このような場合は、パターンのパス記法を使って、パターンが特定のサブプロジェクトのtestタスクだけに適用されるようにできます。
            あるいは、完全修飾タスク名を使って実行するタスクを指定することも可能です。
            パターンは複数指定することもできます。以下は実例です：
                  <itemizedlist>
                      <listitem>
                          <para><literal>gradle -Dtest.single=ThisUniquelyNamedTest test</literal></para>
                      </listitem>
                      <listitem>
                          <para><literal>gradle -Dtest.single=a/b/ test</literal></para>
                      </listitem>
                      <listitem>
                          <para><literal>gradle -DintegTest.single=*IntegrationTest integTest</literal></para>
                      </listitem>
                      <listitem>
                          <para><literal>gradle -Dtest.single=:proj1:test:Customer build</literal></para>
                      </listitem>
                      <listitem>
                          <para><literal>gradle -DintegTest.single=c/d/ :proj1:integTest</literal></para>
                      </listitem>
                  </itemizedlist>
            </para>
            <para role="original">Setting a system property of <literal>taskName.debug</literal> will run the tests in debug mode,
                  suspended and listening on port 5005.  For example:
                  <literal>gradle test -Dtest.single=ThisUniquelyNamedTest -Dtest.debug</literal>                
            </para>
            <para><literal>taskName.debug</literal>システムプロパティを設定すれば、テストはデバッグモードで実行され、一時停止してポート5005でlistenした状態になります。
            実行例: <literal>gradle test -Dtest.single=ThisUniquelyNamedTest -Dtest.debug</literal>
            </para>
        </section>

        <section>
            <title>テストの検出<phrase role="original">Test detection</phrase></title>
            <para role="original">The <literal>Test</literal> task detects which classes are test classes by inspecting the compiled test classes.
                By default it scans all <filename>.class</filename> files. You can set custom includes / excludes, only those
                classes will be scanned. Depending on the test framework used (JUnit / TestNG) the test class detection
                uses different criteria.
            </para>
            <para><literal>Test</literal>タスクは、コンパイル済みのtestクラスを調べて、どのクラスがテストクラスかを見つけだします。
            デフォルトでは、すべての<filename>.class</filename>ファイルがスキャンされます。
            カスタムの includes / excludes を設定して、特定のクラスだけをスキャンするようにもできます。
            テストクラスの検出には、使用するテストフレームワーク(JUnit / TestNG)によって異なる基準が使われます。
            </para>
            <para role="original">
                When using JUnit, we scan for both JUnit 3 and 4 test classes. If any of the following criteria match, the
                class is considered to be a JUnit test class:
            </para>
            <para>
                JUnitを使っている場合は、JUnit 3と4両方のテストクラスをスキャンします。
                以下のいずれかの基準に合致する場合、そのクラスはJUnitのテストクラスだと見なされます：
                <itemizedlist>
                    <listitem>
                        <para role="original">Class or a super class extends <classname>TestCase</classname> or <classname>GroovyTestCase</classname></para>
                        <para>そのクラスまたはスーパークラスが <classname>TestCase</classname>か<classname>GroovyTestCase</classname>をextendsしている</para>
                    </listitem>
                    <listitem>
                        <para role="original">Class or a super class is annotated with <classname>@RunWith</classname></para>
                        <para>そのクラスまたはスーパークラスに <classname>@RunWith</classname>アノテーションが付いている</para>
                    </listitem>
                    <listitem>
                        <para role="original">Class or a super class contain a method annotated with <classname>@Test</classname></para>
                        <para>そのクラスまたはスーパークラスが<classname>@Test</classname>アノテーションが付いたメソッドを含んでいる</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para role="original">
                When using TestNG, we scan for methods annotated with <classname>@Test</classname>.
            </para>
            <para>
                TestNGを使っている場合は、<classname>@Test</classname>アノテーションが付いたメソッドをスキャンします。
            </para>
            <para role="original">
                Note that abstract classes are not executed. Gradle also scan up the inheritance tree into jar files
                on the test classpath.
            </para>
            <para>
                抽象クラスは実行されないことに注意してください。
                Gradleは、testクラスパス上のjarファイルに含まれる継承ツリーもスキャンします。
            </para>
            <para role="original">
                In case you don't want to use the test class detection, you can disable it by setting
                <literal>scanForTestClasses</literal> to false. This will make the test task only use the includes /
                excludes to find test classes.

                If <literal>scanForTestClasses</literal> is disabled and no include or exclude patterns are specified, the
                respective defaults are used. For include this is <literal>"**/*Tests.class", "**/*Test.class"</literal>
                and the for exclude it is <literal>"**/Abstract*.class"</literal>.
            </para>
            <para>
                上記のテストクラス検出を使いたくないときは、<literal>scanForTestClasses</literal>をfalseに設定することで、これを無効にすることができます。
                この場合、testタスクがテストクラスを探すときにはincludes / excludesだけが使われます。
                <literal>scanForTestClasses</literal>が無効になっていて、かつincludesやexcludesパターンが指定されていないときは、デフォルトとしてincludesには<literal>"**/*Tests.class", "**/*Test.class"</literal>、そしてexcludesには<literal>"**/Abstract*.class"</literal>が使われます。
            </para>
        </section>

        <section>
            <title>規約値<phrase role="original">Convention values</phrase></title>
            <table>
                <title>Javaプラグイン - テストプロパティ<phrase role="original">Java plugin - test properties</phrase></title>
                <thead>
                    <tr>
                        <td>タスクプロパティ<phrase role="original">Property name</phrase></td>
                        <td>型<phrase role="original">Type</phrase></td>
                        <td>デフォルト値<phrase role="original">Default value</phrase></td>
                    </tr>
                </thead>
                <tr>
                    <td><literal>testClassesDir</literal></td>
                    <td><classname>File</classname></td>
                    <td><literal>sourceSets.test.output.classesDir</literal></td>
                </tr>
                <tr>
                    <td><literal>classpath</literal></td>
                    <td><apilink class="org.gradle.api.file.FileCollection"/></td>
                    <td><literal>sourceSets.test.runtimeClasspath</literal></td>
                </tr>
                <tr>
                    <td><literal>testResultsDir</literal></td>
                    <td><classname>File</classname></td>
                    <td><literal>testResultsDir</literal></td>
                </tr>
                <tr>
                    <td><literal>testReportDir</literal></td>
                    <td><classname>File</classname></td>
                    <td><literal>testReportDir</literal></td>
                </tr>
                <tr>
                    <td><literal>testSrcDirs</literal></td>
                    <td><classname>List&lt;File></classname></td>
                    <td><literal>sourceSets.test.java.srcDirs</literal></td>
                </tr>
            </table>
        </section>

    </section>

    <section>
        <title>Jar<phrase role="original">Jar</phrase></title>
        <para role="original">The <literal>jar</literal> task creates a JAR file containing the class files and resources of the
            project. The JAR file is declared as an artifact in the <literal>archives</literal> dependency
            configuration. This means that the JAR is available in the classpath of a dependent project. If you upload
            your project into a repository, this JAR is declared as part of the dependency descriptor. You can learn
            more about how to work with archives in <xref linkend="sec:archives"/> and artifact configurations in
            <xref linkend="artifact_management"/>.
        </para>
        <para><literal>jar</literal>タスクは、プロジェクトのクラスファイルとリソースを含んだJARファイルを生成します。このJARファイルは<literal>archives</literal>という依存関係のコンフィギュレーションで、アーティファクトとして宣言されています。
        これは、（このプロジェクトに）依存しているプロジェクトのクラスパスでこのJARが利用可能ということです。
        プロジェクトをリポジトリにアップロードする場合、このJARは依存関係のディスクリプタの一部として宣言されます。
        アーカイブの扱いについては<xref linkend="sec:archives"/>、アーティファクトの設定については<xref linkend="artifact_management"/>で、さらに詳しく学ぶことができます。
        </para>
        <section id='sub:manifest'>
            <title>Manifest<phrase role="original">Manifest</phrase></title>
            <para role="original">Each jar or war object has a <literal>manifest</literal>
                property with a separate instance of <apilink class="org.gradle.api.java.archives.Manifest"/>.
                When the archive is generated, a corresponding <literal>MANIFEST.MF</literal> file is written into the
                archive.
            </para>
            <para>各jarやwarオブジェクトは、それぞれ<apilink class="org.gradle.api.java.archives.Manifest"/>のインスタンスである<literal>manifest</literal>プロパティを持ちます。
            アーカイブが生成されるとき、対応する<literal>MANIFEST.MF</literal>ファイルがアーカイブ内に作成されます。
            </para>
            <sample id="manifest" dir="userguide/tutorial/manifest" title="MANIFEST.MFのカスタマイズ / Customization of MANIFEST.MF">
                <sourcefile file="build.gradle" snippet="add-to-manifest"/>
            </sample>
            <para role="original">You can create stand alone instances of a <classname>Manifest</classname>. You can use that for example,
                to share manifest information between jars.
            </para>
            <para>独立した<classname>Manifest</classname>インスタンスを生成することもできます。
            これは例えば、複数のjar間でマニフェスト情報を共有する目的などに利用できます。
            </para>
            <sample id="manifest" dir="userguide/tutorial/manifest" title="manifestオブジェクトの作成 / Creating a manifest object.">
                <sourcefile file="build.gradle" snippet="custom-manifest"/>
            </sample>
            <para role="original">You can merge other manifests into any <classname>Manifest</classname>
                object. The other manifests might
                be either described by a file path or, like in the example above, by a reference to another <classname>Manifest</classname> object.
            </para>
            <para><classname>Manifest</classname>オブジェクトに他のマニフェストをマージすることもできます。
            マージ対象のマニフェストは、ファイルパス、または上の例のように別の<classname>Manifest</classname>オブジェクトの参照によって指定できます。
            </para>
            <sample id="manifest" dir="userguide/tutorial/manifest" title="特定のアーカイブ用にMANIFEST.MFを分離 / Separate MANIFEST.MF for a particular archive">
                <sourcefile file="build.gradle" snippet="merge"/>
            </sample>
            <para role="original">Manifest are merged in the order they are declared by the <literal>from</literal> statement. If
            the based manifest and the merged manifest both define values for the same key, the merged manifest wins by default.
            You can fully customize the merge behavior by adding <literal>eachEntry</literal> actions in which
                you have access to a <apilink class="org.gradle.api.java.archives.ManifestMergeDetails"/> instance for each entry
                of the resulting manifest. The merge is not immediately triggered by the from statement. It is done lazily,
                either when generating the jar, or by calling <literal>writeTo</literal> or <literal>effectiveManifest</literal></para>
            <para>マニフェストは<literal>from</literal>文で宣言された順にマージされます。
            元のマニフェストとマージするマニフェストの双方に同じキーを持つ値が定義されている場合、デフォルトではマージするマニフェストのものが有効になります。
            マージの振る舞いは、マージで生成されるマニフェストの各エントリに対する<apilink class="org.gradle.api.java.archives.ManifestMergeDetails"/>インスタンスにアクセスする、<literal>eachEntry</literal>アクションを追加することによって自在にカスタマイズ可能です。
            マージはfrom文によって即座に実行されるわけではありません。
            jarの生成時、または<literal>writeTo</literal>や <literal>effectiveManifest</literal>の呼び出し時に、遅延して実行されます。</para>
            <para role="original">You can easily write a manifest to disk.
            </para>
            <para>マニフェストをディスクに書き出すのは簡単です。
            </para>
            <sample id="manifest" dir="userguide/tutorial/manifest" title="特定のアーカイブ用にMANIFEST.MFを分離 / Separate MANIFEST.MF for a particular archive">
                <sourcefile file="build.gradle" snippet="write"/>
            </sample>
        </section>
    </section>

    <section id='sec:upload'>
        <title>アップロード<phrase role="original">Uploading</phrase></title>
        <para role="original">How to upload your archives is described in <xref linkend="artifact_management"/>.
        </para>
        <para>作成したアーカイブをアップロードする方法は、<xref linkend="artifact_management"/>で説明しています。
        </para>
    </section>
    
</chapter>
