<!--
  ~ Copyright 2010 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='gradle_wrapper' xml:lang="ja">
    <title>Gradleラッパー <phrase role="original">The Gradle Wrapper</phrase></title>
    <para role="original">
        The Gradle Wrapper (henceforth referred to as the “wrapper”) is the preferred way of starting a Gradle build. The wrapper
        is a batch script on Windows, and a shell script for other operating systems. When you start a Gradle build via the wrapper,
        Gradle will be automatically downloaded and used to run the build. 
    </para>
    <para>
        Gradleラッパー（以後ラッパーとします）は、Gradleのビルドを実行する方法として推奨されているものです。
        ラッパーは、バッチスクリプト（Windows用）とシェルスクリプト（その他のOS用）で提供されます。
        このラッパーを使ってGradleビルドを実行すると、Gradleが自動的にダウンロードされ、それを使ってビルドが実行されます。
    </para>
    <para role="original">
        The wrapper is something you <emphasis>should</emphasis> check into version control. By distributing the wrapper with your project,
        anyone can work with it without needing to install Gradle beforehand. Even better, users of the build are guaranteed to use the 
        version of Gradle that the build was designed to work with. Of course, this is also great for 
        <ulink url="http://en.wikipedia.org/wiki/Continuous_integration">continuous integration</ulink> servers (i.e. servers that regularly
        build your project) as it requires no configuration on the server.
    </para>
    <para>
        ラッパーは、バージョン管理システムにチェックインする<emphasis>べき</emphasis>です。ラッパーと一緒にプロジェクトを配布することで、前もってGradleをインストールすることなく、誰もがすぐプロジェクトで作業できるようになります。
        さらにいいことに、ラッパーを使ってもらうことで、ビルドに使用されるGradleのバージョンをプロジェクトが想定しているものに強制することができます。
        もちろん、ラッパーは<ulink url="http://ja.wikipedia.org/wiki/%E7%B6%99%E7%B6%9A%E7%9A%84%E3%82%A4%E3%83%B3%E3%83%86%E3%82%B0%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3">継続的インテグレーション</ulink>サーバーで作業するときも非常に便利です。サーバーでビルドの設定を行う必要がないからです。
    </para>
    <para role="original">
        You install the wrapper into your project by adding and configuring a <apilink class="org.gradle.api.tasks.wrapper.Wrapper"/> 
        task in your build script, and then executing it.
    </para>
    <para>ラッパーを自分のプロジェクトにインストールするには、<apilink class="org.gradle.api.tasks.wrapper.Wrapper"/>タスクをビルドスクリプトに追加、設定してから、タスクを実行します。</para>
    <sample id="wrapperSimple" dir="userguide/wrapper/simple" title="ラッパータスク / Wrapper task">
        <sourcefile file="build.gradle"/>
    </sample>
    <para role="original">
        After such an execution you find the following new or updated files in your project directory 
        (in case the default configuration of the wrapper task is used).
    </para>
    <para>
        このタスクを実行すると、(wrapperタスクのデフォルト設定が使われていれば、)プロジェクトディレクトリで以下のファイルが作成、または更新されるはずです。
    </para>
    <sample id="wrapperSimple" dir="userguide/wrapper/simple" title="ラッパーにより生成されるファイル / Wrapper generated files">
        <layout after="wrapper">
            gradlew
            gradlew.bat
            gradle/wrapper/gradle-wrapper.jar
            gradle/wrapper/gradle-wrapper.properties
        </layout>
    </sample>
    <para role="original">
        All of these files <emphasis>should</emphasis> be submitted to your version control system. This only needs to be done once. After
        these files have been added to the project, the project should then be built with the added <command>gradlew</command> command.
        The <command>gradlew</command> command can be used <emphasis>exactly</emphasis> the same way as the <command>gradle</command> command.
    </para>
    <para>
        これらのファイルは、すべてバージョン管理システムに格納する<emphasis>べき</emphasis>です。この作業は一回だけ行えば大丈夫です。これらのファイルがプロジェクトに追加されたら、以後のビルドはこの<command>gradlew</command>コマンドで行ってください。
        <command>gradlew</command>コマンドは、<command>gradle</command>コマンドと<emphasis>全く</emphasis>同じように使うことができます。
    </para>
    <para role="original">If you want to switch to a new version of Gradle you don't need to rerun the wrapper task. It is good enough
        to change the respective entry in the <literal>gradle-wrapper.properties</literal> file, but if you want to take
        advantage of new functionality in the Gradle wrapper, then you would need to regenerate the wrapper files.
    </para>
    <para>Gradleを新しいバージョンに変更する場合でも、wrapperタスクを再実行する必要はありません。
        <literal>gradle-wrapper.properties</literal> ファイルの、関係するエントリを変更するだけです。
        ただ、例えばgradle-wrapperの機能が改良された場合などは、wrapperファイルを再作成してください。
    </para>
    <section id='sec:configuration'>
        <title>設定<phrase role="original">Configuration</phrase></title>
        <para role="original">If you run Gradle with <command>gradlew</command>, the wrapper checks if a Gradle distribution for the wrapper
            is available. If so, it delegates to the <command>gradle</command>
            command of this distribution with all the arguments passed originally to the <command>gradlew</command>
            command.  If it didn't find a Gradle distribution, it will download it first.
        </para>
        <para><command>gradlew</command>を実行すると、ラッパーはまず、指定されたディストリビューションが利用できるかどうか確認します。
            利用できなければディストリビューションを新しくダウンロードし、利用可能なら<command>gradlew</command>コマンドに指定された引数を、そのディストリビューションの<command>gradle</command>コマンドにそのまま渡して実行します。
        </para>
        <para role="original">
            When you configure the <literal>Wrapper</literal> task, you can specify the Gradle version you wish to use. The <command>gradlew</command>
            command will download the appropriate distribution from the Gradle repository.
            Alternatively, you can specify the download URL of the Gradle distribution. The <command>gradlew</command> command will use this URL to download
            the distribution.
            If you specified neither a Gradle version nor download URL, the <command>gradlew</command> command will download whichever version
            of Gradle was used to generate the wrapper files.
        </para>
        <para>
            <literal>Wrapper</literal>タスクを設定する際は、使いたいGradleのバージョンを指定することができます。その場合、作成される<command>gradlew</command>コマンドはGradleリポジトリから適切なディストリビューションを選んでダウンロードします。
            または、GradleのディストリビューションをダウンロードするURLを直接指定することもできます。この場合は、<command>gradlew</command>コマンドはディストリビューションのダウンロードにそのURLを使用します。
            Gradleのバージョンもダウンロード先も指定しなかった場合は、ラッパーファイルを作成したGradleのバージョンがダウンロードするGradleのバージョンに使用されます。
        </para>
        <para>For the details on how to configure the wrapper, see the <apilink class="org.gradle.api.tasks.wrapper.Wrapper"/> class in the API documentation.
        </para>
        <para role="original">For the details on how to configure the wrapper, see <apilink class="org.gradle.api.tasks.wrapper.Wrapper"/>
        </para>
        <para>ラッパーの詳細な設定方法については<apilink class="org.gradle.api.tasks.wrapper.Wrapper"/>を参照してください。</para>
        <para role="original">If you don't want any download to happen when your project is built via <command>gradlew</command>, simply add the Gradle
            distribution zip to your version control at the location specified by your wrapper configuration.
            A relative URL is supported - you can specify a distribution file relative to the location of <literal>gradle-wrapper.properties</literal> file.
        </para>
        <para><command>gradlew</command>コマンドでプロジェクトをビルドする際、ダウンロード処理を一切走らせたくない場合は、ラッパーの設定で指定した場所にGradleのzipファイルを追加してバージョン管理システムに格納してください。
            相対パスもサポートされています。<literal>gradle-wrapper.properties</literal>からの相対パスでディストリビューションファイルを指定することができます。
        </para>
        <para role="original">If you build via the wrapper, any existing Gradle distribution installed on the machine is ignored.
        </para>
        <para>ラッパーを使ってビルドする場合、マシンにインストールされているGradleディストリビューションがあっても無視されます。</para>
    </section>
    <section id='sec:unix_file_permissions'>
        <title>Unixファイルパーミッション <phrase role="original">Unix file permissions</phrase></title>
        <para role="original">The Wrapper task adds appropriate file permissions to allow the execution of the <literal>gradlew</literal> *NIX command.
            Subversion preserves this file permission. We are not sure how other version control systems deal with this.
            What should always work is to execute “<literal>sh gradlew</literal>”.
        </para>
        <para>Wrapperタスクは、生成したgradlew *NIXコマンドを実行できるよう、適切なファイルパーミッションを追加します。
            Subversionはちゃんとこのファイルパーミッションを保存してくれますが、他のバージョン管理システムではどのように扱われるのかわかりません。
            確実を期すなら<literal>sh gradlew</literal>で実行してください。
        </para>
    </section>
</chapter>
