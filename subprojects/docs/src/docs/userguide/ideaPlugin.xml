<!--
  ~ Copyright 2010 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<chapter id="idea_plugin" xml:lang="ja">
    <title>IDEAプラグイン <phrase role="original">The IDEA Plugin</phrase></title>

    <para role="original">The IDEA plugin generates files that are used by <ulink url="http://www.jetbrains.com/idea/">IntelliJ IDEA</ulink>, thus
        making it possible to open the project from IDEA (<guimenuitem>File</guimenuitem> - <guimenuitem>Open Project</guimenuitem>).
        Both external dependencies (including associated source and javadoc files) and project dependencies are considered.</para>
    <para>
    IDEAプラグインは、<ulink url="http://www.jetbrains.com/idea/">IntelliJ IDEA</ulink>が使用するファイルを生成し、プロジェクトをIDEA(<guimenuitem>File</guimenuitem> - <guimenuitem>Open Project</guimenuitem>)で開けるようにします。
    外部依存関係(関連するソースやjavadocファイルを含む)とプロジェクト依存関係についても考慮されています。
    </para>

    <para role="original">What exactly the IDEA plugin generates depends on which other plugins are used:</para>
    <para>IDEAプラグインが実際に生成するものは、使用されているプラグインによって異なります。</para>
    <table>
        <title>IDEAプラグインの振る舞い <phrase role="original">IDEA plugin behavior</phrase></title>
        <thead>
            <tr>
                <td><phrase role="original">Plugin</phrase> プラグイン</td><td><phrase role="original">Description</phrase> 説明</td>
            </tr>
        </thead>
        <tr>
            <td><phrase role="original">None</phrase> なし</td><td><phrase role="original">Generates an IDEA module file. Also generates an IDEA project and workspace file if the project
            is the root project.</phrase> IDEAモジュールファイルを生成する。プロジェクトがルートプロジェクトだった場合は、IDEAプロジェクトとワークスペースファイルも生成する。</td>
        </tr>
        <tr>
            <td>
                <link linkend="java_plugin">Java</link>
            </td>
            <td><phrase role="original">Adds Java configuration to the module and project files.</phrase> モジュールファイルとプロジェクトファイルに、Javaの設定を追加する。</td>
        </tr>
    </table>

    <para role="original">One focus of the IDEA plugin is to be open to customization. The plugin provides a standardized set of hooks
        for adding and removing content from the generated files.
    </para>
    <para>IDEAプラグインで重視されているものの一つがカスタマイズ性です。生成するファイルに内容を追加したり削除したりするためのフックが標準化されて提供されています。</para>

    <section>
        <title><phrase role="original">Usage</phrase> 使用方法</title>
        <para role="original">To use the IDEA plugin, include this in your build script:</para>
        <para>IDEAプラグインを使うには、ビルドスクリプトに次の行を追加します。</para>
        <sample id="useIdeaPlugin" dir="idea" title="IDEAプラグインを使う / Using the IDEA plugin">
            <sourcefile file="build.gradle" snippet="use-plugin"/>
        </sample>
        <para role="original">The IDEA plugin adds a number of tasks to your project. The main tasks that you will use
            are the <literal>idea</literal> and <literal>cleanIdea</literal> tasks.
        </para>
        <para>IDEAプラグインは、プロジェクトにいくつかのタスクを追加します。主に使うものは<literal>idea</literal>タスクと<literal>cleanIdea</literal>タスクでしょう。</para>
    </section>
    <section>
        <title>タスク <phrase role="original">Tasks</phrase></title>

        <para role="original">The IDEA plugin adds the tasks shown below to a project.
            Notice that <literal>clean</literal> does not depend on <literal>cleanIdeaWorkspace</literal>.
            It's because workspace contains a lot of user specific temporary data and typically it is not desirable to manipulate it outside IDEA.
        </para>
        <para>
        IDEAプラグインはプロジェクトに以下のタスクを追加します。
        <literal>cleanIdea</literal>が<literal>cleanIdeaWorkspace</literal>に依存していないことに注意してください。
        ワークスペースにはユーザーごとの一時データが多く含まれており、一般的にはIDEAの外からは操作されたくないものだからです。
        </para>

        <table id='ideatasks'>
            <title>IDEAプラグイン - タスク <phrase role="original">IDEA plugin - Tasks</phrase></title>
            <thead>
                <tr>
                    <td><phrase role="original">Task name</phrase> タスク名</td>
                    <td><phrase role="original">Depends on</phrase> 依存先</td>
                    <td><phrase role="original">Type</phrase> 型</td>
                    <td><phrase role="original">Description</phrase> 説明</td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>idea</literal>
                </td>
                <td><literal>ideaProject</literal>, <literal>ideaModule</literal>, <literal>ideaWorkspace</literal></td>
                <td><literal>-</literal></td>
                <td><phrase role="original">Generates all IDEA configuration files</phrase> 全てのIDEA設定ファイルを生成する。</td>
            </tr>
            <tr>
                <td>
                    <literal>cleanIdea</literal>
                </td>
                <td>
                    <literal>cleanIdeaProject</literal>, <literal>cleanIdeaModule</literal>
                </td>
                <td><apilink class="org.gradle.api.tasks.Delete"/></td>
                <td><phrase role="original">Removes all IDEA configuration files</phrase> IDEAの設定ファイルを全て削除する。</td>
            </tr>
            <tr>
                <td>
                    <literal>cleanIdeaProject</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.api.tasks.Delete"/></td>
                <td><phrase role="original">Removes the IDEA project file</phrase> IDEAのプロジェクトファイルを削除する。</td>
            </tr>
            <tr>
                <td>
                    <literal>cleanIdeaModule</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.api.tasks.Delete"/></td>
                <td><phrase role="original">Removes the IDEA module file</phrase> IDEAのモジュールファイルを削除する。</td>
            </tr>
            <tr>
                <td>
                    <literal>cleanIdeaWorkspace</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.api.tasks.Delete"/></td>
                <td><phrase role="original">Removes the IDEA workspace file</phrase> IDEAのワークスペースファイルを削除する。</td>
            </tr>
            <tr>
                <td>
                    <literal>ideaProject</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.plugins.ide.idea.GenerateIdeaProject"/></td>
                <td><phrase role="original">Generates the <literal>.ipr</literal> file. This task is only added to the root project.</phrase> <literal>.ipr</literal>ファイルを生成する。このタスクはルートプロジェクトのみに追加されます。</td>
            </tr>
            <tr>
                <td>
                    <literal>ideaModule</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.plugins.ide.idea.GenerateIdeaModule"/></td>
                <td><phrase role="original">Generates the <literal>.iml</literal> file</phrase> <literal>.iml</literal>ファイルを作成する。</td>
            </tr>
            <tr>
                <td>
                    <literal>ideaWorkspace</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.plugins.ide.idea.GenerateIdeaWorkspace"/></td>
                <td><phrase role="original">Generates the <literal>.iws</literal> file. This task is only added to the root project.</phrase> <literal>.iws</literal>ファイルを生成する。このタスクはルートプロジェクトのみに追加されます。</td>
            </tr>
        </table>
    </section>

    <section>
        <title>設定 <phrase role="original">Configuration</phrase></title>

        <table id='idea-configuration'>
            <title>IDEAプラグインの設定 <phrase role="original">Configuration of the idea plugin</phrase></title>
            <thead>
                <tr>
                    <td><phrase role="original">Model</phrase> モデル</td>
                    <td><phrase role="original">Reference name</phrase> 参照名</td>
                    <td><phrase role="original">Description</phrase> 説明</td>
                </tr>
            </thead>
            <tr>
                <td>
                    <apilink class="org.gradle.plugins.ide.idea.model.IdeaModel"/>
                </td>
                <td><literal>idea</literal></td>
                <td><phrase role="original">Top level element that enables configuration of the idea plugin in a DSL-friendly fashion</phrase>
                    DSLフレンドリーな方法でIDEAプラグインの設定を行うための、最上位レベルの要素</td>
            </tr>
            <tr>
                <td>
                    <apilink class="org.gradle.plugins.ide.idea.model.IdeaProject"/>
                </td>
                <td><literal>idea.project</literal></td>
                <td><phrase role="original">Allows configuring project information</phrase>
                    プロジェクト情報の設定ができる</td>
            </tr>
            <tr>
                <td>
                    <apilink class="org.gradle.plugins.ide.idea.model.IdeaModule"/>
                </td>
                <td><literal>idea.module</literal></td>
                <td><phrase role="original">Allows configuring module information</phrase>
                    モジュールの設定ができる</td>
            </tr>
            <tr>
                <td>
                    <apilink class="org.gradle.plugins.ide.idea.model.IdeaWorkspace"/>
                </td>
                <td><literal>idea.workspace</literal></td>
                <td><phrase role="original">Allows configuring the workspace xml</phrase>
                    ワークスペースXMLの設定ができる</td>
            </tr>
        </table>
    </section>

    <section>
        <title>生成するファイルのカスタマイズ <phrase role="original">Customizing the generated files</phrase></title>
        <para role="original">IDEA plugin provides hooks and behavior for customizing the generated content.
            The workspace file can effectively only be manipulated via the <code>withXml</code> hook
            because its corresponding domain object is essentially empty.</para>
        <para>
        IDEAプラグインには、生成される内容をカスタマイズするためのフックと特徴があります。
        なお、ワークスペースファイルは、対応するドメインオブジェクトが実質的に空なので、<code>withXml</code>フックを使用しないと効果的に操作できません。
        </para>
        <para role="original">The tasks recognize existing IDEA files, and merge them with the generated content.</para>
        <para>IDEAプラグインのタスクは、既存のIDEAファイルを検知し、生成された内容をそれにマージします。</para>
        <section>
            <title>マージ <phrase role="original">Merging</phrase></title>
            <para role="original">Sections of existing IDEA files that are also the target of generated content will be amended or overwritten,
                depending on the particular section. The remaining sections will be left as-is.</para>
            <para>
            既存のIDEAファイルのセクションのうち、生成される内容の対象になっているものは、セクションごとに修正、または上書きされます。
            それ以外のセクションはそのまま残されます。
            </para>
            <section id="sec:complete-overwrite-i">
                <title>マージを無効にして、完全に上書きする <phrase role="original">Disabling merging with a complete overwrite</phrase></title>
                <para role="original">To completely overwrite existing IDEA files, execute a clean task together with its corresponding generation task,
                    for example <userinput>gradle cleanIdea idea</userinput> (in that order). If you want to make this
                    the default behavior, add <code>tasks.idea.dependsOn(cleanIdea)</code> to your build script. This makes it
                    unnecessary to execute the clean task explicitly.
                </para>
                <para>
                既存のIDEAファイルを完全に上書きするには、クリーンタスクを、対応する生成タスクと一緒に使用してください。例えば、<userinput>gradle cleanIdea idea</userinput>をこの順序で使用します。
                デフォルトでそのように動作させたいのであれば、<code>tasks.idea.dependsOn(cleanIdea)</code>というコードをビルドスクリプトに追加してください。明示的にクリーンタスクを実行する必要がなくなります。
                </para>
                <para role="original">Complete overwrite works equally well for individual files, for example by executing <userinput> gradle cleanIdeaModule ideaModule</userinput>.</para>
                <para>個々のファイルに対しても同様で、例えば<userinput> gradle cleanIdeaModule ideaModule</userinput>とすることで、完全に上書きすることができます。</para>
            </section>
        </section>
        <section>
            <title>生成ライフサイクルへフックする <phrase role="original">Hooking into the generation lifecycle</phrase></title>
            <para>The plugin provides objects modeling the sections of the metadata files
                that are generated by Gradle. The generation lifecycle is as follows:
            </para>
            <para>
            IDEAプラグインは、生成するIDEAファイルの各セクションを表すドメインクラスを提供しています。生成ライフサイクルは、次のとおりです。
            </para>
                <orderedlist>
                    <listitem>The file is read; or a default version provided by Gradle is used if it does not exist</listitem>
                    <listitem>The <code>beforeMerged</code> hook is executed with a domain object representing the existing file</listitem>
                    <listitem>The existing content is merged with the configuration inferred from the gradle build or defined explicitly in the eclipse DSL</listitem>
                    <listitem>The <code>whenMerged</code> hook is executed with a domain object representing contents of the file to be persisted</listitem>
                    <listitem>The <code>withXml</code> hook is executed with a raw representation of the xml that will be persisted</listitem>
                    <listitem>The final XML is persisted</listitem>
                </orderedlist>
            <para>
                The following table lists the domain object used for each of the model types:
            </para>
            <para>それぞれのIDEAタスクが使うドメインオブジェクトは、次の表の通りです。</para>
            <table id='idea-hooks'>
                <title>IDEAプラグインフック <phrase role="original">Idea plugin hooks</phrase></title>
                <thead>
                    <tr>
                        <td><phrase role="original">Model</phrase> モデル</td>
                        <td><literal>beforeMerged { arg -> }</literal> <phrase role="original">argument type</phrase> 引数の型</td>
                        <td><literal>whenMerged { arg -> }</literal> <phrase role="original">argument type</phrase> 引数の型</td>
                        <td><literal>withXml { arg -> }</literal> <phrase role="original">argument type</phrase> 引数の型</td>
                    </tr>
                </thead>
                <tr>
                    <td><apilink class="org.gradle.plugins.ide.idea.model.IdeaProject"/></td>
                    <td><apilink class="org.gradle.plugins.ide.idea.model.Project"/></td>
                    <td><apilink class="org.gradle.plugins.ide.idea.model.Project"/></td>
                    <td><apilink class="org.gradle.api.XmlProvider"/></td>
                </tr>
                <tr>
                    <td><apilink class="org.gradle.plugins.ide.idea.model.IdeaModule"/></td>
                    <td><apilink class="org.gradle.plugins.ide.idea.model.Module"/></td>
                    <td><apilink class="org.gradle.plugins.ide.idea.model.Module"/></td>
                    <td><apilink class="org.gradle.api.XmlProvider"/></td>
                </tr>
                <tr>
                    <td><apilink class="org.gradle.plugins.ide.idea.model.IdeaWorkspace"/></td>
                    <td><apilink class="org.gradle.plugins.ide.idea.model.Workspace"/></td>
                    <td><apilink class="org.gradle.plugins.ide.idea.model.Workspace"/></td>
                    <td><apilink class="org.gradle.api.XmlProvider"/></td>
                </tr>
            </table>
            <section id="sec:partial-overwrite">
                <title>既存の内容を部分的に上書きする <phrase role="original">Partial overwrite of existing content</phrase></title>
                <para><phrase role="original">A <link linkend="sec:complete-overwrite">complete overwrite</link> causes all existing content to be discarded,
                    thereby losing any changes made directly in the IDE. The <code>beforeMerged</code> hook makes it possible
                    to overwrite just certain parts of the existing content. The following example removes all existing dependencies
                    from the <literal>Module</literal> domain object:</phrase>
                    <link linkend="sec:complete-overwrite-i">完全な上書き</link>は、既存の内容を全て破棄するので、IDEで直接行った変更も失われてしまいます。<code>beforeMerged</code>フックを使うと、既存の内容のうち特定の部分だけを上書きすることができます。
                    次の例では、<code>Module</code>ドメインオブジェクトから、既存の依存関係を全て削除しています。
                    <sample id="partialOverwrites" dir="idea"
                            title="モジュールの部分的な上書き / Partial Overwrite for Module">
                        <sourcefile file="build.gradle" snippet="module-before-merged"/>
                    </sample>
                    <phrase role="original">
                    The resulting module file will only contain Gradle-generated dependency entries, but
                    not any other dependency entries that may have been present in the original file. (In the case of dependency entries,
                    this is also the default behavior.) Other sections of the module file will be either left as-is or merged.
                    The same could be done for the module paths in the project file:
                    </phrase>
                    結果として生成されるモジュールファイルには、Gradleが生成した依存関係のエントリのみが含まれており、元のファイルにあった他のエントリは含まれていません(依存関係エントリの場合、これがデフォルトの動作でもあります)。
                    そして、モジュールファイルの別のセクションはそのまま、またはマージされた状態で残されます。
                    同じことはプロジェクトファイルのモジュールパスを使用しても実現可能です。
                    <sample id="partialOverwritesProject" dir="idea"
                            title="プロジェクトの部分的な上書き / Partial Overwrite for Project">
                        <sourcefile file="build.gradle" snippet="project-before-merged"/>
                    </sample>
                </para>
            </section>
            <section>
                <title>読み込まれた全ドメインオブジェクトを編集する <phrase role="original">Modifying the fully populated domain objects</phrase></title>
                <para><phrase role="original">The <code>whenMerged</code> hook allows to manipulate the fully populated domain objects. Often this is the
                    preferred way to customize IDEA files. Here is how you would export all the dependencies of an IDEA module:</phrase>
                <code>whenMerged</code>フックを使うと、読み込まれた全てのドメインオブジェクトを操作できます。
                IDEAファイルをカスタマイズするときは、多くの場合このフックを使うのが好ましい方法です。例えば、IDEAモジュールの全ての依存関係をエクスポートするには、以下のようにします。
                    <sample id="exportDependencies" dir="idea"
                            title="Export Dependencies">
                        <sourcefile file="build.gradle" snippet="module-when-merged"/>
                    </sample>
                    
                </para>
            </section>
            <section>
                <title>XMLデータを編集する <phrase role="original">Modifying the XML representation</phrase></title>
                <para><phrase role="original">The <code>withXml</code>hook allows to manipulate the in-memory XML representation just before the file gets written to disk.
                    Although Groovy's XML support makes up for a lot, this approach is less convenient than manipulating the domain objects.
                    In return, you get total control over the generated file, including sections not modeled by the domain objects.</phrase>
                    <code>withXml</code>フックを使うと、メモリ内のXMLデータを、ファイルに書き出される直前に操作できます。
                    GroovyのXMLサポートで大幅にフォローされるものの、このアプローチはドメインオブジェクトを操作する方法ほど便利ではありません。
                    その代わり、ドメインオブジェクトで表現されないような部分も含め、生成されるファイルの全てを制御することができます。
                    <sample id="projectWithXml" dir="idea"
                            title="XMLをカスタマイズする / Customizing the XML">
                        <sourcefile file="build.gradle" snippet="project-with-xml"/>
                        <test args="idea"/>
                    </sample>
                </para>
            </section>
        </section>
    </section>
    <section>
        <title>その他の注意事項 <phrase role="original">Further things to consider</phrase></title>
        <para role="original">The paths of the dependencies in the generated IDEA files are absolute. If you manually define a path variable
            pointing to the Gradle dependency cache, IDEA will automatically replace the absolute dependency paths with
            this path variable. If you use such a path variable, you need to configure this path variable via <literal>idea.pathVariables</literal>,
            so that it can do a proper merge without creating duplicates.</para>
        <para>
        生成されるIDEAファイルでは、依存関係が絶対パスで保存されます。
        しかし、Gradleキャッシュを場所を参照するパス変数を定義すれば、IDEAは依存関係の絶対パスをそのパス変数で自動的に置き換えます。
        そのようなパス変数を使いたい場合は、<literal>idea.pathVariables</literal>を使って変数を設定してください。それにより、重複なしで正しくマージを行うこともできます。
        </para>
    </section>
</chapter>
