<!--
  ~ Copyright 2010 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<chapter id="eclipse_plugin" xml:lang="ja">
    <title>Eclipse プラグイン<phrase role="original">The Eclipse Plugin</phrase></title>
    
    <para role="original">The Eclipse plugin generates files that are used by the <ulink url="http://eclipse.org">Eclipse IDE</ulink>, thus
        making it possible to import the project into Eclipse (<guimenuitem>File</guimenuitem> - <guimenuitem>Import...</guimenuitem> - <guimenuitem>Existing Projects into Workspace</guimenuitem>).
        Both external dependencies (including associated source and javadoc files) and project dependencies are considered.</para>
    <para>Eclipse プラグインは <ulink url="http://eclipse.org">Eclipse IDE</ulink> が利用するファイルを生成し、
        (<guimenuitem>ファイル</guimenuitem> - <guimenuitem>インポート...</guimenuitem> - <guimenuitem>既存プロジェクトをワークスペースへ</guimenuitem> で)
        Eclipse 内にプロジェクトをインポートできるようにします。
        外部依存関係 (ソースと Javadoc も含む) とプロジェクト依存関係の両方が考慮されます。</para>

    <para role="original">Since 1.0-milestone-4 WTP-generating code was refactored into a separate plugin called <literal>eclipse-wtp</literal>.
        So if you are interested in WTP integration then only apply the <literal>eclipse-wtp</literal> plugin. Otherwise applying <literal>eclipse</literal> plugin is enough.
        This change was requested by Eclipse users who take advantage of <literal>war</literal> or <literal>ear</literal> plugin
        but they don't use Eclipse WTP. Internally, <literal>eclipse-wtp</literal> also applies the <literal>eclipse</literal> plugin so you don't need to apply both of those plugins.
    </para>
    <para>1.0-milestone-4 以降、WTP生成コードはリファクタリングされ、<literal>eclipse-wtp</literal> プラグインに分離されました。
        もしWTP が必要であれば、<literal>eclipse-wtp</literal> プラグインを適用するだけです。必要でなければ、<literal>eclipse</literal> プラグインを適用するだけでよいです。
        この変更は WTP を利用せずに <literal>war</literal> プラグインや <literal>ear</literal> プラグインだけを利用するという Eclipse ユーザの要望によるものです。
        <literal>eclipse-wtp</literal> プラグインは 内部的に <literal>eclipse</literal> プラグインも適用するので 両方を適用する必要はありません。
    </para>


    <para role="original">What exactly the Eclipse plugin generates depends on which other plugins are used:</para>
    <para>Eclipse プラグインが何を生成するかは どのプラグインと一緒に利用するかで決まります。</para>
    <table>
        <title>Eclipse プラグインの振舞い<phrase role="original">Eclipse plugin behavior</phrase></title>
        <thead>
            <tr><td>プラグイン<phrase role="original">Plugin</phrase></td><td>説明<phrase role="original">Description</phrase></td></tr>
        </thead>
        <tr>
            <td>なし<phrase role="original">None</phrase></td><td>最小構成の .project ファイルを生成します。
            <phrase role="original">Generates minimal <filename>.project</filename> file.</phrase></td>
        </tr>
        <tr>
            <td><link linkend="java_plugin">Java</link></td><td>Java の構成を <filename>.project</filename> ファイルに追加します。
            <filename>.classpath</filename> ファイルと JDT 設定ファイルを生成します。
            <phrase role="original">Adds Java configuration to <filename>.project</filename>.
            Generates <filename>.classpath</filename> and JDT settings file.</phrase></td>
        </tr>
        <tr>
            <td><link linkend="groovy_plugin">Groovy</link></td><td>Groovy の構成を<filename>.project</filename> ファイルに追加します。
            <phrase role="original">Adds Groovy configuration to <filename>.project</filename> file.</phrase></td>
        </tr>
        <tr>
            <td><link linkend="scala_plugin">Scala</link></td><td>Adds Scala support to <filename>.project</filename> and <filename>.classpath</filename> files.</td>
        </tr>
        <tr>
            <td><link linkend="war_plugin">War</link></td><td>WEBアプリケーションのサポートを<filename>.project</filename>ファイルと<filename>.classpath</filename>ファイルに追加します。
            <literal>eclipse-wtp</literal> プラグインを適用している場合のみ WTP 設定ファイルを生成します。
            <phrase role="original">Adds web application support to <filename>.project</filename> file.
            Generates WTP settings files only if <literal>eclipse-wtp</literal> plugin was applied.</phrase></td>
        </tr>
        <tr>
            <td><link linkend="ear_plugin">Ear</link></td><td>
            EAR アプリケーションのサポートを <filename>.project</filename> ファイルに追加します。
            <literal>eclipse-wtp</literal> プラグインを適用している場合のみ WTP 設定ファイルを生成します。
            <phrase role="original">Adds ear application support to <filename>.project</filename> file.
            Generates WTP settings files only if <literal>eclipse-wtp</literal> plugin was applied.</phrase></td>
        </tr>
    </table>

    <para role="original">The Eclipse plugin is open to customization and provides a standardized set of hooks
        for adding and removing content from the generated files.
    </para>
    <para>Eclipseプラグインは、カスタマイズが容易なように作られています。
        生成されたファイルに内容を追加したり削除したりするための、標準化されたフックが用意されています。
    </para>

    <section>
        <title>使用方法<phrase role="original">Usage</phrase></title>
        <para role="original">To use the Eclipse plugin, include this in your build script:</para>
        <para>Eclipseプラグインを使う為には、ビルドスクリプトに下記を含めます：</para>
        <sample id="useEclipsePlugin" dir="eclipse" title="Eclipseプラグインの使用方法 / Using the Eclipse plugin">
            <sourcefile file="build.gradle" snippet="use-plugin"/>
        </sample>
        <para role="original">The Eclipse plugin adds a number of tasks to your projects. The main tasks that you will use
            are the <literal>eclipse</literal> and <literal>cleanEclipse</literal> tasks.
        </para>
        <para>Eclipseプラグインは多くのタスクをプロジェクトに追加しますが、主に利用するのは <literal>eclipse</literal> と <literal>cleanEclipse</literal>
            タスクだけです。
        </para>
    </section>
    <section>
        <title>タスク<phrase role="original">Tasks</phrase></title>

        <para role="original">The Eclipse plugin adds the tasks shown below to a project.</para>
        <para>Eclipseプラグインはプロジェクトに以下のタスクを追加します。</para>

        <table id='eclipsetasks'>
            <title>Eclipse プラグイン - タスク<phrase role="original">Eclipse plugin - tasks</phrase></title>
            <thead>
                <tr>
                    <td>タスク名<phrase role="original">Task name</phrase></td>
                    <td>依存先<phrase role="original">Depends on</phrase></td>
                    <td>型<phrase role="original">Type</phrase></td>
                    <td>説明<phrase role="original">Description</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <literal>eclipse</literal>
                </td>
                <td><literal>eclipseProject</literal>, <literal>eclipseClasspath</literal>, <literal>eclipseJdt</literal>,
                    <literal>eclipseWtpComponent</literal>, <literal>cleanEclipseWtpFacet</literal></td>
                <td><apilink class="org.gradle.api.Task"/></td>
                <td>Eclipseの全ての設定ファイルを生成します。
                    <phrase role="original">Generates all Eclipse configuration files</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>cleanEclipse</literal>
                </td>
                <td>
                    <literal>cleanEclipseProject</literal>, <literal>cleanEclipseClasspath</literal>, <literal>cleanEclipseJdt</literal>,
                    <literal>cleanEclipseWtpComponent</literal>, <literal>cleanEclipseWtpFacet</literal>
                </td>
                <td><apilink class="org.gradle.api.tasks.Delete"/></td>
                <td>Eclipseの全ての設定ファイルを削除します。
                    <phrase role="original">Removes all Eclipse configuration files</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>cleanEclipseProject</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.api.tasks.Delete"/></td>
                <td><filename>.project</filename>ファイルを生成します。
                    <phrase role="original">Generates the <filename>.project</filename> file.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>cleanEclipseClasspath</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.api.tasks.Delete"/></td>
                <td><filename>.classpath</filename>ファイルを生成します。
                    <phrase role="original">Generates the <filename>.classpath</filename> file.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>cleanEclipseJdt</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.api.tasks.Delete"/></td>
                <td><filename>.settings/org.eclipse.jdt.core.prefs</filename>ファイルを削除します。
                    <phrase role="original">Removes the <filename>.settings/org.eclipse.jdt.core.prefs</filename> file.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>cleanEclipseWtpComponent</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.api.tasks.Delete"/></td>
                <td><filename>.settings/org.eclipse.wst.common.component</filename>ファイルを削除します。
                    <phrase role="original">Removes the <filename>.settings/org.eclipse.wst.common.component</filename> file.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>cleanEclipseWtpFacet</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td>
                    <apilink class="org.gradle.api.tasks.Delete"/>
                </td>
                <td><filename>.settings/org.eclipse.wst.common.component</filename>ファイルを削除します。
                    <phrase role="original">Removes the <filename>.settings/org.eclipse.wst.common.component</filename> file.</phrase>
                </td>
            </tr>
            <tr>
                <td>
                    <literal>eclipseProject</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.plugins.ide.eclipse.GenerateEclipseProject"/></td>
                <td><filename>.project</filename>ファイルを生成します。
                    <phrase role="original">Generates the <filename>.project</filename> file.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>eclipseClasspath</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.plugins.ide.eclipse.GenerateEclipseClasspath"/></td>
                <td><filename>.classpath</filename>ファイルを生成します。 
                    <phrase role="original">Generates the <filename>.classpath</filename> file.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>eclipseJdt</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.plugins.ide.eclipse.GenerateEclipseJdt"/></td>
                <td><filename>.settings/org.eclipse.jdt.core.prefs</filename>ファイルを生成します。
                    <phrase role="original">Generates the <filename>.settings/org.eclipse.jdt.core.prefs</filename> file.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>eclipseWtpComponent</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td><apilink class="org.gradle.plugins.ide.eclipse.GenerateEclipseWtpComponent"/></td>
                <td><literal>eclipse-wtp</literal>が適用されている場合のみ <filename>.settings/org.eclipse.wst.common.component</filename>ファイルを生成します。
                    <phrase role="original">Generates the <filename>.settings/org.eclipse.wst.common.component</filename> file only if <literal>eclipse-wtp</literal> plugin was applied.</phrase></td>
            </tr>
            <tr>
                <td>
                    <literal>eclipseWtpFacet</literal>
                </td>
                <td>
                    <literal>-</literal>
                </td>
                <td>
                    <apilink class="org.gradle.plugins.ide.eclipse.GenerateEclipseWtpFacet"/>
                </td>
                <td><literal>eclipse-wtp</literal>が適用されている場合のみ <filename>.settings/org.eclipse.wst.common.project.facet.core.xml</filename>ファイルを生成します。
                    <phrase role="original">Generates the <filename>.settings/org.eclipse.wst.common.project.facet.core.xml</filename> file only if <literal>eclipse-wtp</literal> plugin was applied.</phrase></td>
            </tr>
        </table>
    </section>
    <section>
        <title>設定<phrase role="original">Configuration</phrase></title>

        <table id='eclipse-configuration'>
            <title>Eclipseプラグインの設定 <phrase role="original">Configuration of the Eclipse plugin</phrase></title>
            <thead>
                <tr>
                    <td>モデル<phrase role="original">Model</phrase></td>
                    <td>参照名<phrase role="original">Reference name</phrase></td>
                    <td>説明<phrase role="original">Description</phrase></td>
                </tr>
            </thead>
            <tr>
                <td>
                    <apilink class="org.gradle.plugins.ide.eclipse.model.EclipseModel"/>
                </td>
                <td><literal>eclipse</literal></td>
                <td>DSLにあったやり方でEclipseプラグインの設定が可能なトップレベル要素 
                    <phrase role="original">Top level element that enables configuration of the Eclipse plugin in a DSL-friendly fashion</phrase></td>
            </tr>
            <tr>
                <td>
                    <apilink class="org.gradle.plugins.ide.eclipse.model.EclipseProject"/>
                </td>
                <td><literal>eclipse.project</literal></td>
                <td>プロジェクトの情報を設定できます。
                    <phrase role="original">Allows configuring project information</phrase></td>
            </tr>
            <tr>
                <td>
                    <apilink class="org.gradle.plugins.ide.eclipse.model.EclipseClasspath"/>
                </td>
                <td><literal>eclipse.classpath</literal></td>
                <td>クラスパスの情報を設定できます。
                    <phrase role="origainal">Allows configuring classpath information</phrase></td>
            </tr>
            <tr>
                <td>
                    <apilink class="org.gradle.plugins.ide.eclipse.model.EclipseJdt"/>
                </td>
                <td><literal>eclipse.jdt</literal></td>
                <td>JDT の情報を設定できます。(source/target java互換)
                    <phrase role="original">Allows configuring jdt information (source/target java compatibility)</phrase></td>
            </tr>
            <tr>
                <td>
                    <apilink class="org.gradle.plugins.ide.eclipse.model.EclipseWtpComponent"/>
                </td>
                <td><literal>eclipse.wtp.component</literal></td>
                <td><literal>eclipse-wtp</literal>プラグインを適用した場合のみ、WTPコンポーネントの情報を設定できます。
                    <phrase role="original">Allows configuring wtp component information only if <literal>eclipse-wtp</literal> plugin was applied.</phrase></td>
            </tr>
            <tr>
                <td>
                    <apilink class="org.gradle.plugins.ide.eclipse.model.EclipseWtpFacet"/>
                </td>
                <td><literal>eclipse.wtp.facet</literal></td>
                <td><literal>eclipse-wtp</literal>プラグインを適用した場合のみ、WTPファセットの情報を設定できます。
                    <phrase role="original">Allows configuring wtp facet information only if <literal>eclipse-wtp</literal> plugin was applied.</phrase></td>
            </tr>
        </table>
    </section>
    <section>
        <title>生成されたファイルをカスタマイズする<phrase role="original">Customizing the generated files</phrase></title>
        <para role="original">
            The Eclipse plugin allows you to customise the generated metadata files. The plugin provides a DSL for configuring model objects
            that model the Eclipse view of the project. These model objects are then merged with the existing Eclipse XML metadata to ultimately
            generate new metadata. The model objects provide lower level hooks for working with domain objects representing the file content 
            before and after merging with the model configuration. They also provide a very low level hook for working directly with the raw 
            XML for adjustment before it is persisted, for fine tuning and configuration that the Eclipse plugin does not model.
        </para>
        <para>Eclipseプラグインは、生成されるメタデータファイルをカスタマイズできるようになっています。
            このプラグインでは、DSLを使ってモデルオブジェクトの設定を行うことができます。このモデルオブジェクトは、Eclipseのプロジェクトを表すものです。
            DSLで設定したEclipseのモデルオブジェクトは、既存のXMLメタデータとマージされ、最終的な新しいメタデータが生成されます。
            メタデータの内容は、ドメインオブジェクトという形で表現されます。マージ前後にそのドメインオブジェクトを操作する、低レベルなフックも用意されています。
            また、さらに低レベルなフックも用意されており、メタデータをファイルに保存する前に、生のXMLデータを直接取り扱うこともできます。
            そのフックを使えば、プラグインがモデル化していない設定要素を微調整したり編集したりすることも可能です。
        </para>
        <section>
            <title>マージする<phrase role="original">Merging</phrase></title>
            <para role="original">Sections of existing Eclipse files that are also the target of generated content will be amended or overwritten,
                 depending on the particular section. The remaining sections will be left as-is.</para>
            <para>既存のEclipseファイルの、対象のセクションだけを生成された内容で変更、もしくは上書きし、それ以外はそのまま残します。</para>
            <section id="sec:complete-overwrite">
                <title>マージせずに完全に上書きする<phrase role="original">Disabling merging with a complete overwrite</phrase></title>
                <para role="original">To completely overwrite existing Eclipse files, execute a clean task together with its corresponding generation task,
                    for example <userinput>gradle cleanEclipse eclipse</userinput> (in that order). If you want to make this
                    the default behavior, add <code>tasks.eclipse.dependsOn(cleanEclipse)</code> to your build script. This makes it
                    unnecessary to execute the clean task explicitly.
                </para>
                <para>既存の Eclipse ファイルを完全に上書きしたい場合は、対応する生成タスクと一緒に clean タスクも実行します。
                    例えば <userinput>gradle cleanEclipse eclipse</userinput> のように... (もちろん この順番で...)
                    もし、この動きをデフォルトにしたい場合は、ビルドスクリプトに <code>eclipse.dependsOn(cleanEclipse)</code> を追加します。
                    そうすれば 明示的に clean タスクを実行する必要はありません。
                </para>
                <para role="original">Complete overwrite works equally well for individual files, for example by executing <userinput> gradle cleanEclipseClasspath eclipseClasspath</userinput>.
                </para>
                <para>個々のファイルについても同じように完全に上書きすることができます。例えば、<userinput> gradle cleanEclipseClasspath eclipseClasspath</userinput> のように...
                </para>
            </section>
        </section>
        <section>
            <title>生成ライフサイクルにフックする<phrase role="original">Hooking into the generation lifecycle</phrase></title>
            <para><phrase role="original">The Eclipse plugin provides objects modeling the sections of the Eclipse files
                that are generated by Gradle. The generation lifecycle is as follows:</phrase>
                Eclipse プラグインは Gradle が生成する Eclipse ファイルのセクションをモデリングしたドメインクラスを提供します。
                生成ライフサイクルは次の通りです。
                <orderedlist>
                    <listitem><phrase role="original">The file is read; or a default version provided by Gradle is used if it does not exist</phrase>
                        ファイルが読み込まれる。ファイルが存在しない場合は、Gradleがデフォルトの内容を用意する。</listitem>
                    <listitem><phrase role="original">The <code>beforeMerged</code> hook is executed with a domain object representing the existing file</phrase>
                        <code>beforeMerged</code>フックが実行され、既存の設定内容を表すドメインオブジェクトがフックに引き渡される。</listitem>
                    <listitem><phrase role="original">The existing content is merged with the configuration inferred from the Gradle build or defined explicitly in the eclipse DSL</phrase>
                        Gradleのビルド内容から推測される、またはEclipse DSLで明示された設定内容と、既存の設定内容がマージされる。</listitem>
                    <listitem><phrase role="original">The <code>whenMerged</code> hook is executed with a domain object representing contents of the file to be persisted</phrase>
                        <code>whenMerged</code>フックが実行され、保存される予定の設定内容を表すドメインオブジェクトがフックに引き渡される。</listitem>
                    <listitem><phrase role="original">The <code>withXml</code> hook is executed with a raw representation of the XML that will be persisted</phrase>
                        <code>withXml</code>フックが実行され、保存される予定の生XMLがフックに引き渡される。</listitem>
                    <listitem><phrase role="original">The final XML is persisted</phrase>
                        最終的なXMLが保存される。</listitem>
                </orderedlist>
                <phrase role="original">The following table lists the domain object used for each of the Eclipse model types:</phrase>
                以下は Eclipseモデルの型毎の利用ドメインオブジェクトの一覧表です。
            </para>
            <table id='eclipse-plugin-hooks'>
                <title>高度な構成フック<phrase role="original">Advanced configuration hooks</phrase></title>
                <thead>
                    <tr>
                        <td>モデル<phrase role="original">Model</phrase></td>
                        <td><literal>beforeMerged { arg -> }</literal> 引数型<phrase role="original">argument type</phrase></td>
                        <td><literal>whenMerged { arg -> }</literal> 引数型<phrase role="original">argument type</phrase></td>
                        <td><literal>withXml { arg -> }</literal> 引数型<phrase role="original">argument type</phrase></td>
                    </tr>
                </thead>
                <tr>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.EclipseProject"/></td>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.Project"/></td>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.Project"/></td>
                    <td><apilink class="org.gradle.api.XmlProvider"/></td>
                </tr>
                <tr>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.EclipseClasspath"/></td>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.Classpath"/></td>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.Classpath"/></td>
                    <td><apilink class="org.gradle.api.XmlProvider"/></td>
                </tr>
                <tr>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.EclipseJdt"/></td>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.Jdt"/></td>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.Jdt"/></td>
                    <td/>
                </tr>
                <tr>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.EclipseWtpComponent"/></td>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.WtpComponent"/></td>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.WtpComponent"/></td>
                    <td><apilink class="org.gradle.api.XmlProvider"/></td>
                </tr>
                <tr>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.EclipseWtpFacet"/></td>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.WtpFacet"/></td>
                    <td><apilink class="org.gradle.plugins.ide.eclipse.model.WtpFacet"/></td>
                    <td><apilink class="org.gradle.api.XmlProvider"/></td>
                </tr>
            </table>
            <section id="sec:partial-overwrite">
                <title>既存の内容の一部を上書きする <phrase role="original">Partial overwrite of existing content</phrase></title>
                <para><phrase role="original">A <link linkend="sec:complete-overwrite">complete overwrite</link> causes all existing content to be discarded,
                    thereby losing any changes made directly in the IDE. Alternatively, the <code>beforeMerged</code> hook makes it possible
                    to overwrite just certain parts of the existing content. The following example removes all existing dependencies
                    from the <literal>Classpath</literal> domain object:</phrase>
                    <link linkend="sec:complete-overwrite">完全に上書き</link>してしまうと 既存の内容を全て破棄してしまいます。
                    それにより IDE で直接変更した内容が消されてしまいます。<code>beforeMerged</code> フックを使えば 既存の内容の一部だけを上書きすることができます。
                    次の例は 存在する全ての依存関係を <literal>classpath</literal> ドメインオブジェクトから削除します。
                    <sample id="partialOverwrites" dir="eclipse"
                            title="classpath の一部を上書き / Partial Overwrite for Classpath">
                        <sourcefile file="build.gradle" snippet="module-before-merged"/>
                    </sample>
                    <phrase role="original">
                    The resulting <literal>.classpath</literal> file will only contain Gradle-generated dependency entries, but
                    not any other dependency entries that may have been present in the original file. (In the case of dependency entries,
                    this is also the default behavior.) Other sections of the <literal>.classpath</literal> file will be either left as-is or merged.
                    The same could be done for the natures in the <literal>.project</literal> file:
                    </phrase>
                    この例で生成された <literal>.classpath</literal> ファイルには Gradleによって生成された依存関係のエントリしか含みません。
                    元のファイルにあった他の依存関係のエントリは全く含みません。(依存関係のエントリの場合はこれがデフォルトの振る舞いです。)
                    <literal>.classpath</literal>ファイルの他のセクションは そのまま残るかマージされるでしょう。
                    <literal>.project</literal> ファイルの ネーチャーでも同様です。
                    <sample id="partialOverwritesProject" dir="eclipse"
                            title="project の一部を上書き / Partial Overwrite for Project">
                        <sourcefile file="build.gradle" snippet="project-before-merged"/>
                    </sample>
                </para>
            </section>
            <section>
                <title>完全に populate されたドメインオブジェクトを変更する<phrase role="original">Modifying the fully populated domain objects</phrase></title>
                <para role="original">The <code>whenMerged</code> hook allows to manipulate the fully populated domain objects. Often this is the
                    preferred way to customize Eclipse files. Here is how you would export all the dependencies of an Eclipse project:
                    <sample id="exportDependencies" dir="eclipse"
                            title="依存関係のエクスポート / Export Dependencies">
                        <sourcefile file="build.gradle" snippet="module-when-merged"/>
                    </sample>
                </para>
                <para><code>whenMerged</code>フックは完全にデータが設定されたドメインオブジェクトを操作することができます。
                    これは Eclipse のファイルをカスタマイズするのにはよい方法です。
                    以下は Eclipse プロジェクトの全ての依存関係をエクスポートする方法です:
                    <sample id="exportDependencies" dir="eclipse"
                            title="依存関係のエクスポート / Export Dependencies">
                        <sourcefile file="build.gradle" snippet="module-when-merged"/>
                    </sample>
                </para>
            </section>
            <section>
                <title>XML表現を変更する<phrase role="original">Modifying the XML representation</phrase></title>
                <para role="original">The <code>withXml</code>hook allows to manipulate the in-memory XML representation just before the file gets written to disk.
                    Although Groovy's XML support makes up for a lot, this approach is less convenient than manipulating the domain objects.
                    In return, you get total control over the generated file, including sections not modeled by the domain objects.
                    <sample id="wtpWithXml" dir="eclipse"
                            title="XML のカスタマイズ / Customizing the XML">
                        <sourcefile file="build.gradle" snippet="wtp-with-xml"/>
                        <test args="cleanEclipse eclipse"/>
                    </sample>
                </para>
                <para><code>withXml</code>フックはディスクに書き出される直前のメモリ内の XML 表現を操作することができます。
                    ただ、Groovy の XML サポートがいろいろと補ってくれたとしても、このアプローチはドメインオブジェクトを操作するほど便利ではありません。
                    その代わりに、生成されたファイルを通して全ての操作が可能です。もちろん、ドメインオブジェクトにモデル化されなかったセクションも含みます。
                    <sample id="wtpWithXml" dir="eclipse"
                            title="XML のカスタマイズCustomizing the XML">
                        <sourcefile file="build.gradle" snippet="wtp-with-xml"/>
                        <test args="cleanEclipse eclipse"/>
                    </sample>
                </para>
            </section>
        </section>
    </section>
</chapter>
