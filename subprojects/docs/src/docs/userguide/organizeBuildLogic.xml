<!--
  ~ Copyright 2009 the original author or authors.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~      http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter id='organizing_build_logic' xmlns:xi="http://www.w3.org/2001/XInclude" xml:lang="ja">
    <title>ビルドロジックの体系化<phrase role="original">Organizing Build Logic</phrase></title>
    <para role="original">Gradle offers a variety of ways to organize your build logic. First of all you can put your build logic
        directly in the action closure of a task. If a couple of tasks share the same logic you can extract this logic
        into a method. If multiple projects of a multi-project build share some logic you can define this method in the
        parent project. If the build logic gets too complex for being properly modeled by methods you want have an OO
        Model.
        <footnote>
            <para role="original">Which might range from a single class to something very complex.
            </para>
        </footnote>
        Gradle makes this very easy. Just drop your classes in a certain directory and Gradle automatically compiles them
        and puts them in the classpath of your build script.
    </para>
    <para>Gradleでは、様々な方法でビルドロジックを体系化できます。最初は、すべてのビルドロジックがタスクのクロージャに置かれているかもしれません。しかし、いくつかのタスクでロジックを共有したい場合はそのロジックをメソッドに切り出すことができます。マルチプロジェクトの場合、親プロジェクトでメソッドを定義すれば、サブプロジェクトでそのメソッドを共有できます。そうしてメソッドを切り出していけば、だんだんとビルドロジックが複雑になっていく場合もあるでしょう。そのときはオブジェクト指向のモデルを取り入れるのはどうでしょうか。
        <footnote>
            <para>一つの単純なクラスから、複雑なクラスまで</para>
        </footnote>
        Gradleでは、決まったディレクトリにクラスを放り込んでおけば自動的にコンパイルしてクラスパスに追加してくれるので、そういったモデルもとても簡単に実現できます。</para>
    <para role="original">Here is a summary of the ways you can organise your build logic:</para>
    <para>ビルドロジックを体系化する方法について、いくつか例を挙げます。</para>
    <itemizedlist>
        <listitem>
            <para role="original">POGOs. You can declare and use plain old Groovy objects (POGOs) directly in your build script. The
                build script is written in Groovy, after all, and Groovy provides you with lots of excellent ways to
                organize code.
            </para>
            <para>POGOs。plain old Groovy Objects (POGOs) をビルドスクリプト内で直接宣言して使用できます。結局のところビルドスクリプトはGroovyで書くわけですから、Groovyで使えるいろんな方法でビルドロジックを体系化できるのです。</para>
        </listitem>
        <listitem>
            <para role="original"><link linkend="sec:inherited_properties_and_methods">Inherited properties and methods</link>. In a
                multi-project build, sub-projects inherit the properties and methods of their parent project.</para>
            <para><link linkend="sec:inherited_properties_and_methods">プロパティとメソッドの継承</link>。マルチプロジェクトでは、すべてのサブプロジェクトが親プロジェクトからプロパティとメソッドを継承します。</para>
        </listitem>
        <listitem>
            <para role="original"><link linkend="sec:injected_configuration">Configuration injection</link>. In a
                multi-project build, a project (usually the root project) can inject properties and methods into another
                project.</para>
            <para><link linkend="sec:injected_configuration">設定のインジェクション</link>。マルチプロジェクトでは、あるプロジェクト(普通ルートプロジェクトですが)が別のプロジェクトにプロパティとメソッドを注入できます。</para>
        </listitem>
        <listitem>
            <para role="original"><link linkend="sec:build_sources"><filename>buildSrc</filename> project</link>. Drop the source for
                your build classes into a certain directory and Gradle automatically compiles them and includes them
                in the classpath of your build script.
            </para>
            <para><link linkend="sec:build_sources"><filename>buildSrc</filename>プロジェクト</link>。ビルドスクリプトで使いたいクラスのソースを決まったディレクトリに入れておけば、Gradleは自動的にそのクラスをコンパイルしてクラスパスに追加します。</para>
        </listitem>
        <listitem>
            <para role="original"><link linkend="sec:configuring_using_external_script">Shared scripts</link>. Define common configuration
                in an external build, and apply the script to multiple projects, possibly across different builds.
            </para>
            <para><link linkend="sec:configuring_using_external_script">共有スクリプト</link>。外部のスクリプトファイルに共通で使う設定を定義して、それをいろいろなプロジェクトのビルドスクリプトでプロジェクトに適用できます。別々のビルドに含まれているプロジェクトの間でも共有可能です。</para>
        </listitem>
        <listitem>
            <para role="original"><link linkend="custom_tasks">Custom tasks</link>. Put your build logic into a custom task, and
                reuse that task in multiple places.</para>
            <para><link linkend="custom_tasks">カスタムタスク</link>。ビルドロジックをカスタムタスクにすれば、いろんな場所でそのロジックを再利用できます。</para>
        </listitem>
        <listitem>
            <para role="original"><link linkend="custom_plugins">Custom plugins</link>. Put your build logic into a custom plugin,
                and apply that plugin to multiple projects. The plugin must be in the classpath of your build script.
                You can achieve this either by using <link linkend="sec:build_sources"><filename>build sources</filename></link> or
                by adding an <link linkend="sec:external_dependencies">external library</link> that contains the plugin. 
            </para>
            <para><link linkend="custom_plugins">カスタムプラグイン</link>。ビルドロジックをカスタムプラグインにすれば、いろんなプロジェクトでそのプラグインを適用することができます。プラグインはビルドスクリプトのクラスパスに追加しなければなりませんが、<link linkend="sec:build_sources">buildSrcプロジェクト</link>や<link linkend="sec:external_dependencies">外部ライブラリ</link>にそのプラグインを含めれば簡単に追加できます。</para>
        </listitem>
        <listitem>
            <para role="original"><link linkend="sec:external_build">Execute an external build</link>. Execute another Gradle build from the
                current build.</para>
            <para><link linkend="sec:external_build">外部ビルドの実行</link>。現在のビルドから、外部の別のビルドを呼び出すことができます。</para>
        </listitem>
        <listitem>
            <para role="original"><link linkend="sec:external_dependencies">External libraries</link>. Use external libraries directly
                in your build file.
            </para>
            <para><link linkend="sec:external_dependencies">外部ライブラリ</link>。外部のライブラリを直接ビルドで使うことができます。</para>
        </listitem>
    </itemizedlist>

    <section id="sec:inherited_properties_and_methods">
        <title>プロパティとメソッドの継承<phrase role="original">Inherited properties and methods</phrase></title>
        <para role="original">Any method or property defined in a project build script is also visible to all the sub-projects. You
            can use this to define common configurations, and to extract build logic into methods which can be reused
            by the sub-projects.
        </para>
        <para>プロジェクト内で定義されたプロパティとメソッドは、そのプロジェクトのサブプロジェクトでもすべて使用できます。これを使って共通設定を定義したり、よく使うビルドロジックを抽出して複数のサブプロジェクトで再利用したりできます。</para>
        <sample id="inheritedBuildLogic" dir="userguide/organizeBuildLogic/inherited" title="プロパティとメソッドの継承を使う / Using inherited properties and methods">
            <sourcefile file="build.gradle"/>
            <sourcefile file="child/build.gradle"/>
            <output args="-q show"/>
        </sample>
    </section>

    <section id="sec:injected_configuration">
        <title>設定のインジェクション<phrase role="original">Injected configuration</phrase></title>
        <para role="original">You can use the configuration injection technique discussed in <xref linkend="sec:cross_project_configuration"/>
            and <xref linkend="sec:subproject_configuration"/> to inject properties and methods into various projects.
            This is generally a better option than inheritance, for a number of reasons: The injection is
            explicit in the build script, You can inject different logic into different projects, And you can inject
            any kind of configuration such as repositories, plug-ins, tasks, and so on.
            The following sample shows how this works.
        </para>
        <para><xref linkend="sec:cross_project_configuration"/>や<xref linkend="sec:subproject_configuration"/>で紹介した設定のインジェクションを使って、複数のプロジェクトにプロパティとメソッドを注入できます。設定のインジェクションは、一般的には継承よりいい選択肢になるはずです。たくさん理由はありますが、たとえばインジェクションはスクリプト内で明示的に使用していることが分かりますし、いくつかのプロジェクトだけに別のロジックを注入することもできます。また、リポジトリ設定やGradleプラグイン、タスクなどどんな設定でも注入できます。インジェクションの例は以下のサンプルをご覧ください。</para>
        <sample id="injectedBuildLogic" dir="userguide/organizeBuildLogic/injected" title="プロパティとメソッドのインジェクション / Using injected properties and methods">
            <sourcefile file="build.gradle"/>
            <sourcefile file="child1/build.gradle"/>
            <output args="-q show"/>
        </sample>
    </section>
    
    <section id='sec:build_sources'>
        <title><filename>buildSrc</filename>プロジェクトのソースをビルドする<phrase role="original">Build sources in the <filename>buildSrc</filename> project</phrase></title>
        <para role="original">When you run Gradle, it checks for the existence of a directory called <filename>buildSrc</filename>. 
            Gradle then automatically compiles and tests this code and puts it in the classpath of your build script. 
            You don't need to provide any further instruction. This can be a good place to add your custom tasks and plugins.
        </para>
        <para>Gradleは実行されたときに<filename>buildSrc</filename>というディレクトリがないか確認します。
            そして、中のコードを自動的にコンパイル、テストして、ビルドスクリプトのクラスパスに追加してくれるのです。
            何かを設定する必要は一切ありません。このディレクトリは、カスタムタスクやプラグインを追加するのに適しています。</para>
        <para role="original">For multi-project builds there can be only one <filename>buildSrc</filename> directory, which has to be
            in the root project directory.
        </para>
        <para>マルチプロジェクトのビルドでは、ルートプロジェクトに一つだけ<filename>buildSrc</filename>ディレクトリを作成できます。</para>
        <para role="original">Listed below is the default build script that Gradle applies to the <filename>buildSrc</filename> project:</para>
        <para><filename>buildSrc</filename>プロジェクトには、次のビルドスクリプトがデフォルトで適用されます。</para>
        <figure>
            <title>デフォルトのbuildSrcビルドスクリプト<phrase role="original">Default buildSrc build script</phrase></title>
            <programlisting><xi:include href='../../../../../subprojects/core/src/main/resources/org/gradle/initialization/defaultBuildSourceScript.txt' parse='text'/></programlisting>
        </figure>
        <para role="original">
            This means that you can just put you build source code in this directory and stick to the layout convention for a 
            Java/Groovy project (see <xref linkend='javalayout'/>).
        </para>
        <para>つまり、Java/Groovyプロジェクトのレイアウト規約(<xref linkend='javalayout'/>参照)に従って、このディレクトリにソースコードを置くだけでいいということです。</para>
        <para role="original">
            If you need more flexibility, you can provide your own <filename>build.gradle</filename>. Gradle applies the default build script
            regardless of whether there is one specified. This means you only need to declare the extra things you need. Below is an example.
            Notice that this example does not need to declare a dependency on the Gradle API, as this is done by the default build script:
        </para>
        <para>さらに柔軟性が必要なときは、自分で<filename>build.gradle</filename>を用意することもできます。
            上記のデフォルトビルドスクリプトは、この場合でも適用されます。つまり、必要なものだけを追加で定義できるのです。次の例を見てください。Gradle APIへの依存関係は、デフォルトのビルドスクリプトで宣言されているため、ここでは宣言する必要がありません。</para>
        <sample id="customBuildSrcBuild" dir="java/multiproject" title="カスタムbuildSrcビルドスクリプト / Custom buildSrc build script">
            <sourcefile file="buildSrc/build.gradle"/>
        </sample>
        <para role="original">
            The <filename>buildSrc</filename> project can be a multi-project build. This works like any other regular Gradle multi-project build. However,
            you need to make all of the projects that you wish be on the classpath of the actual build <literal>runtime</literal> dependencies of the root project in 
            <filename>buildSrc</filename>. You can do this by adding this to the configuration of each project you wish to export:
        </para>
        <filename>buildSrc</filename>プロジェクトは、マルチプロジェクトにすることができます。このプロジェクトは、普通のGradleマルチプロジェクトと同じように動作します。
        <para>ただし、実際のビルドのクラスパスに置きたい全てのプロジェクトを、buildSrcルートプロジェクトの<literal>runtime</literal>依存関係にしなければなりません。これは、エクスポートしたい全てのプロジェクトの設定に、以下のコードを追加することで実現できます。</para>
        <sample id="multiProjectBuildSrc" dir="multiProjectBuildSrc" includeLocation="true" title="buildSrcルートプロジェクトにサブプロジェクトを追加する / Adding subprojects to the root buildSrc project">
            <sourcefile file="buildSrc/build.gradle" snippet="addToRootProject"/>
        </sample>
    </section>

    <section id="sec:external_build">
        <title>別のGradleビルドを、現在のビルドから呼び出して実行する<phrase role="original">Running another Gradle build from a build</phrase></title>
        <para role="original">You can use the <apilink class="org.gradle.api.tasks.GradleBuild"/> task. You can use either of the
            <literal>dir</literal> or <literal>buildFile</literal> properties to specify which build to execute,
            and the <literal>tasks</literal> property to specify which tasks to execute.
        </para>
        <para><apilink class="org.gradle.api.tasks.GradleBuild"/>で別のビルドを呼び出して実行することができます。そのとき、呼び出すビルドのディレクトリやビルドスクリプトに渡すプロパティを指定したり、実行するタスクのタスクプロパティを設定できます。</para>
        <sample id="nestedBuild" dir="userguide/organizeBuildLogic/nestedBuild" title="別のビルドを呼び出す / Running another build from a build">
            <sourcefile file="build.gradle" snippet="execute-build"/>
            <sourcefile file="other.gradle"/>
            <output args="-q build"/>
        </sample>
    </section>

    <section id='sec:external_dependencies'>
        <title>ビルドスクリプトで外部ライブラリを使うときの依存関係設定<phrase role="original">External dependencies for the build script</phrase></title>
        <para role="original">If your build script needs to use external libraries, you can add them to the script's classpath in the
            build script itself. You do this using the <literal>buildscript()</literal> method, passing in a closure which
            declares the build script classpath.
        </para>
        <para>ビルドスクリプトを実行するときに外部のライブラリを使いたいなら、そのライブラリをビルドスクリプトのクラスパスに追加しなければなりません。<literal>buildscript()</literal>メソッドにクロージャを渡し、その中でビルドスクリプトのクラスパスを設定できます。</para>
        <sample id="declareExternalBuildDependency" dir="userguide/organizeBuildLogic/externalDependency" title="ビルドスクリプトのクラスパスを宣言する / Declaring external dependencies for the build script">
            <sourcefile file="build.gradle" snippet="declare-classpath"/>
        </sample>
        <para role="original">The closure passed to the <literal>buildscript()</literal> method configures a
            <apilink class="org.gradle.api.initialization.dsl.ScriptHandler"/> instance. You declare the build script
            classpath by adding dependencies to the <literal>classpath</literal> configuration. This is the same way
            you declare, for example, the Java compilation classpath. You can use any of the dependency types described
            in <xref linkend='sec:how_to_declare_your_dependencies'/>, except project dependencies.</para>
        <para><literal>buildscript()</literal>メソッドに渡すクロージャは、<apilink class="org.gradle.api.initialization.dsl.ScriptHandler"/>のインスタンスにパラメータなどを設定するものです。ビルドスクリプトのクラスパスを追加するには、<literal>classpath</literal>で依存関係を宣言しましょう。形式はJavaでコンパイル時のクラスパスを宣言するときなどと同じです。<xref linkend='sec:how_to_declare_your_dependencies'/>に記載されているタイプの依存関係は、「プロジェクトへの依存」を除けばすべて使えます。</para>
        <para role="original">Having declared the build script classpath, you can use the classes in your build script as you would
            any other classes on the classpath. The following example adds to the previous example, and uses classes
            from the build script classpath.</para>
        <para>外部ライブラリのクラスをビルドスクリプトのクラスパスを追加すれば、他のクラスと同じようにスクリプト内で使えるようになります。次の例では、先ほどの例に加え、クラスパスに追加したクラスを実際に使っています。</para>
        <sample id="externalBuildDependency" dir="userguide/organizeBuildLogic/externalDependency" title="外部ライブラリをビルドスクリプトで使用する / A build script with external dependencies">
            <sourcefile file="build.gradle"/>
            <output args="-q encode"/>
        </sample>
        <para role="original">
            For multi-project builds, the dependencies declared in the a project's build script, are available to the
            build scripts of all sub-projects.
        </para>
        <para>マルチプロジェクトの場合、プロジェクトのビルドスクリプトでクラスパスを宣言すれば、そのサブプロジェクトすべてで追加したライブラリを使用できるようになります。</para>
    </section>

    <section id='sec:ant_optional_dependencies'>
        <title>Antオプショナルタスクの依存関係<phrase role="original">Ant optional dependencies</phrase></title>
        <para role="original">For reasons we don't fully understand yet, external dependencies are not picked up by Ant's optional
            tasks. But you can easily do it in another way.
            <footnote>
                <para role="original">In fact, we think this is anyway the nicer solution. Only if your buildscript and Ant's optional
                    task need the <emphasis>same</emphasis> library you would have to define it two times. In such a
                    case it would be nice, if Ant's optional task would automatically pickup the classpath defined
                    in the <literal>gradesettings</literal>.
                </para>
            </footnote>
        </para>
        <para>何でかよく分からないのですが、Antのオプショナルタスクでは先ほどの方法で追加した外部ライブラリを拾ってくれないようです。しかし、次のようにすればこの問題は簡単に解決できます。</para>
        <sample id="buildLogic" dir="userguide/organizeBuildLogic" title="Ant optional dependencies">
            <sourcefile file="build.gradle"/>
        </sample>
        <para role="original">This is also nice example for the usage of client modules. The <filename>pom.xml</filename> in maven central for the
        ant-commons-net task does not provide the right information for this use case.</para>
        <para>これはクライアントモジュールのいい使用例でもあります。mavenのセントラルリポジトリにあるant-commons-netタスクの<filename>pom.xml</filename>は、このユースケースのための正しい情報を提供していません。</para>
    </section>
    <section id='sec:philosophy'>
        <title>まとめ<phrase role="original">Summary</phrase></title>
        <para role="original">Gradle offers you a variety of ways of organizing your build logic. You can choose what is right for your
            domain and find the right balance between unnecessary indirections, and avoiding redundancy and a hard to
            maintain code base. It is our experience that even very complex custom build logic is rarely shared between
            different builds. Other build tools enforce a separation of this build logic into a separate project. Gradle
            spares you this unnecessary overhead and indirection.
        </para>
        <para>Gradleは、ビルドロジックを体系化するための様々な方法を提供しています。自分の分野に合った方法を選択して、不必要に複雑にならないように、一方でコードベースの重複やメンテナンス性の低下を避けられるように、適切なバランスを探っていくことができます。これまでの経験では、非常に複雑なビルドロジックでさえ、異なるビルド間で共有することはあまりありませんでした。いくつかのビルドツールでは、このビルドロジックを、ひとつの別のプロジェクトにして分離します。Gradleでは、そのような無駄なオーバーヘッドや複雑さを省くことができます。</para>
    </section>
</chapter>
