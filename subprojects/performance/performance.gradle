apply from: 'src/generator.groovy'

configurations {
    junit
}

dependencies {
    junit 'junit:junit:4.11'
    compile libraries.groovy
    testFixturesCompile project(':internalIntegTesting')
    testFixturesCompile 'com.googlecode.jatl:jatl:0.2.2'

    testFixturesRuntime 'com.h2database:h2:1.3.171'

    testCompile libraries.jsoup
}

useTestFixtures()
useClassycle()

task small(type: ProjectGeneratorTask, description: 'Generates a small project') {
}

task largeSrc(type: ProjectGeneratorTask, description: 'Generates a single project with lots of source files') {
    sourceFiles = 50000
    linesOfCodePerSourceFile = 20
//    subProjectTemplates << 'plain-ant-compile'
}

task multi(type: ProjectGeneratorTask, description: 'Generates a multi-project build') {
    projects = 25
    sourceFiles = 100
}

task mixedSize(type: ProjectGeneratorTask) {
    projects = 400
    sourceFiles = 100
    projects[1].sourceFiles = 20000
}

task withJUnit(type: ProjectGeneratorTask) {
    projects = 1
    sourceFiles = 100
    subProjectTemplates << 'with-junit'
}

task withTestNG(type: ProjectGeneratorTask) {
    projects = 1
    sourceFiles = 100
    subProjectTemplates << 'with-testng'
}

task withVerboseTestNG(type: ProjectGeneratorTask) {
    projects = 1
    sourceFiles = 10
    subProjectTemplates << 'with-verbose-testng'
}

task withVerboseJUnit(type: ProjectGeneratorTask) {
    projects = 1
    sourceFiles = 10
    subProjectTemplates << 'with-verbose-junit'
}

task multiGroovy(type: ProjectGeneratorTask, description: 'Generates a multi-project Groovy build') {
    projects = 25
    groovyProject = true
}

task multiScala(type: ProjectGeneratorTask, description: 'Generates a multi-project Scala build') {
    projects = 25
    scalaProject = true
}

task multiGroovyScala(type: ProjectGeneratorTask, description: 'Generates a multi-project Groovy & Scala build') {
    projects = 25
    groovyProject = true
    scalaProject = true
}

task largeMulti(type: ProjectGeneratorTask, description: 'Generates a large multi-project build') {
    projects = 800
    sourceFiles = 100
}

task lotDependencies(type: ProjectGeneratorTask, description: 'Generates a small multi-project build with a large Dependency Graph') {
    projects = 5
    sourceFiles = 100

    dependencyGraph {
        size = 200
        depth = 4
        useSnapshotVersions = true //default is false
    }
}

task manyProjects(type: ProjectGeneratorTask) {
    projects = 100
    sourceFiles = 0
}

def generators = tasks.withType(ProjectGeneratorTask) {
    group = 'Project setup'
    testDependencies = configurations.junit
}

task all(dependsOn: generators)

task prepareSamples(dependsOn: [small, multi, lotDependencies, withJUnit, withTestNG, withVerboseTestNG, withVerboseJUnit, manyProjects])

integTestTasks.all {
    dependsOn prepareSamples
    maxParallelForks = 1

    testLogging {
        showStandardStreams = true
        lifecycle {
            exceptionFormat 'full'
        }
    }
}

eclipse {
    classpath {
        file.whenMerged { classpath ->
            //**TODO
            classpath.entries.removeAll {it.path.contains('src/test/groovy')}
            classpath.entries.removeAll {it.path.contains('src/testFixtures/groovy')}
            classpath.entries.removeAll {it.path.contains('src/integTest/groovy')}
        }
    }
}
